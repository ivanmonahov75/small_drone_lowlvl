
small_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c30  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08009dc8  08009dc8  00019dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e78  08009e78  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08009e78  08009e78  00019e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e80  08009e80  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e80  08009e80  00019e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e84  08009e84  00019e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08009e88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001604  20000160  08009fe8  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001764  08009fe8  00021764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015458  00000000  00000000  000201d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003520  00000000  00000000  0003562b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  00038b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f0d  00000000  00000000  00039ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000193ac  00000000  00000000  0003addd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018018  00000000  00000000  00054189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000916ef  00000000  00000000  0006c1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005690  00000000  00000000  000fd890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00102f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000160 	.word	0x20000160
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009db0 	.word	0x08009db0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000164 	.word	0x20000164
 80001d4:	08009db0 	.word	0x08009db0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b64:	f000 b970 	b.w	8000e48 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9e08      	ldr	r6, [sp, #32]
 8000b86:	460d      	mov	r5, r1
 8000b88:	4604      	mov	r4, r0
 8000b8a:	460f      	mov	r7, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14a      	bne.n	8000c26 <__udivmoddi4+0xa6>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4694      	mov	ip, r2
 8000b94:	d965      	bls.n	8000c62 <__udivmoddi4+0xe2>
 8000b96:	fab2 f382 	clz	r3, r2
 8000b9a:	b143      	cbz	r3, 8000bae <__udivmoddi4+0x2e>
 8000b9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba0:	f1c3 0220 	rsb	r2, r3, #32
 8000ba4:	409f      	lsls	r7, r3
 8000ba6:	fa20 f202 	lsr.w	r2, r0, r2
 8000baa:	4317      	orrs	r7, r2
 8000bac:	409c      	lsls	r4, r3
 8000bae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bb2:	fa1f f58c 	uxth.w	r5, ip
 8000bb6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bba:	0c22      	lsrs	r2, r4, #16
 8000bbc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bc0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc4:	fb01 f005 	mul.w	r0, r1, r5
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	d90a      	bls.n	8000be2 <__udivmoddi4+0x62>
 8000bcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bd4:	f080 811c 	bcs.w	8000e10 <__udivmoddi4+0x290>
 8000bd8:	4290      	cmp	r0, r2
 8000bda:	f240 8119 	bls.w	8000e10 <__udivmoddi4+0x290>
 8000bde:	3902      	subs	r1, #2
 8000be0:	4462      	add	r2, ip
 8000be2:	1a12      	subs	r2, r2, r0
 8000be4:	b2a4      	uxth	r4, r4
 8000be6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bea:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf2:	fb00 f505 	mul.w	r5, r0, r5
 8000bf6:	42a5      	cmp	r5, r4
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x90>
 8000bfa:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c02:	f080 8107 	bcs.w	8000e14 <__udivmoddi4+0x294>
 8000c06:	42a5      	cmp	r5, r4
 8000c08:	f240 8104 	bls.w	8000e14 <__udivmoddi4+0x294>
 8000c0c:	4464      	add	r4, ip
 8000c0e:	3802      	subs	r0, #2
 8000c10:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c14:	1b64      	subs	r4, r4, r5
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11e      	cbz	r6, 8000c22 <__udivmoddi4+0xa2>
 8000c1a:	40dc      	lsrs	r4, r3
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0xbc>
 8000c2a:	2e00      	cmp	r6, #0
 8000c2c:	f000 80ed 	beq.w	8000e0a <__udivmoddi4+0x28a>
 8000c30:	2100      	movs	r1, #0
 8000c32:	e9c6 0500 	strd	r0, r5, [r6]
 8000c36:	4608      	mov	r0, r1
 8000c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3c:	fab3 f183 	clz	r1, r3
 8000c40:	2900      	cmp	r1, #0
 8000c42:	d149      	bne.n	8000cd8 <__udivmoddi4+0x158>
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	d302      	bcc.n	8000c4e <__udivmoddi4+0xce>
 8000c48:	4282      	cmp	r2, r0
 8000c4a:	f200 80f8 	bhi.w	8000e3e <__udivmoddi4+0x2be>
 8000c4e:	1a84      	subs	r4, r0, r2
 8000c50:	eb65 0203 	sbc.w	r2, r5, r3
 8000c54:	2001      	movs	r0, #1
 8000c56:	4617      	mov	r7, r2
 8000c58:	2e00      	cmp	r6, #0
 8000c5a:	d0e2      	beq.n	8000c22 <__udivmoddi4+0xa2>
 8000c5c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c60:	e7df      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000c62:	b902      	cbnz	r2, 8000c66 <__udivmoddi4+0xe6>
 8000c64:	deff      	udf	#255	; 0xff
 8000c66:	fab2 f382 	clz	r3, r2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f040 8090 	bne.w	8000d90 <__udivmoddi4+0x210>
 8000c70:	1a8a      	subs	r2, r1, r2
 8000c72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c80:	fb07 2015 	mls	r0, r7, r5, r2
 8000c84:	0c22      	lsrs	r2, r4, #16
 8000c86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c8a:	fb0e f005 	mul.w	r0, lr, r5
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x124>
 8000c92:	eb1c 0202 	adds.w	r2, ip, r2
 8000c96:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x122>
 8000c9c:	4290      	cmp	r0, r2
 8000c9e:	f200 80cb 	bhi.w	8000e38 <__udivmoddi4+0x2b8>
 8000ca2:	4645      	mov	r5, r8
 8000ca4:	1a12      	subs	r2, r2, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cac:	fb07 2210 	mls	r2, r7, r0, r2
 8000cb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x14e>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cc4:	d202      	bcs.n	8000ccc <__udivmoddi4+0x14c>
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	f200 80bb 	bhi.w	8000e42 <__udivmoddi4+0x2c2>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cd6:	e79f      	b.n	8000c18 <__udivmoddi4+0x98>
 8000cd8:	f1c1 0720 	rsb	r7, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce6:	fa05 f401 	lsl.w	r4, r5, r1
 8000cea:	fa20 f307 	lsr.w	r3, r0, r7
 8000cee:	40fd      	lsrs	r5, r7
 8000cf0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cfa:	fa1f fe8c 	uxth.w	lr, ip
 8000cfe:	fb09 5518 	mls	r5, r9, r8, r5
 8000d02:	0c1c      	lsrs	r4, r3, #16
 8000d04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d08:	fb08 f50e 	mul.w	r5, r8, lr
 8000d0c:	42a5      	cmp	r5, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	fa00 f001 	lsl.w	r0, r0, r1
 8000d16:	d90b      	bls.n	8000d30 <__udivmoddi4+0x1b0>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d20:	f080 8088 	bcs.w	8000e34 <__udivmoddi4+0x2b4>
 8000d24:	42a5      	cmp	r5, r4
 8000d26:	f240 8085 	bls.w	8000e34 <__udivmoddi4+0x2b4>
 8000d2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2e:	4464      	add	r4, ip
 8000d30:	1b64      	subs	r4, r4, r5
 8000d32:	b29d      	uxth	r5, r3
 8000d34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d38:	fb09 4413 	mls	r4, r9, r3, r4
 8000d3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d40:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1da>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d50:	d26c      	bcs.n	8000e2c <__udivmoddi4+0x2ac>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	d96a      	bls.n	8000e2c <__udivmoddi4+0x2ac>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	4464      	add	r4, ip
 8000d5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d62:	eba4 040e 	sub.w	r4, r4, lr
 8000d66:	42ac      	cmp	r4, r5
 8000d68:	46c8      	mov	r8, r9
 8000d6a:	46ae      	mov	lr, r5
 8000d6c:	d356      	bcc.n	8000e1c <__udivmoddi4+0x29c>
 8000d6e:	d053      	beq.n	8000e18 <__udivmoddi4+0x298>
 8000d70:	b156      	cbz	r6, 8000d88 <__udivmoddi4+0x208>
 8000d72:	ebb0 0208 	subs.w	r2, r0, r8
 8000d76:	eb64 040e 	sbc.w	r4, r4, lr
 8000d7a:	fa04 f707 	lsl.w	r7, r4, r7
 8000d7e:	40ca      	lsrs	r2, r1
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	4317      	orrs	r7, r2
 8000d84:	e9c6 7400 	strd	r7, r4, [r6]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	f1c3 0120 	rsb	r1, r3, #32
 8000d94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d98:	fa20 f201 	lsr.w	r2, r0, r1
 8000d9c:	fa25 f101 	lsr.w	r1, r5, r1
 8000da0:	409d      	lsls	r5, r3
 8000da2:	432a      	orrs	r2, r5
 8000da4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db0:	fb07 1510 	mls	r5, r7, r0, r1
 8000db4:	0c11      	lsrs	r1, r2, #16
 8000db6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dba:	fb00 f50e 	mul.w	r5, r0, lr
 8000dbe:	428d      	cmp	r5, r1
 8000dc0:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x258>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dce:	d22f      	bcs.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd0:	428d      	cmp	r5, r1
 8000dd2:	d92d      	bls.n	8000e30 <__udivmoddi4+0x2b0>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4461      	add	r1, ip
 8000dd8:	1b49      	subs	r1, r1, r5
 8000dda:	b292      	uxth	r2, r2
 8000ddc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000de0:	fb07 1115 	mls	r1, r7, r5, r1
 8000de4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dec:	4291      	cmp	r1, r2
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x282>
 8000df0:	eb1c 0202 	adds.w	r2, ip, r2
 8000df4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000df8:	d216      	bcs.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfa:	4291      	cmp	r1, r2
 8000dfc:	d914      	bls.n	8000e28 <__udivmoddi4+0x2a8>
 8000dfe:	3d02      	subs	r5, #2
 8000e00:	4462      	add	r2, ip
 8000e02:	1a52      	subs	r2, r2, r1
 8000e04:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e08:	e738      	b.n	8000c7c <__udivmoddi4+0xfc>
 8000e0a:	4631      	mov	r1, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e708      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000e10:	4639      	mov	r1, r7
 8000e12:	e6e6      	b.n	8000be2 <__udivmoddi4+0x62>
 8000e14:	4610      	mov	r0, r2
 8000e16:	e6fb      	b.n	8000c10 <__udivmoddi4+0x90>
 8000e18:	4548      	cmp	r0, r9
 8000e1a:	d2a9      	bcs.n	8000d70 <__udivmoddi4+0x1f0>
 8000e1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e20:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e24:	3b01      	subs	r3, #1
 8000e26:	e7a3      	b.n	8000d70 <__udivmoddi4+0x1f0>
 8000e28:	4645      	mov	r5, r8
 8000e2a:	e7ea      	b.n	8000e02 <__udivmoddi4+0x282>
 8000e2c:	462b      	mov	r3, r5
 8000e2e:	e794      	b.n	8000d5a <__udivmoddi4+0x1da>
 8000e30:	4640      	mov	r0, r8
 8000e32:	e7d1      	b.n	8000dd8 <__udivmoddi4+0x258>
 8000e34:	46d0      	mov	r8, sl
 8000e36:	e77b      	b.n	8000d30 <__udivmoddi4+0x1b0>
 8000e38:	3d02      	subs	r5, #2
 8000e3a:	4462      	add	r2, ip
 8000e3c:	e732      	b.n	8000ca4 <__udivmoddi4+0x124>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e70a      	b.n	8000c58 <__udivmoddi4+0xd8>
 8000e42:	4464      	add	r4, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e742      	b.n	8000cce <__udivmoddi4+0x14e>

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <MPU6050_init>:
I2C_HandleTypeDef *MPU6050_hi2c;
int32_t gyro_offset[3] = { -21, -4, 0 }; // TODO: add auto calibration

// just init
void MPU6050_init(I2C_HandleTypeDef *hi2c, uint8_t sampling_rate,
		uint8_t guro_sens, uint8_t accel_sens) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af04      	add	r7, sp, #16
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	4608      	mov	r0, r1
 8000e56:	4611      	mov	r1, r2
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	70fb      	strb	r3, [r7, #3]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	70bb      	strb	r3, [r7, #2]
 8000e62:	4613      	mov	r3, r2
 8000e64:	707b      	strb	r3, [r7, #1]
	// set i2c channel
	MPU6050_hi2c = hi2c;
 8000e66:	4a3d      	ldr	r2, [pc, #244]	; (8000f5c <MPU6050_init+0x110>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6013      	str	r3, [r2, #0]
	uint8_t temp = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
	// check if device is working correctly
	HAL_I2C_Mem_Read(MPU6050_hi2c, MPU6050_ADR, 0x75, 1, &temp, 1, I2C_TIMEOUT);
 8000e70:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <MPU6050_init+0x110>)
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	f107 030f 	add.w	r3, r7, #15
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2301      	movs	r3, #1
 8000e86:	2275      	movs	r2, #117	; 0x75
 8000e88:	21d0      	movs	r1, #208	; 0xd0
 8000e8a:	f001 fae3 	bl	8002454 <HAL_I2C_Mem_Read>
	// if return value is correct proceed
	if (temp == 104) {
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	2b68      	cmp	r3, #104	; 0x68
 8000e92:	d14c      	bne.n	8000f2e <MPU6050_init+0xe2>
		// wake device up
		temp = 0b00000000;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADR, PWR_MGMT_1_REG, 1, &temp,
 8000e98:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <MPU6050_init+0x110>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea0:	9302      	str	r3, [sp, #8]
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	f107 030f 	add.w	r3, r7, #15
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2301      	movs	r3, #1
 8000eae:	226b      	movs	r2, #107	; 0x6b
 8000eb0:	21d0      	movs	r1, #208	; 0xd0
 8000eb2:	f001 f9d5 	bl	8002260 <HAL_I2C_Mem_Write>
				1,
				I2C_TIMEOUT);

		// set correct sample rate (in this case 1 KHz)
		HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADR, SMPLRT_DIV_REG, 1,
 8000eb6:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <MPU6050_init+0x110>)
 8000eb8:	6818      	ldr	r0, [r3, #0]
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	1cfb      	adds	r3, r7, #3
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	2219      	movs	r2, #25
 8000ecc:	21d0      	movs	r1, #208	; 0xd0
 8000ece:	f001 f9c7 	bl	8002260 <HAL_I2C_Mem_Write>
				&sampling_rate, 1,
				I2C_TIMEOUT);

		// set accel register value (4g)
		HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADR, ACCEL_CONFIG_REG, 1,
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MPU6050_init+0x110>)
 8000ed4:	6818      	ldr	r0, [r3, #0]
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	9302      	str	r3, [sp, #8]
 8000edc:	2301      	movs	r3, #1
 8000ede:	9301      	str	r3, [sp, #4]
 8000ee0:	1cbb      	adds	r3, r7, #2
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	221c      	movs	r2, #28
 8000ee8:	21d0      	movs	r1, #208	; 0xd0
 8000eea:	f001 f9b9 	bl	8002260 <HAL_I2C_Mem_Write>
				&guro_sens, 1,
				I2C_TIMEOUT);

		// set gyro register value (500 degree/sec)
		HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADR, GYRO_CONFIG_REG, 1,
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MPU6050_init+0x110>)
 8000ef0:	6818      	ldr	r0, [r3, #0]
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	1c7b      	adds	r3, r7, #1
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2301      	movs	r3, #1
 8000f02:	221b      	movs	r2, #27
 8000f04:	21d0      	movs	r1, #208	; 0xd0
 8000f06:	f001 f9ab 	bl	8002260 <HAL_I2C_Mem_Write>
				&accel_sens, 1,
				I2C_TIMEOUT);
		// set up low pass filter (pre-installed)
		temp = 0x05;
 8000f0a:	2305      	movs	r3, #5
 8000f0c:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADR, LOW_PASS_FILTER_REG, 1, &temp, 1, I2C_TIMEOUT);
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MPU6050_init+0x110>)
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	9302      	str	r3, [sp, #8]
 8000f18:	2301      	movs	r3, #1
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	f107 030f 	add.w	r3, r7, #15
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2301      	movs	r3, #1
 8000f24:	221a      	movs	r2, #26
 8000f26:	21d0      	movs	r1, #208	; 0xd0
 8000f28:	f001 f99a 	bl	8002260 <HAL_I2C_Mem_Write>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
			HAL_Delay(800);
		}
	}

}
 8000f2c:	e013      	b.n	8000f56 <MPU6050_init+0x10a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f34:	480a      	ldr	r0, [pc, #40]	; (8000f60 <MPU6050_init+0x114>)
 8000f36:	f001 f835 	bl	8001fa4 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000f3a:	20c8      	movs	r0, #200	; 0xc8
 8000f3c:	f000 fd78 	bl	8001a30 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <MPU6050_init+0x114>)
 8000f48:	f001 f82c 	bl	8001fa4 <HAL_GPIO_WritePin>
			HAL_Delay(800);
 8000f4c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f50:	f000 fd6e 	bl	8001a30 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000f54:	e7eb      	b.n	8000f2e <MPU6050_init+0xe2>
}
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000017c 	.word	0x2000017c
 8000f60:	40020800 	.word	0x40020800

08000f64 <MPU6050_getGyroValues>:

// get gyro samples, copies them in angles
void MPU6050_getGyroValues(int16_t *angles) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af04      	add	r7, sp, #16
 8000f6a:	6078      	str	r0, [r7, #4]
	// define and write
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read(MPU6050_hi2c, MPU6050_ADR, GYRO_XOUT_H_REG, 1, Rec_Data, 6,
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <MPU6050_getGyroValues+0x68>)
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	2306      	movs	r3, #6
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	2243      	movs	r2, #67	; 0x43
 8000f84:	21d0      	movs	r1, #208	; 0xd0
 8000f86:	f001 fa65 	bl	8002454 <HAL_I2C_Mem_Read>
	I2C_TIMEOUT);

	// transform to raw
	angles[0] = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]); // X values
 8000f8a:	7a3b      	ldrb	r3, [r7, #8]
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	7a7b      	ldrb	r3, [r7, #9]
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b21a      	sxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	801a      	strh	r2, [r3, #0]
	angles[1] = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]); // Y values
 8000f9c:	7abb      	ldrb	r3, [r7, #10]
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	b219      	sxth	r1, r3
 8000fa2:	7afb      	ldrb	r3, [r7, #11]
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3302      	adds	r3, #2
 8000faa:	430a      	orrs	r2, r1
 8000fac:	b212      	sxth	r2, r2
 8000fae:	801a      	strh	r2, [r3, #0]
	angles[2] = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]); // Z values
 8000fb0:	7b3b      	ldrb	r3, [r7, #12]
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b219      	sxth	r1, r3
 8000fb6:	7b7b      	ldrb	r3, [r7, #13]
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	b212      	sxth	r2, r2
 8000fc2:	801a      	strh	r2, [r3, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	2000017c 	.word	0x2000017c

08000fd0 <MPU6050_getAccelValues>:

// same for accel
void MPU6050_getAccelValues(int16_t *acceleration) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af04      	add	r7, sp, #16
 8000fd6:	6078      	str	r0, [r7, #4]
	// define and write
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read(MPU6050_hi2c, MPU6050_ADR, ACCEL_XOUT_H_REG, 1, Rec_Data,
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <MPU6050_getAccelValues+0x68>)
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	2306      	movs	r3, #6
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	223b      	movs	r2, #59	; 0x3b
 8000ff0:	21d0      	movs	r1, #208	; 0xd0
 8000ff2:	f001 fa2f 	bl	8002454 <HAL_I2C_Mem_Read>
			6,
			I2C_TIMEOUT);

	// transform to raw
	acceleration[0] = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]); // X values
 8000ff6:	7a3b      	ldrb	r3, [r7, #8]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	7a7b      	ldrb	r3, [r7, #9]
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b21a      	sxth	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	801a      	strh	r2, [r3, #0]
	acceleration[1] = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]); // Y values
 8001008:	7abb      	ldrb	r3, [r7, #10]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b219      	sxth	r1, r3
 800100e:	7afb      	ldrb	r3, [r7, #11]
 8001010:	b21a      	sxth	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3302      	adds	r3, #2
 8001016:	430a      	orrs	r2, r1
 8001018:	b212      	sxth	r2, r2
 800101a:	801a      	strh	r2, [r3, #0]
	acceleration[2] = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]); // Z values
 800101c:	7b3b      	ldrb	r3, [r7, #12]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b219      	sxth	r1, r3
 8001022:	7b7b      	ldrb	r3, [r7, #13]
 8001024:	b21a      	sxth	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3304      	adds	r3, #4
 800102a:	430a      	orrs	r2, r1
 800102c:	b212      	sxth	r2, r2
 800102e:	801a      	strh	r2, [r3, #0]
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000017c 	.word	0x2000017c
 800103c:	00000000 	.word	0x00000000

08001040 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001040:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001044:	b09c      	sub	sp, #112	; 0x70
 8001046:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001048:	f000 fc80 	bl	800194c <HAL_Init>

	/* USER CODE BEGIN Init */
	HAL_Delay(1000);	// delay to give mpu6050 time to start
 800104c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001050:	f000 fcee 	bl	8001a30 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); 	// turn led off
 8001054:	2201      	movs	r2, #1
 8001056:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105a:	48dd      	ldr	r0, [pc, #884]	; (80013d0 <main+0x390>)
 800105c:	f000 ffa2 	bl	8001fa4 <HAL_GPIO_WritePin>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001060:	f000 f9c2 	bl	80013e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001064:	f000 fad4 	bl	8001610 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001068:	f000 fa2a 	bl	80014c0 <MX_I2C1_Init>
	MX_USB_DEVICE_Init();
 800106c:	f007 feac 	bl	8008dc8 <MX_USB_DEVICE_Init>
	MX_TIM2_Init();
 8001070:	f000 fa54 	bl	800151c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001074:	2100      	movs	r1, #0
 8001076:	48d7      	ldr	r0, [pc, #860]	; (80013d4 <main+0x394>)
 8001078:	f003 fe7e 	bl	8004d78 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800107c:	2104      	movs	r1, #4
 800107e:	48d5      	ldr	r0, [pc, #852]	; (80013d4 <main+0x394>)
 8001080:	f003 fe7a 	bl	8004d78 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001084:	2108      	movs	r1, #8
 8001086:	48d3      	ldr	r0, [pc, #844]	; (80013d4 <main+0x394>)
 8001088:	f003 fe76 	bl	8004d78 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800108c:	210c      	movs	r1, #12
 800108e:	48d1      	ldr	r0, [pc, #836]	; (80013d4 <main+0x394>)
 8001090:	f003 fe72 	bl	8004d78 <HAL_TIM_PWM_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	MPU6050_init(&hi2c1, SAMPLING_RATE_1KHZ, GYRO_500DS, ACCEL_8G); // init mpu6050
 8001094:	2310      	movs	r3, #16
 8001096:	2208      	movs	r2, #8
 8001098:	2107      	movs	r1, #7
 800109a:	48cf      	ldr	r0, [pc, #828]	; (80013d8 <main+0x398>)
 800109c:	f7ff fed6 	bl	8000e4c <MPU6050_init>

	TIM2->CCR1 = 1000;	// set timer values to keep motors off
 80010a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = 1000;
 80010aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010b2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = 1000;
 80010b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010bc:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = 1000;
 80010be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40

	// init our values
	double half_data = 0;
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f04f 0300 	mov.w	r3, #0
 80010d0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int16_t Rec_data_raw[3];
	double angles_gyro[3] = { 0.0, 0.0, 0.0 };
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	float angles_accel[2] = { 0.0, 0.0};
 80010f8:	f04f 0300 	mov.w	r3, #0
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80010fe:	f04f 0300 	mov.w	r3, #0
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
	float angles_accel_raw[3] = { 0.0, 0.0, 0.0 };
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24

	// calibration cycle
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0); 	// turn on led
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111c:	48ac      	ldr	r0, [pc, #688]	; (80013d0 <main+0x390>)
 800111e:	f000 ff41 	bl	8001fa4 <HAL_GPIO_WritePin>

	uint16_t calibration;
	uint16_t sample_amount = 1000;
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	float gyro_offset[3] = { 0, 0, 0 };
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
	float accel_offset[3] = { +0.055, -0.03, -0.1 }; // accel offset is measured manually
 800113c:	4aa7      	ldr	r2, [pc, #668]	; (80013dc <main+0x39c>)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	ca07      	ldmia	r2, {r0, r1, r2}
 8001142:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (calibration = 0; calibration < sample_amount; calibration++) {
 8001146:	2300      	movs	r3, #0
 8001148:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800114c:	e036      	b.n	80011bc <main+0x17c>
		MPU6050_getGyroValues(Rec_data_raw); // get gyro values
 800114e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff06 	bl	8000f64 <MPU6050_getGyroValues>
		for (uint8_t i = 0; i < 3; i++) {
 8001158:	2300      	movs	r3, #0
 800115a:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800115e:	e024      	b.n	80011aa <main+0x16a>
			gyro_offset[i] += Rec_data_raw[i]; // add them to total sum
 8001160:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	3370      	adds	r3, #112	; 0x70
 8001168:	443b      	add	r3, r7
 800116a:	3b60      	subs	r3, #96	; 0x60
 800116c:	ed93 7a00 	vldr	s14, [r3]
 8001170:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	3370      	adds	r3, #112	; 0x70
 8001178:	443b      	add	r3, r7
 800117a:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001186:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800118a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	3370      	adds	r3, #112	; 0x70
 8001192:	443b      	add	r3, r7
 8001194:	3b60      	subs	r3, #96	; 0x60
 8001196:	edc3 7a00 	vstr	s15, [r3]
			HAL_Delay(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f000 fc48 	bl	8001a30 <HAL_Delay>
		for (uint8_t i = 0; i < 3; i++) {
 80011a0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80011a4:	3301      	adds	r3, #1
 80011a6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 80011aa:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d9d6      	bls.n	8001160 <main+0x120>
	for (calibration = 0; calibration < sample_amount; calibration++) {
 80011b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80011b6:	3301      	adds	r3, #1
 80011b8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80011bc:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80011c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d3c2      	bcc.n	800114e <main+0x10e>
		}
	}

	for (uint8_t i = 0; i < 3; i++) {
 80011c8:	2300      	movs	r3, #0
 80011ca:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 80011ce:	e01c      	b.n	800120a <main+0x1ca>
		gyro_offset[i] = (float) gyro_offset[i] / sample_amount; // normalize values
 80011d0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	3370      	adds	r3, #112	; 0x70
 80011d8:	443b      	add	r3, r7
 80011da:	3b60      	subs	r3, #96	; 0x60
 80011dc:	edd3 6a00 	vldr	s13, [r3]
 80011e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ec:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80011f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	3370      	adds	r3, #112	; 0x70
 80011f8:	443b      	add	r3, r7
 80011fa:	3b60      	subs	r3, #96	; 0x60
 80011fc:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < 3; i++) {
 8001200:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001204:	3301      	adds	r3, #1
 8001206:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 800120a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800120e:	2b02      	cmp	r3, #2
 8001210:	d9de      	bls.n	80011d0 <main+0x190>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);  	// turn off led
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001218:	486d      	ldr	r0, [pc, #436]	; (80013d0 <main+0x390>)
 800121a:	f000 fec3 	bl	8001fa4 <HAL_GPIO_WritePin>

	// set start time
	uint32_t cur = 0, tm = HAL_GetTick();
 800121e:	2300      	movs	r3, #0
 8001220:	65bb      	str	r3, [r7, #88]	; 0x58
 8001222:	f000 fbf9 	bl	8001a18 <HAL_GetTick>
 8001226:	6578      	str	r0, [r7, #84]	; 0x54

	while (1) {
		HAL_Delay(2);
 8001228:	2002      	movs	r0, #2
 800122a:	f000 fc01 	bl	8001a30 <HAL_Delay>
//			}
//
//		}
//
//		tm = HAL_GetTick();
		MPU6050_getAccelValues(Rec_data_raw);
 800122e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fecc 	bl	8000fd0 <MPU6050_getAccelValues>
		for (uint8_t i = 0; i < 3; i++) {
 8001238:	2300      	movs	r3, #0
 800123a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800123e:	e025      	b.n	800128c <main+0x24c>
			angles_accel_raw[i] = (float) Rec_data_raw[i] / 8192
 8001240:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	3370      	adds	r3, #112	; 0x70
 8001248:	443b      	add	r3, r7
 800124a:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001256:	eddf 6a62 	vldr	s13, [pc, #392]	; 80013e0 <main+0x3a0>
 800125a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					- accel_offset[i];
 800125e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	3370      	adds	r3, #112	; 0x70
 8001266:	443b      	add	r3, r7
 8001268:	3b6c      	subs	r3, #108	; 0x6c
 800126a:	edd3 7a00 	vldr	s15, [r3]
			angles_accel_raw[i] = (float) Rec_data_raw[i] / 8192
 800126e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
					- accel_offset[i];
 8001272:	ee77 7a67 	vsub.f32	s15, s14, s15
			angles_accel_raw[i] = (float) Rec_data_raw[i] / 8192
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	3370      	adds	r3, #112	; 0x70
 800127a:	443b      	add	r3, r7
 800127c:	3b54      	subs	r3, #84	; 0x54
 800127e:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t i = 0; i < 3; i++) {
 8001282:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001286:	3301      	adds	r3, #1
 8001288:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800128c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001290:	2b02      	cmp	r3, #2
 8001292:	d9d5      	bls.n	8001240 <main+0x200>
		}
		angles_accel[0] = atan(
				angles_accel_raw[1]
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f902 	bl	80004a0 <__aeabi_f2d>
 800129c:	4680      	mov	r8, r0
 800129e:	4689      	mov	r9, r1
						/ sqrt(
								angles_accel_raw[0] * angles_accel_raw[0]
 80012a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80012a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80012a8:	ee27 7a27 	vmul.f32	s14, s14, s15
										+ angles_accel_raw[2]
 80012ac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
												* angles_accel_raw[2])) * M_1_PI
 80012b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
										+ angles_accel_raw[2]
 80012b8:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ sqrt(
 80012bc:	ee17 0a90 	vmov	r0, s15
 80012c0:	f7ff f8ee 	bl	80004a0 <__aeabi_f2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	ec43 2b10 	vmov	d0, r2, r3
 80012cc:	f008 fabe 	bl	800984c <sqrt>
 80012d0:	ec53 2b10 	vmov	r2, r3, d0
		angles_accel[0] = atan(
 80012d4:	4640      	mov	r0, r8
 80012d6:	4649      	mov	r1, r9
 80012d8:	f7ff fa64 	bl	80007a4 <__aeabi_ddiv>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	ec43 2b17 	vmov	d7, r2, r3
 80012e4:	eeb0 0a47 	vmov.f32	s0, s14
 80012e8:	eef0 0a67 	vmov.f32	s1, s15
 80012ec:	f008 fadc 	bl	80098a8 <atan>
 80012f0:	ec51 0b10 	vmov	r0, r1, d0
												* angles_accel_raw[2])) * M_1_PI
 80012f4:	a334      	add	r3, pc, #208	; (adr r3, 80013c8 <main+0x388>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7ff f929 	bl	8000550 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
				* 180;
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <main+0x3a4>)
 800130c:	f7ff f920 	bl	8000550 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fbca 	bl	8000ab0 <__aeabi_d2f>
 800131c:	4603      	mov	r3, r0
		angles_accel[0] = atan(
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
		angles_accel[1] = -atan(
				angles_accel_raw[0]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f8bc 	bl	80004a0 <__aeabi_f2d>
 8001328:	4680      	mov	r8, r0
 800132a:	4689      	mov	r9, r1
						/ sqrt(
								angles_accel_raw[1] * angles_accel_raw[1]
 800132c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001330:	edd7 7a08 	vldr	s15, [r7, #32]
 8001334:	ee27 7a27 	vmul.f32	s14, s14, s15
										+ angles_accel_raw[2]
 8001338:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
												* angles_accel_raw[2])) * M_1_PI
 800133c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001340:	ee66 7aa7 	vmul.f32	s15, s13, s15
										+ angles_accel_raw[2]
 8001344:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ sqrt(
 8001348:	ee17 0a90 	vmov	r0, s15
 800134c:	f7ff f8a8 	bl	80004a0 <__aeabi_f2d>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	ec43 2b10 	vmov	d0, r2, r3
 8001358:	f008 fa78 	bl	800984c <sqrt>
 800135c:	ec53 2b10 	vmov	r2, r3, d0
		angles_accel[1] = -atan(
 8001360:	4640      	mov	r0, r8
 8001362:	4649      	mov	r1, r9
 8001364:	f7ff fa1e 	bl	80007a4 <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	ec43 2b17 	vmov	d7, r2, r3
 8001370:	eeb0 0a47 	vmov.f32	s0, s14
 8001374:	eef0 0a67 	vmov.f32	s1, s15
 8001378:	f008 fa96 	bl	80098a8 <atan>
 800137c:	ec53 2b10 	vmov	r2, r3, d0
 8001380:	4614      	mov	r4, r2
 8001382:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
												* angles_accel_raw[2])) * M_1_PI
 8001386:	a310      	add	r3, pc, #64	; (adr r3, 80013c8 <main+0x388>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	f7ff f8de 	bl	8000550 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
				* 180;
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <main+0x3a4>)
 80013a2:	f7ff f8d5 	bl	8000550 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff fb7f 	bl	8000ab0 <__aeabi_d2f>
 80013b2:	4603      	mov	r3, r0
		angles_accel[1] = -atan(
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		CDC_Transmit_FS(angles_accel_raw, sizeof(angles_accel_raw));
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	210c      	movs	r1, #12
 80013bc:	4618      	mov	r0, r3
 80013be:	f007 fdc1 	bl	8008f44 <CDC_Transmit_FS>
		HAL_Delay(2);
 80013c2:	e731      	b.n	8001228 <main+0x1e8>
 80013c4:	f3af 8000 	nop.w
 80013c8:	6dc9c883 	.word	0x6dc9c883
 80013cc:	3fd45f30 	.word	0x3fd45f30
 80013d0:	40020800 	.word	0x40020800
 80013d4:	200001d4 	.word	0x200001d4
 80013d8:	20000180 	.word	0x20000180
 80013dc:	08009dc8 	.word	0x08009dc8
 80013e0:	46000000 	.word	0x46000000
 80013e4:	40668000 	.word	0x40668000

080013e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b094      	sub	sp, #80	; 0x50
 80013ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	2230      	movs	r2, #48	; 0x30
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f008 f9f6 	bl	80097e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <SystemClock_Config+0xd0>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <SystemClock_Config+0xd0>)
 8001416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <SystemClock_Config+0xd0>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <SystemClock_Config+0xd4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001434:	4a21      	ldr	r2, [pc, #132]	; (80014bc <SystemClock_Config+0xd4>)
 8001436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <SystemClock_Config+0xd4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001448:	2301      	movs	r3, #1
 800144a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800145a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 800145c:	2319      	movs	r3, #25
 800145e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001460:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001464:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001466:	2304      	movs	r3, #4
 8001468:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800146a:	2307      	movs	r3, #7
 800146c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	4618      	mov	r0, r3
 8001474:	f002 ffec 	bl	8004450 <HAL_RCC_OscConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x9a>
		Error_Handler();
 800147e:	f000 f927 	bl	80016d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001482:	230f      	movs	r3, #15
 8001484:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001486:	2302      	movs	r3, #2
 8001488:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2102      	movs	r1, #2
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 fa4e 	bl	8004940 <HAL_RCC_ClockConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0xc6>

		Error_Handler();
 80014aa:	f000 f911 	bl	80016d0 <Error_Handler>
	}
}
 80014ae:	bf00      	nop
 80014b0:	3750      	adds	r7, #80	; 0x50
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40007000 	.word	0x40007000

080014c0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_I2C1_Init+0x50>)
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <MX_I2C1_Init+0x54>)
 80014c8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_I2C1_Init+0x50>)
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_I2C1_Init+0x58>)
 80014ce:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_I2C1_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_I2C1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_I2C1_Init+0x50>)
 80014de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <MX_I2C1_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_I2C1_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <MX_I2C1_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_I2C1_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_I2C1_Init+0x50>)
 80014fe:	f000 fd6b 	bl	8001fd8 <HAL_I2C_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001508:	f000 f8e2 	bl	80016d0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000180 	.word	0x20000180
 8001514:	40005400 	.word	0x40005400
 8001518:	00061a80 	.word	0x00061a80

0800151c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001522:	f107 0320 	add.w	r3, r7, #32
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]
 800153a:	615a      	str	r2, [r3, #20]
 800153c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800153e:	4b33      	ldr	r3, [pc, #204]	; (800160c <MX_TIM2_Init+0xf0>)
 8001540:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001544:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 84 - 1;
 8001546:	4b31      	ldr	r3, [pc, #196]	; (800160c <MX_TIM2_Init+0xf0>)
 8001548:	2253      	movs	r2, #83	; 0x53
 800154a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b2f      	ldr	r3, [pc, #188]	; (800160c <MX_TIM2_Init+0xf0>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 20000 - 1;
 8001552:	4b2e      	ldr	r3, [pc, #184]	; (800160c <MX_TIM2_Init+0xf0>)
 8001554:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001558:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155a:	4b2c      	ldr	r3, [pc, #176]	; (800160c <MX_TIM2_Init+0xf0>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <MX_TIM2_Init+0xf0>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001566:	4829      	ldr	r0, [pc, #164]	; (800160c <MX_TIM2_Init+0xf0>)
 8001568:	f003 fbb6 	bl	8004cd8 <HAL_TIM_PWM_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM2_Init+0x5a>
		Error_Handler();
 8001572:	f000 f8ad 	bl	80016d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800157e:	f107 0320 	add.w	r3, r7, #32
 8001582:	4619      	mov	r1, r3
 8001584:	4821      	ldr	r0, [pc, #132]	; (800160c <MX_TIM2_Init+0xf0>)
 8001586:	f003 ff9b 	bl	80054c0 <HAL_TIMEx_MasterConfigSynchronization>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8001590:	f000 f89e 	bl	80016d0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001594:	2360      	movs	r3, #96	; 0x60
 8001596:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	4818      	ldr	r0, [pc, #96]	; (800160c <MX_TIM2_Init+0xf0>)
 80015ac:	f003 fc94 	bl	8004ed8 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80015b6:	f000 f88b 	bl	80016d0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2204      	movs	r2, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4812      	ldr	r0, [pc, #72]	; (800160c <MX_TIM2_Init+0xf0>)
 80015c2:	f003 fc89 	bl	8004ed8 <HAL_TIM_PWM_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80015cc:	f000 f880 	bl	80016d0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2208      	movs	r2, #8
 80015d4:	4619      	mov	r1, r3
 80015d6:	480d      	ldr	r0, [pc, #52]	; (800160c <MX_TIM2_Init+0xf0>)
 80015d8:	f003 fc7e 	bl	8004ed8 <HAL_TIM_PWM_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM2_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 80015e2:	f000 f875 	bl	80016d0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	220c      	movs	r2, #12
 80015ea:	4619      	mov	r1, r3
 80015ec:	4807      	ldr	r0, [pc, #28]	; (800160c <MX_TIM2_Init+0xf0>)
 80015ee:	f003 fc73 	bl	8004ed8 <HAL_TIM_PWM_ConfigChannel>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 80015f8:	f000 f86a 	bl	80016d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <MX_TIM2_Init+0xf0>)
 80015fe:	f000 f8fd 	bl	80017fc <HAL_TIM_MspPostInit>

}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	; 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200001d4 	.word	0x200001d4

08001610 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <MX_GPIO_Init+0xb8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a26      	ldr	r2, [pc, #152]	; (80016c8 <MX_GPIO_Init+0xb8>)
 8001630:	f043 0304 	orr.w	r3, r3, #4
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <MX_GPIO_Init+0xb8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <MX_GPIO_Init+0xb8>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a1f      	ldr	r2, [pc, #124]	; (80016c8 <MX_GPIO_Init+0xb8>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <MX_GPIO_Init+0xb8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <MX_GPIO_Init+0xb8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <MX_GPIO_Init+0xb8>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MX_GPIO_Init+0xb8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_GPIO_Init+0xb8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <MX_GPIO_Init+0xb8>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_GPIO_Init+0xb8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169c:	480b      	ldr	r0, [pc, #44]	; (80016cc <MX_GPIO_Init+0xbc>)
 800169e:	f000 fc81 	bl	8001fa4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	4804      	ldr	r0, [pc, #16]	; (80016cc <MX_GPIO_Init+0xbc>)
 80016bc:	f000 faee 	bl	8001c9c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020800 	.word	0x40020800

080016d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d4:	b672      	cpsid	i
}
 80016d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016d8:	e7fe      	b.n	80016d8 <Error_Handler+0x8>
	...

080016dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_MspInit+0x4c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <HAL_MspInit+0x4c>)
 80016ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f0:	6453      	str	r3, [r2, #68]	; 0x44
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <HAL_MspInit+0x4c>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_MspInit+0x4c>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_MspInit+0x4c>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_MspInit+0x4c>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	; 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a19      	ldr	r2, [pc, #100]	; (80017b0 <HAL_I2C_MspInit+0x84>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d12b      	bne.n	80017a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_I2C_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <HAL_I2C_MspInit+0x88>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_I2C_MspInit+0x88>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800176a:	23c0      	movs	r3, #192	; 0xc0
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176e:	2312      	movs	r3, #18
 8001770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800177a:	2304      	movs	r3, #4
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	480c      	ldr	r0, [pc, #48]	; (80017b8 <HAL_I2C_MspInit+0x8c>)
 8001786:	f000 fa89 	bl	8001c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_I2C_MspInit+0x88>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_I2C_MspInit+0x88>)
 8001794:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_I2C_MspInit+0x88>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	3728      	adds	r7, #40	; 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40005400 	.word	0x40005400
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020400 	.word	0x40020400

080017bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017cc:	d10d      	bne.n	80017ea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017ea:	bf00      	nop
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800181c:	d11d      	bne.n	800185a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_TIM_MspPostInit+0x68>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <HAL_TIM_MspPostInit+0x68>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <HAL_TIM_MspPostInit+0x68>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800183a:	230f      	movs	r3, #15
 800183c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800184a:	2301      	movs	r3, #1
 800184c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	4619      	mov	r1, r3
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <HAL_TIM_MspPostInit+0x6c>)
 8001856:	f000 fa21 	bl	8001c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800185a:	bf00      	nop
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40020000 	.word	0x40020000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b8:	f000 f89a 	bl	80019f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <OTG_FS_IRQHandler+0x10>)
 80018c6:	f001 fc96 	bl	80031f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000f00 	.word	0x20000f00

080018d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <SystemInit+0x20>)
 80018da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <SystemInit+0x20>)
 80018e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001930 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018fe:	490e      	ldr	r1, [pc, #56]	; (8001938 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001900:	4a0e      	ldr	r2, [pc, #56]	; (800193c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001904:	e002      	b.n	800190c <LoopCopyDataInit>

08001906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190a:	3304      	adds	r3, #4

0800190c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800190c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001910:	d3f9      	bcc.n	8001906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001914:	4c0b      	ldr	r4, [pc, #44]	; (8001944 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001918:	e001      	b.n	800191e <LoopFillZerobss>

0800191a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800191c:	3204      	adds	r2, #4

0800191e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001920:	d3fb      	bcc.n	800191a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001922:	f7ff ffd7 	bl	80018d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001926:	f007 ff6d 	bl	8009804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192a:	f7ff fb89 	bl	8001040 <main>
  bx  lr    
 800192e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001930:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001938:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 800193c:	08009e88 	.word	0x08009e88
  ldr r2, =_sbss
 8001940:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001944:	20001764 	.word	0x20001764

08001948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC_IRQHandler>
	...

0800194c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0d      	ldr	r2, [pc, #52]	; (800198c <HAL_Init+0x40>)
 8001956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <HAL_Init+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0a      	ldr	r2, [pc, #40]	; (800198c <HAL_Init+0x40>)
 8001962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_Init+0x40>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_Init+0x40>)
 800196e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001974:	2003      	movs	r0, #3
 8001976:	f000 f94f 	bl	8001c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197a:	200f      	movs	r0, #15
 800197c:	f000 f808 	bl	8001990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001980:	f7ff feac 	bl	80016dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023c00 	.word	0x40023c00

08001990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_InitTick+0x54>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x58>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f967 	bl	8001c82 <HAL_SYSTICK_Config>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00e      	b.n	80019dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b0f      	cmp	r3, #15
 80019c2:	d80a      	bhi.n	80019da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c4:	2200      	movs	r2, #0
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019cc:	f000 f92f 	bl	8001c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d0:	4a06      	ldr	r2, [pc, #24]	; (80019ec <HAL_InitTick+0x5c>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e000      	b.n	80019dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_IncTick+0x20>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x24>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <HAL_IncTick+0x24>)
 8001a02:	6013      	str	r3, [r2, #0]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000008 	.word	0x20000008
 8001a14:	2000021c 	.word	0x2000021c

08001a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_GetTick+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	2000021c 	.word	0x2000021c

08001a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a38:	f7ff ffee 	bl	8001a18 <HAL_GetTick>
 8001a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a48:	d005      	beq.n	8001a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_Delay+0x44>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a56:	bf00      	nop
 8001a58:	f7ff ffde 	bl	8001a18 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d8f7      	bhi.n	8001a58 <HAL_Delay+0x28>
  {
  }
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000008 	.word	0x20000008

08001a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a94:	4013      	ands	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	; (8001abc <__NVIC_SetPriorityGrouping+0x44>)
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	60d3      	str	r3, [r2, #12]
}
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 0307 	and.w	r3, r3, #7
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db0b      	blt.n	8001b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	f003 021f 	and.w	r2, r3, #31
 8001af4:	4907      	ldr	r1, [pc, #28]	; (8001b14 <__NVIC_EnableIRQ+0x38>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	2001      	movs	r0, #1
 8001afe:	fa00 f202 	lsl.w	r2, r0, r2
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000e100 	.word	0xe000e100

08001b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	6039      	str	r1, [r7, #0]
 8001b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	db0a      	blt.n	8001b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	490c      	ldr	r1, [pc, #48]	; (8001b64 <__NVIC_SetPriority+0x4c>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	0112      	lsls	r2, r2, #4
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b40:	e00a      	b.n	8001b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4908      	ldr	r1, [pc, #32]	; (8001b68 <__NVIC_SetPriority+0x50>)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3b04      	subs	r3, #4
 8001b50:	0112      	lsls	r2, r2, #4
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	440b      	add	r3, r1
 8001b56:	761a      	strb	r2, [r3, #24]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f1c3 0307 	rsb	r3, r3, #7
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	bf28      	it	cs
 8001b8a:	2304      	movcs	r3, #4
 8001b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3304      	adds	r3, #4
 8001b92:	2b06      	cmp	r3, #6
 8001b94:	d902      	bls.n	8001b9c <NVIC_EncodePriority+0x30>
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3b03      	subs	r3, #3
 8001b9a:	e000      	b.n	8001b9e <NVIC_EncodePriority+0x32>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	43d9      	mvns	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	4313      	orrs	r3, r2
         );
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3724      	adds	r7, #36	; 0x24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be4:	d301      	bcc.n	8001bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00f      	b.n	8001c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <SysTick_Config+0x40>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bf8:	f7ff ff8e 	bl	8001b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <SysTick_Config+0x40>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <SysTick_Config+0x40>)
 8001c04:	2207      	movs	r2, #7
 8001c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	e000e010 	.word	0xe000e010

08001c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff29 	bl	8001a78 <__NVIC_SetPriorityGrouping>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c40:	f7ff ff3e 	bl	8001ac0 <__NVIC_GetPriorityGrouping>
 8001c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	6978      	ldr	r0, [r7, #20]
 8001c4c:	f7ff ff8e 	bl	8001b6c <NVIC_EncodePriority>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff5d 	bl	8001b18 <__NVIC_SetPriority>
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff31 	bl	8001adc <__NVIC_EnableIRQ>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ffa2 	bl	8001bd4 <SysTick_Config>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	e159      	b.n	8001f6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb8:	2201      	movs	r2, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	f040 8148 	bne.w	8001f66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d005      	beq.n	8001cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d130      	bne.n	8001d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 0201 	and.w	r2, r3, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d017      	beq.n	8001d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d123      	bne.n	8001de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	08da      	lsrs	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3208      	adds	r2, #8
 8001da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	08da      	lsrs	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3208      	adds	r2, #8
 8001dda:	69b9      	ldr	r1, [r7, #24]
 8001ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0203 	and.w	r2, r3, #3
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80a2 	beq.w	8001f66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b57      	ldr	r3, [pc, #348]	; (8001f84 <HAL_GPIO_Init+0x2e8>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a56      	ldr	r2, [pc, #344]	; (8001f84 <HAL_GPIO_Init+0x2e8>)
 8001e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b54      	ldr	r3, [pc, #336]	; (8001f84 <HAL_GPIO_Init+0x2e8>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e3e:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_GPIO_Init+0x2ec>)
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3302      	adds	r3, #2
 8001e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	220f      	movs	r2, #15
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a49      	ldr	r2, [pc, #292]	; (8001f8c <HAL_GPIO_Init+0x2f0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d019      	beq.n	8001e9e <HAL_GPIO_Init+0x202>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a48      	ldr	r2, [pc, #288]	; (8001f90 <HAL_GPIO_Init+0x2f4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0x1fe>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a47      	ldr	r2, [pc, #284]	; (8001f94 <HAL_GPIO_Init+0x2f8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_Init+0x1fa>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a46      	ldr	r2, [pc, #280]	; (8001f98 <HAL_GPIO_Init+0x2fc>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x1f6>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a45      	ldr	r2, [pc, #276]	; (8001f9c <HAL_GPIO_Init+0x300>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_Init+0x1f2>
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	e008      	b.n	8001ea0 <HAL_GPIO_Init+0x204>
 8001e8e:	2307      	movs	r3, #7
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x204>
 8001e92:	2303      	movs	r3, #3
 8001e94:	e004      	b.n	8001ea0 <HAL_GPIO_Init+0x204>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_Init+0x204>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_GPIO_Init+0x204>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	f002 0203 	and.w	r2, r2, #3
 8001ea6:	0092      	lsls	r2, r2, #2
 8001ea8:	4093      	lsls	r3, r2
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb0:	4935      	ldr	r1, [pc, #212]	; (8001f88 <HAL_GPIO_Init+0x2ec>)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebe:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee2:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f0c:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f12:	4b23      	ldr	r3, [pc, #140]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f36:	4a1a      	ldr	r2, [pc, #104]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f3c:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f60:	4a0f      	ldr	r2, [pc, #60]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	f67f aea2 	bls.w	8001cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40013800 	.word	0x40013800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40020800 	.word	0x40020800
 8001f98:	40020c00 	.word	0x40020c00
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40013c00 	.word	0x40013c00

08001fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	807b      	strh	r3, [r7, #2]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb4:	787b      	ldrb	r3, [r7, #1]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fba:	887a      	ldrh	r2, [r7, #2]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc0:	e003      	b.n	8001fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fc2:	887b      	ldrh	r3, [r7, #2]
 8001fc4:	041a      	lsls	r2, r3, #16
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	619a      	str	r2, [r3, #24]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e12b      	b.n	8002242 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff fb94 	bl	800172c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2224      	movs	r2, #36	; 0x24
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800202a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800203a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800203c:	f002 fe38 	bl	8004cb0 <HAL_RCC_GetPCLK1Freq>
 8002040:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4a81      	ldr	r2, [pc, #516]	; (800224c <HAL_I2C_Init+0x274>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d807      	bhi.n	800205c <HAL_I2C_Init+0x84>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4a80      	ldr	r2, [pc, #512]	; (8002250 <HAL_I2C_Init+0x278>)
 8002050:	4293      	cmp	r3, r2
 8002052:	bf94      	ite	ls
 8002054:	2301      	movls	r3, #1
 8002056:	2300      	movhi	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	e006      	b.n	800206a <HAL_I2C_Init+0x92>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a7d      	ldr	r2, [pc, #500]	; (8002254 <HAL_I2C_Init+0x27c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	bf94      	ite	ls
 8002064:	2301      	movls	r3, #1
 8002066:	2300      	movhi	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0e7      	b.n	8002242 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4a78      	ldr	r2, [pc, #480]	; (8002258 <HAL_I2C_Init+0x280>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	0c9b      	lsrs	r3, r3, #18
 800207c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a6a      	ldr	r2, [pc, #424]	; (800224c <HAL_I2C_Init+0x274>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d802      	bhi.n	80020ac <HAL_I2C_Init+0xd4>
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3301      	adds	r3, #1
 80020aa:	e009      	b.n	80020c0 <HAL_I2C_Init+0xe8>
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
 80020b6:	4a69      	ldr	r2, [pc, #420]	; (800225c <HAL_I2C_Init+0x284>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	099b      	lsrs	r3, r3, #6
 80020be:	3301      	adds	r3, #1
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	495c      	ldr	r1, [pc, #368]	; (800224c <HAL_I2C_Init+0x274>)
 80020dc:	428b      	cmp	r3, r1
 80020de:	d819      	bhi.n	8002114 <HAL_I2C_Init+0x13c>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1e59      	subs	r1, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ee:	1c59      	adds	r1, r3, #1
 80020f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020f4:	400b      	ands	r3, r1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_I2C_Init+0x138>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1e59      	subs	r1, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fbb1 f3f3 	udiv	r3, r1, r3
 8002108:	3301      	adds	r3, #1
 800210a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210e:	e051      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 8002110:	2304      	movs	r3, #4
 8002112:	e04f      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d111      	bne.n	8002140 <HAL_I2C_Init+0x168>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1e58      	subs	r0, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	440b      	add	r3, r1
 800212a:	fbb0 f3f3 	udiv	r3, r0, r3
 800212e:	3301      	adds	r3, #1
 8002130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf0c      	ite	eq
 8002138:	2301      	moveq	r3, #1
 800213a:	2300      	movne	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	e012      	b.n	8002166 <HAL_I2C_Init+0x18e>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1e58      	subs	r0, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	0099      	lsls	r1, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	fbb0 f3f3 	udiv	r3, r0, r3
 8002156:	3301      	adds	r3, #1
 8002158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_I2C_Init+0x196>
 800216a:	2301      	movs	r3, #1
 800216c:	e022      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10e      	bne.n	8002194 <HAL_I2C_Init+0x1bc>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1e58      	subs	r0, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6859      	ldr	r1, [r3, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	440b      	add	r3, r1
 8002184:	fbb0 f3f3 	udiv	r3, r0, r3
 8002188:	3301      	adds	r3, #1
 800218a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002192:	e00f      	b.n	80021b4 <HAL_I2C_Init+0x1dc>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1e58      	subs	r0, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6859      	ldr	r1, [r3, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	0099      	lsls	r1, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021aa:	3301      	adds	r3, #1
 80021ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	6809      	ldr	r1, [r1, #0]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69da      	ldr	r2, [r3, #28]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6911      	ldr	r1, [r2, #16]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68d2      	ldr	r2, [r2, #12]
 80021ee:	4311      	orrs	r1, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	430b      	orrs	r3, r1
 80021f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	000186a0 	.word	0x000186a0
 8002250:	001e847f 	.word	0x001e847f
 8002254:	003d08ff 	.word	0x003d08ff
 8002258:	431bde83 	.word	0x431bde83
 800225c:	10624dd3 	.word	0x10624dd3

08002260 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af02      	add	r7, sp, #8
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	4608      	mov	r0, r1
 800226a:	4611      	mov	r1, r2
 800226c:	461a      	mov	r2, r3
 800226e:	4603      	mov	r3, r0
 8002270:	817b      	strh	r3, [r7, #10]
 8002272:	460b      	mov	r3, r1
 8002274:	813b      	strh	r3, [r7, #8]
 8002276:	4613      	mov	r3, r2
 8002278:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800227a:	f7ff fbcd 	bl	8001a18 <HAL_GetTick>
 800227e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b20      	cmp	r3, #32
 800228a:	f040 80d9 	bne.w	8002440 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2319      	movs	r3, #25
 8002294:	2201      	movs	r2, #1
 8002296:	496d      	ldr	r1, [pc, #436]	; (800244c <HAL_I2C_Mem_Write+0x1ec>)
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 fc7f 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022a4:	2302      	movs	r3, #2
 80022a6:	e0cc      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_I2C_Mem_Write+0x56>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e0c5      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d007      	beq.n	80022dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2221      	movs	r2, #33	; 0x21
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2240      	movs	r2, #64	; 0x40
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6a3a      	ldr	r2, [r7, #32]
 8002306:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800230c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4a4d      	ldr	r2, [pc, #308]	; (8002450 <HAL_I2C_Mem_Write+0x1f0>)
 800231c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800231e:	88f8      	ldrh	r0, [r7, #6]
 8002320:	893a      	ldrh	r2, [r7, #8]
 8002322:	8979      	ldrh	r1, [r7, #10]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	4603      	mov	r3, r0
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 fab6 	bl	80028a0 <I2C_RequestMemoryWrite>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d052      	beq.n	80023e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e081      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fd00 	bl	8002d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00d      	beq.n	800236a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	2b04      	cmp	r3, #4
 8002354:	d107      	bne.n	8002366 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002364:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e06b      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002390:	b29b      	uxth	r3, r3
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d11b      	bne.n	80023e0 <HAL_I2C_Mem_Write+0x180>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d017      	beq.n	80023e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1aa      	bne.n	800233e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fcec 	bl	8002dca <I2C_WaitOnBTFFlagUntilTimeout>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00d      	beq.n	8002414 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d107      	bne.n	8002410 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e016      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	e000      	b.n	8002442 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002440:	2302      	movs	r3, #2
  }
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	00100002 	.word	0x00100002
 8002450:	ffff0000 	.word	0xffff0000

08002454 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	; 0x30
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	4608      	mov	r0, r1
 800245e:	4611      	mov	r1, r2
 8002460:	461a      	mov	r2, r3
 8002462:	4603      	mov	r3, r0
 8002464:	817b      	strh	r3, [r7, #10]
 8002466:	460b      	mov	r3, r1
 8002468:	813b      	strh	r3, [r7, #8]
 800246a:	4613      	mov	r3, r2
 800246c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800246e:	f7ff fad3 	bl	8001a18 <HAL_GetTick>
 8002472:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b20      	cmp	r3, #32
 800247e:	f040 8208 	bne.w	8002892 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2319      	movs	r3, #25
 8002488:	2201      	movs	r2, #1
 800248a:	497b      	ldr	r1, [pc, #492]	; (8002678 <HAL_I2C_Mem_Read+0x224>)
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fb85 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002498:	2302      	movs	r3, #2
 800249a:	e1fb      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_I2C_Mem_Read+0x56>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e1f4      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d007      	beq.n	80024d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0201 	orr.w	r2, r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2222      	movs	r2, #34	; 0x22
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2240      	movs	r2, #64	; 0x40
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002500:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a5b      	ldr	r2, [pc, #364]	; (800267c <HAL_I2C_Mem_Read+0x228>)
 8002510:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002512:	88f8      	ldrh	r0, [r7, #6]
 8002514:	893a      	ldrh	r2, [r7, #8]
 8002516:	8979      	ldrh	r1, [r7, #10]
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	4603      	mov	r3, r0
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 fa52 	bl	80029cc <I2C_RequestMemoryRead>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e1b0      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	2b00      	cmp	r3, #0
 8002538:	d113      	bne.n	8002562 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	623b      	str	r3, [r7, #32]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	623b      	str	r3, [r7, #32]
 800254e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e184      	b.n	800286c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002566:	2b01      	cmp	r3, #1
 8002568:	d11b      	bne.n	80025a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002578:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e164      	b.n	800286c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d11b      	bne.n	80025e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	e144      	b.n	800286c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025f8:	e138      	b.n	800286c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	2b03      	cmp	r3, #3
 8002600:	f200 80f1 	bhi.w	80027e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002608:	2b01      	cmp	r3, #1
 800260a:	d123      	bne.n	8002654 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 fc1b 	bl	8002e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e139      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691a      	ldr	r2, [r3, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	3b01      	subs	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002652:	e10b      	b.n	800286c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	2b02      	cmp	r3, #2
 800265a:	d14e      	bne.n	80026fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002662:	2200      	movs	r2, #0
 8002664:	4906      	ldr	r1, [pc, #24]	; (8002680 <HAL_I2C_Mem_Read+0x22c>)
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 fa98 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d008      	beq.n	8002684 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e10e      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
 8002676:	bf00      	nop
 8002678:	00100002 	.word	0x00100002
 800267c:	ffff0000 	.word	0xffff0000
 8002680:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002692:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026f8:	e0b8      	b.n	800286c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002700:	2200      	movs	r2, #0
 8002702:	4966      	ldr	r1, [pc, #408]	; (800289c <HAL_I2C_Mem_Read+0x448>)
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fa49 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0bf      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275c:	2200      	movs	r2, #0
 800275e:	494f      	ldr	r1, [pc, #316]	; (800289c <HAL_I2C_Mem_Read+0x448>)
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fa1b 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e091      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027e4:	e042      	b.n	800286c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fb2e 	bl	8002e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e04c      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b04      	cmp	r3, #4
 8002838:	d118      	bne.n	800286c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	2b00      	cmp	r3, #0
 8002872:	f47f aec2 	bne.w	80025fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	e000      	b.n	8002894 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002892:	2302      	movs	r3, #2
  }
}
 8002894:	4618      	mov	r0, r3
 8002896:	3728      	adds	r7, #40	; 0x28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	00010004 	.word	0x00010004

080028a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	4608      	mov	r0, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	461a      	mov	r2, r3
 80028ae:	4603      	mov	r3, r0
 80028b0:	817b      	strh	r3, [r7, #10]
 80028b2:	460b      	mov	r3, r1
 80028b4:	813b      	strh	r3, [r7, #8]
 80028b6:	4613      	mov	r3, r2
 80028b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f960 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00d      	beq.n	80028fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f0:	d103      	bne.n	80028fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e05f      	b.n	80029be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028fe:	897b      	ldrh	r3, [r7, #10]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800290c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	492d      	ldr	r1, [pc, #180]	; (80029c8 <I2C_RequestMemoryWrite+0x128>)
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f998 	bl	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e04c      	b.n	80029be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800293a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293c:	6a39      	ldr	r1, [r7, #32]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fa02 	bl	8002d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00d      	beq.n	8002966 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2b04      	cmp	r3, #4
 8002950:	d107      	bne.n	8002962 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002960:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e02b      	b.n	80029be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d105      	bne.n	8002978 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800296c:	893b      	ldrh	r3, [r7, #8]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	611a      	str	r2, [r3, #16]
 8002976:	e021      	b.n	80029bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002978:	893b      	ldrh	r3, [r7, #8]
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	b29b      	uxth	r3, r3
 800297e:	b2da      	uxtb	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002988:	6a39      	ldr	r1, [r7, #32]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f9dc 	bl	8002d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00d      	beq.n	80029b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	2b04      	cmp	r3, #4
 800299c:	d107      	bne.n	80029ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e005      	b.n	80029be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029b2:	893b      	ldrh	r3, [r7, #8]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	00010002 	.word	0x00010002

080029cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	4608      	mov	r0, r1
 80029d6:	4611      	mov	r1, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	4603      	mov	r3, r0
 80029dc:	817b      	strh	r3, [r7, #10]
 80029de:	460b      	mov	r3, r1
 80029e0:	813b      	strh	r3, [r7, #8]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 f8c2 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00d      	beq.n	8002a3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2c:	d103      	bne.n	8002a36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e0aa      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a3a:	897b      	ldrh	r3, [r7, #10]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	6a3a      	ldr	r2, [r7, #32]
 8002a4e:	4952      	ldr	r1, [pc, #328]	; (8002b98 <I2C_RequestMemoryRead+0x1cc>)
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f8fa 	bl	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e097      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a78:	6a39      	ldr	r1, [r7, #32]
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f964 	bl	8002d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00d      	beq.n	8002aa2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d107      	bne.n	8002a9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e076      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aa8:	893b      	ldrh	r3, [r7, #8]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	611a      	str	r2, [r3, #16]
 8002ab2:	e021      	b.n	8002af8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ab4:	893b      	ldrh	r3, [r7, #8]
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac4:	6a39      	ldr	r1, [r7, #32]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f93e 	bl	8002d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d107      	bne.n	8002aea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e050      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aee:	893b      	ldrh	r3, [r7, #8]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afa:	6a39      	ldr	r1, [r7, #32]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f923 	bl	8002d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00d      	beq.n	8002b24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d107      	bne.n	8002b20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e035      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 f82b 	bl	8002b9c <I2C_WaitOnFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00d      	beq.n	8002b68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b5a:	d103      	bne.n	8002b64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e013      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b68:	897b      	ldrh	r3, [r7, #10]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	6a3a      	ldr	r2, [r7, #32]
 8002b7c:	4906      	ldr	r1, [pc, #24]	; (8002b98 <I2C_RequestMemoryRead+0x1cc>)
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f863 	bl	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e000      	b.n	8002b90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	00010002 	.word	0x00010002

08002b9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bac:	e025      	b.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bb4:	d021      	beq.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb6:	f7fe ff2f 	bl	8001a18 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d302      	bcc.n	8002bcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d116      	bne.n	8002bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e023      	b.n	8002c42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d10d      	bne.n	8002c20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	e00c      	b.n	8002c3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	43da      	mvns	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bf0c      	ite	eq
 8002c32:	2301      	moveq	r3, #1
 8002c34:	2300      	movne	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d0b6      	beq.n	8002bae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c58:	e051      	b.n	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c68:	d123      	bne.n	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f043 0204 	orr.w	r2, r3, #4
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e046      	b.n	8002d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cb8:	d021      	beq.n	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cba:	f7fe fead 	bl	8001a18 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d302      	bcc.n	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d116      	bne.n	8002cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f043 0220 	orr.w	r2, r3, #32
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e020      	b.n	8002d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d10c      	bne.n	8002d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	43da      	mvns	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bf14      	ite	ne
 8002d1a:	2301      	movne	r3, #1
 8002d1c:	2300      	moveq	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	e00b      	b.n	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	43da      	mvns	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d18d      	bne.n	8002c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d54:	e02d      	b.n	8002db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f8ce 	bl	8002ef8 <I2C_IsAcknowledgeFailed>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e02d      	b.n	8002dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d6c:	d021      	beq.n	8002db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6e:	f7fe fe53 	bl	8001a18 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d302      	bcc.n	8002d84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d116      	bne.n	8002db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e007      	b.n	8002dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b80      	cmp	r3, #128	; 0x80
 8002dbe:	d1ca      	bne.n	8002d56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dd6:	e02d      	b.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f88d 	bl	8002ef8 <I2C_IsAcknowledgeFailed>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e02d      	b.n	8002e44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dee:	d021      	beq.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df0:	f7fe fe12 	bl	8001a18 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d302      	bcc.n	8002e06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d116      	bne.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e007      	b.n	8002e44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d1ca      	bne.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e58:	e042      	b.n	8002ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b10      	cmp	r3, #16
 8002e66:	d119      	bne.n	8002e9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0210 	mvn.w	r2, #16
 8002e70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e029      	b.n	8002ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9c:	f7fe fdbc 	bl	8001a18 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d302      	bcc.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d116      	bne.n	8002ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e007      	b.n	8002ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d1b5      	bne.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0e:	d11b      	bne.n	8002f48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f043 0204 	orr.w	r2, r3, #4
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f58:	b08f      	sub	sp, #60	; 0x3c
 8002f5a:	af0a      	add	r7, sp, #40	; 0x28
 8002f5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e10f      	b.n	8003188 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f006 f926 	bl	80091d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f002 fc0d 	bl	80057c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	687e      	ldr	r6, [r7, #4]
 8002fb4:	466d      	mov	r5, sp
 8002fb6:	f106 0410 	add.w	r4, r6, #16
 8002fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fca:	1d33      	adds	r3, r6, #4
 8002fcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fce:	6838      	ldr	r0, [r7, #0]
 8002fd0:	f002 fae4 	bl	800559c <USB_CoreInit>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e0d0      	b.n	8003188 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f002 fbfb 	bl	80057e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	73fb      	strb	r3, [r7, #15]
 8002ff6:	e04a      	b.n	800308e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ff8:	7bfa      	ldrb	r2, [r7, #15]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	333d      	adds	r3, #61	; 0x3d
 8003008:	2201      	movs	r2, #1
 800300a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	333c      	adds	r3, #60	; 0x3c
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003020:	7bfa      	ldrb	r2, [r7, #15]
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	b298      	uxth	r0, r3
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3344      	adds	r3, #68	; 0x44
 8003034:	4602      	mov	r2, r0
 8003036:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	3340      	adds	r3, #64	; 0x40
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	3348      	adds	r3, #72	; 0x48
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003060:	7bfa      	ldrb	r2, [r7, #15]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	334c      	adds	r3, #76	; 0x4c
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3354      	adds	r3, #84	; 0x54
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	3301      	adds	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	429a      	cmp	r2, r3
 8003096:	d3af      	bcc.n	8002ff8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
 800309c:	e044      	b.n	8003128 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030ca:	7bfa      	ldrb	r2, [r7, #15]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800310c:	7bfa      	ldrb	r2, [r7, #15]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	3301      	adds	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	429a      	cmp	r2, r3
 8003130:	d3b5      	bcc.n	800309e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	687e      	ldr	r6, [r7, #4]
 800313a:	466d      	mov	r5, sp
 800313c:	f106 0410 	add.w	r4, r6, #16
 8003140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003142:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003148:	e894 0003 	ldmia.w	r4, {r0, r1}
 800314c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003150:	1d33      	adds	r3, r6, #4
 8003152:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003154:	6838      	ldr	r0, [r7, #0]
 8003156:	f002 fb93 	bl	8005880 <USB_DevInit>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e00d      	b.n	8003188 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f003 fce2 	bl	8006b4a <USB_DevDisconnect>

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003190 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_PCD_Start+0x1c>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e020      	b.n	80031ee <HAL_PCD_Start+0x5e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d109      	bne.n	80031d0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d005      	beq.n	80031d0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f002 fae5 	bl	80057a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f003 fc92 	bl	8006b08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031f6:	b590      	push	{r4, r7, lr}
 80031f8:	b08d      	sub	sp, #52	; 0x34
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f003 fd50 	bl	8006cb2 <USB_GetMode>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	f040 848a 	bne.w	8003b2e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f003 fcb4 	bl	8006b8c <USB_ReadInterrupts>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 8480 	beq.w	8003b2c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f003 fca1 	bl	8006b8c <USB_ReadInterrupts>
 800324a:	4603      	mov	r3, r0
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b02      	cmp	r3, #2
 8003252:	d107      	bne.n	8003264 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f002 0202 	and.w	r2, r2, #2
 8003262:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f003 fc8f 	bl	8006b8c <USB_ReadInterrupts>
 800326e:	4603      	mov	r3, r0
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b10      	cmp	r3, #16
 8003276:	d161      	bne.n	800333c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f022 0210 	bic.w	r2, r2, #16
 8003286:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f003 020f 	and.w	r2, r3, #15
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	3304      	adds	r3, #4
 80032a6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	0c5b      	lsrs	r3, r3, #17
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d124      	bne.n	80032fe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d035      	beq.n	800332c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	6a38      	ldr	r0, [r7, #32]
 80032d4:	f003 fac6 	bl	8006864 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032e4:	441a      	add	r2, r3
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	6a1a      	ldr	r2, [r3, #32]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032f6:	441a      	add	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	621a      	str	r2, [r3, #32]
 80032fc:	e016      	b.n	800332c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	0c5b      	lsrs	r3, r3, #17
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	2b06      	cmp	r3, #6
 8003308:	d110      	bne.n	800332c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003310:	2208      	movs	r2, #8
 8003312:	4619      	mov	r1, r3
 8003314:	6a38      	ldr	r0, [r7, #32]
 8003316:	f003 faa5 	bl	8006864 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	6a1a      	ldr	r2, [r3, #32]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003326:	441a      	add	r2, r3
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0210 	orr.w	r2, r2, #16
 800333a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f003 fc23 	bl	8006b8c <USB_ReadInterrupts>
 8003346:	4603      	mov	r3, r0
 8003348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800334c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003350:	f040 80a7 	bne.w	80034a2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f003 fc28 	bl	8006bb2 <USB_ReadDevAllOutEpInterrupt>
 8003362:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003364:	e099      	b.n	800349a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 808e 	beq.w	800348e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f003 fc4c 	bl	8006c1a <USB_ReadDevOutEPInterrupt>
 8003382:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00c      	beq.n	80033a8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339a:	461a      	mov	r2, r3
 800339c:	2301      	movs	r3, #1
 800339e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fec2 	bl	800412c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00c      	beq.n	80033cc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033be:	461a      	mov	r2, r3
 80033c0:	2308      	movs	r3, #8
 80033c2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 ff98 	bl	80042fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e2:	461a      	mov	r2, r3
 80033e4:	2310      	movs	r3, #16
 80033e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d030      	beq.n	8003454 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	2b80      	cmp	r3, #128	; 0x80
 80033fc:	d109      	bne.n	8003412 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800340c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003410:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003414:	4613      	mov	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	4413      	add	r3, r2
 8003424:	3304      	adds	r3, #4
 8003426:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	78db      	ldrb	r3, [r3, #3]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d108      	bne.n	8003442 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2200      	movs	r2, #0
 8003434:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	b2db      	uxtb	r3, r3
 800343a:	4619      	mov	r1, r3
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f005 ffc5 	bl	80093cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344e:	461a      	mov	r2, r3
 8003450:	2302      	movs	r3, #2
 8003452:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346a:	461a      	mov	r2, r3
 800346c:	2320      	movs	r3, #32
 800346e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d009      	beq.n	800348e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	4413      	add	r3, r2
 8003482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003486:	461a      	mov	r2, r3
 8003488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800348c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	3301      	adds	r3, #1
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	f47f af62 	bne.w	8003366 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f003 fb70 	bl	8006b8c <USB_ReadInterrupts>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034b6:	f040 80db 	bne.w	8003670 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f003 fb91 	bl	8006be6 <USB_ReadDevAllInEpInterrupt>
 80034c4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80034ca:	e0cd      	b.n	8003668 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80c2 	beq.w	800365c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	4611      	mov	r1, r2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f003 fbb7 	bl	8006c56 <USB_ReadDevInEPInterrupt>
 80034e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d057      	beq.n	80035a4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	2201      	movs	r2, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	43db      	mvns	r3, r3
 800350e:	69f9      	ldr	r1, [r7, #28]
 8003510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003514:	4013      	ands	r3, r2
 8003516:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003524:	461a      	mov	r2, r3
 8003526:	2301      	movs	r3, #1
 8003528:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d132      	bne.n	8003598 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	334c      	adds	r3, #76	; 0x4c
 8003542:	6819      	ldr	r1, [r3, #0]
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4403      	add	r3, r0
 8003552:	3348      	adds	r3, #72	; 0x48
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4419      	add	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4403      	add	r3, r0
 8003566:	334c      	adds	r3, #76	; 0x4c
 8003568:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	2b00      	cmp	r3, #0
 800356e:	d113      	bne.n	8003598 <HAL_PCD_IRQHandler+0x3a2>
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	3354      	adds	r3, #84	; 0x54
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d108      	bne.n	8003598 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003590:	461a      	mov	r2, r3
 8003592:	2101      	movs	r1, #1
 8003594:	f003 fbbe 	bl	8006d14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	b2db      	uxtb	r3, r3
 800359c:	4619      	mov	r1, r3
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f005 fe99 	bl	80092d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d008      	beq.n	80035c0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ba:	461a      	mov	r2, r3
 80035bc:	2308      	movs	r3, #8
 80035be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d6:	461a      	mov	r2, r3
 80035d8:	2310      	movs	r3, #16
 80035da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f2:	461a      	mov	r2, r3
 80035f4:	2340      	movs	r3, #64	; 0x40
 80035f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d023      	beq.n	800364a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003602:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003604:	6a38      	ldr	r0, [r7, #32]
 8003606:	f002 fa9f 	bl	8005b48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800360a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	3338      	adds	r3, #56	; 0x38
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	3304      	adds	r3, #4
 800361c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	78db      	ldrb	r3, [r3, #3]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d108      	bne.n	8003638 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2200      	movs	r2, #0
 800362a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	b2db      	uxtb	r3, r3
 8003630:	4619      	mov	r1, r3
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f005 fedc 	bl	80093f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003644:	461a      	mov	r2, r3
 8003646:	2302      	movs	r3, #2
 8003648:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fcdb 	bl	8004012 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	3301      	adds	r3, #1
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003664:	085b      	lsrs	r3, r3, #1
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366a:	2b00      	cmp	r3, #0
 800366c:	f47f af2e 	bne.w	80034cc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f003 fa89 	bl	8006b8c <USB_ReadInterrupts>
 800367a:	4603      	mov	r3, r0
 800367c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003684:	d122      	bne.n	80036cc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003694:	f023 0301 	bic.w	r3, r3, #1
 8003698:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d108      	bne.n	80036b6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036ac:	2100      	movs	r1, #0
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fec2 	bl	8004438 <HAL_PCDEx_LPM_Callback>
 80036b4:	e002      	b.n	80036bc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f005 fe7a 	bl	80093b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80036ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f003 fa5b 	bl	8006b8c <USB_ReadInterrupts>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e0:	d112      	bne.n	8003708 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d102      	bne.n	80036f8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f005 fe36 	bl	8009364 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003706:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f003 fa3d 	bl	8006b8c <USB_ReadInterrupts>
 8003712:	4603      	mov	r3, r0
 8003714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371c:	f040 80b7 	bne.w	800388e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2110      	movs	r1, #16
 800373a:	4618      	mov	r0, r3
 800373c:	f002 fa04 	bl	8005b48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003740:	2300      	movs	r3, #0
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003744:	e046      	b.n	80037d4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003752:	461a      	mov	r2, r3
 8003754:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003758:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	4413      	add	r3, r2
 8003762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800376a:	0151      	lsls	r1, r2, #5
 800376c:	69fa      	ldr	r2, [r7, #28]
 800376e:	440a      	add	r2, r1
 8003770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003774:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003778:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003786:	461a      	mov	r2, r3
 8003788:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800378c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800379e:	0151      	lsls	r1, r2, #5
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	440a      	add	r2, r1
 80037a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	3301      	adds	r3, #1
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037da:	429a      	cmp	r2, r3
 80037dc:	d3b3      	bcc.n	8003746 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80037f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d016      	beq.n	8003828 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800380a:	f043 030b 	orr.w	r3, r3, #11
 800380e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003820:	f043 030b 	orr.w	r3, r3, #11
 8003824:	6453      	str	r3, [r2, #68]	; 0x44
 8003826:	e015      	b.n	8003854 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003836:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800383a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800383e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800384e:	f043 030b 	orr.w	r3, r3, #11
 8003852:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003862:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003866:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003878:	461a      	mov	r2, r3
 800387a:	f003 fa4b 	bl	8006d14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800388c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f003 f97a 	bl	8006b8c <USB_ReadInterrupts>
 8003898:	4603      	mov	r3, r0
 800389a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800389e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a2:	d124      	bne.n	80038ee <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f003 fa10 	bl	8006cce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f002 f9c5 	bl	8005c42 <USB_GetDevSpeed>
 80038b8:	4603      	mov	r3, r0
 80038ba:	461a      	mov	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681c      	ldr	r4, [r3, #0]
 80038c4:	f001 f9e8 	bl	8004c98 <HAL_RCC_GetHCLKFreq>
 80038c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	4620      	mov	r0, r4
 80038d4:	f001 fec4 	bl	8005660 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f005 fd24 	bl	8009326 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80038ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f003 f94a 	bl	8006b8c <USB_ReadInterrupts>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d10a      	bne.n	8003918 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f005 fd01 	bl	800930a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f002 0208 	and.w	r2, r2, #8
 8003916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f003 f935 	bl	8006b8c <USB_ReadInterrupts>
 8003922:	4603      	mov	r3, r0
 8003924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003928:	2b80      	cmp	r3, #128	; 0x80
 800392a:	d122      	bne.n	8003972 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003938:	2301      	movs	r3, #1
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
 800393c:	e014      	b.n	8003968 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003942:	4613      	mov	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d105      	bne.n	8003962 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	b2db      	uxtb	r3, r3
 800395a:	4619      	mov	r1, r3
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fb27 	bl	8003fb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	3301      	adds	r3, #1
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396e:	429a      	cmp	r2, r3
 8003970:	d3e5      	bcc.n	800393e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f003 f908 	bl	8006b8c <USB_ReadInterrupts>
 800397c:	4603      	mov	r3, r0
 800397e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003986:	d13b      	bne.n	8003a00 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003988:	2301      	movs	r3, #1
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
 800398c:	e02b      	b.n	80039e6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	4413      	add	r3, r2
 8003996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a2:	4613      	mov	r3, r2
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	3340      	adds	r3, #64	; 0x40
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d115      	bne.n	80039e0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	da12      	bge.n	80039e0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039be:	4613      	mov	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	333f      	adds	r3, #63	; 0x3f
 80039ca:	2201      	movs	r2, #1
 80039cc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	4619      	mov	r1, r3
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fae8 	bl	8003fb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	3301      	adds	r3, #1
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d3ce      	bcc.n	800398e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695a      	ldr	r2, [r3, #20]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80039fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f003 f8c1 	bl	8006b8c <USB_ReadInterrupts>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a14:	d155      	bne.n	8003ac2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a16:	2301      	movs	r3, #1
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1a:	e045      	b.n	8003aa8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d12e      	bne.n	8003aa2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	da2b      	bge.n	8003aa2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003a56:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d121      	bne.n	8003aa2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a70:	2201      	movs	r2, #1
 8003a72:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a9e:	6053      	str	r3, [r2, #4]
            break;
 8003aa0:	e007      	b.n	8003ab2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d3b4      	bcc.n	8003a1c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f003 f860 	bl	8006b8c <USB_ReadInterrupts>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad6:	d10a      	bne.n	8003aee <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f005 fc9b 	bl	8009414 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695a      	ldr	r2, [r3, #20]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f003 f84a 	bl	8006b8c <USB_ReadInterrupts>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f003 0304 	and.w	r3, r3, #4
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d115      	bne.n	8003b2e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f005 fc8b 	bl	8009430 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6859      	ldr	r1, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	e000      	b.n	8003b2e <HAL_PCD_IRQHandler+0x938>
      return;
 8003b2c:	bf00      	nop
    }
  }
}
 8003b2e:	3734      	adds	r7, #52	; 0x34
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd90      	pop	{r4, r7, pc}

08003b34 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <HAL_PCD_SetAddress+0x1a>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e013      	b.n	8003b76 <HAL_PCD_SetAddress+0x42>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f002 ffa8 	bl	8006abc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	4608      	mov	r0, r1
 8003b88:	4611      	mov	r1, r2
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	70fb      	strb	r3, [r7, #3]
 8003b90:	460b      	mov	r3, r1
 8003b92:	803b      	strh	r3, [r7, #0]
 8003b94:	4613      	mov	r3, r2
 8003b96:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	da0f      	bge.n	8003bc4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	f003 020f 	and.w	r2, r3, #15
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	3338      	adds	r3, #56	; 0x38
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3304      	adds	r3, #4
 8003bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	705a      	strb	r2, [r3, #1]
 8003bc2:	e00f      	b.n	8003be4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	f003 020f 	and.w	r2, r3, #15
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	3304      	adds	r3, #4
 8003bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003bf0:	883a      	ldrh	r2, [r7, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	78ba      	ldrb	r2, [r7, #2]
 8003bfa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d004      	beq.n	8003c0e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c0e:	78bb      	ldrb	r3, [r7, #2]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d102      	bne.n	8003c1a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_PCD_EP_Open+0xaa>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e00e      	b.n	8003c46 <HAL_PCD_EP_Open+0xc8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68f9      	ldr	r1, [r7, #12]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f002 f828 	bl	8005c8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003c44:	7afb      	ldrb	r3, [r7, #11]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da0f      	bge.n	8003c82 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	f003 020f 	and.w	r2, r3, #15
 8003c68:	4613      	mov	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	3338      	adds	r3, #56	; 0x38
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	3304      	adds	r3, #4
 8003c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	705a      	strb	r2, [r3, #1]
 8003c80:	e00f      	b.n	8003ca2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	4613      	mov	r3, r2
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4413      	add	r3, r2
 8003c98:	3304      	adds	r3, #4
 8003c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_PCD_EP_Close+0x6e>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e00e      	b.n	8003cda <HAL_PCD_EP_Close+0x8c>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68f9      	ldr	r1, [r7, #12]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f002 f866 	bl	8005d9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b086      	sub	sp, #24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cf2:	7afb      	ldrb	r3, [r7, #11]
 8003cf4:	f003 020f 	and.w	r2, r3, #15
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	3304      	adds	r3, #4
 8003d0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2200      	movs	r2, #0
 8003d22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d24:	7afb      	ldrb	r3, [r7, #11]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d102      	bne.n	8003d3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d3e:	7afb      	ldrb	r3, [r7, #11]
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d109      	bne.n	8003d5c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	6979      	ldr	r1, [r7, #20]
 8003d56:	f002 fb45 	bl	80063e4 <USB_EP0StartXfer>
 8003d5a:	e008      	b.n	8003d6e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	6979      	ldr	r1, [r7, #20]
 8003d6a:	f002 f8f3 	bl	8005f54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	f003 020f 	and.w	r2, r3, #15
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	460b      	mov	r3, r1
 8003db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db8:	7afb      	ldrb	r3, [r7, #11]
 8003dba:	f003 020f 	and.w	r2, r3, #15
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	3338      	adds	r3, #56	; 0x38
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	3304      	adds	r3, #4
 8003dce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2200      	movs	r2, #0
 8003de0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2201      	movs	r2, #1
 8003de6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003de8:	7afb      	ldrb	r3, [r7, #11]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d102      	bne.n	8003e02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e02:	7afb      	ldrb	r3, [r7, #11]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d109      	bne.n	8003e20 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	6979      	ldr	r1, [r7, #20]
 8003e1a:	f002 fae3 	bl	80063e4 <USB_EP0StartXfer>
 8003e1e:	e008      	b.n	8003e32 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	6979      	ldr	r1, [r7, #20]
 8003e2e:	f002 f891 	bl	8005f54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e48:	78fb      	ldrb	r3, [r7, #3]
 8003e4a:	f003 020f 	and.w	r2, r3, #15
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d901      	bls.n	8003e5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e050      	b.n	8003efc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	da0f      	bge.n	8003e82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e62:	78fb      	ldrb	r3, [r7, #3]
 8003e64:	f003 020f 	and.w	r2, r3, #15
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	3338      	adds	r3, #56	; 0x38
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	3304      	adds	r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	705a      	strb	r2, [r3, #1]
 8003e80:	e00d      	b.n	8003e9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e82:	78fa      	ldrb	r2, [r7, #3]
 8003e84:	4613      	mov	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	4413      	add	r3, r2
 8003e94:	3304      	adds	r3, #4
 8003e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_PCD_EP_SetStall+0x82>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e01e      	b.n	8003efc <HAL_PCD_EP_SetStall+0xc0>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68f9      	ldr	r1, [r7, #12]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f002 fd21 	bl	8006914 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10a      	bne.n	8003ef2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	b2d9      	uxtb	r1, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003eec:	461a      	mov	r2, r3
 8003eee:	f002 ff11 	bl	8006d14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	f003 020f 	and.w	r2, r3, #15
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d901      	bls.n	8003f22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e042      	b.n	8003fa8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	da0f      	bge.n	8003f4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	f003 020f 	and.w	r2, r3, #15
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	3338      	adds	r3, #56	; 0x38
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3304      	adds	r3, #4
 8003f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	705a      	strb	r2, [r3, #1]
 8003f48:	e00f      	b.n	8003f6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f4a:	78fb      	ldrb	r3, [r7, #3]
 8003f4c:	f003 020f 	and.w	r2, r3, #15
 8003f50:	4613      	mov	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	4413      	add	r3, r2
 8003f60:	3304      	adds	r3, #4
 8003f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_PCD_EP_ClrStall+0x86>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e00e      	b.n	8003fa8 <HAL_PCD_EP_ClrStall+0xa4>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68f9      	ldr	r1, [r7, #12]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f002 fd29 	bl	80069f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003fbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	da0c      	bge.n	8003fde <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	f003 020f 	and.w	r2, r3, #15
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	3338      	adds	r3, #56	; 0x38
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3304      	adds	r3, #4
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	e00c      	b.n	8003ff8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	f003 020f 	and.w	r2, r3, #15
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4413      	add	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68f9      	ldr	r1, [r7, #12]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f002 fb48 	bl	8006694 <USB_EPStopXfer>
 8004004:	4603      	mov	r3, r0
 8004006:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004008:	7afb      	ldrb	r3, [r7, #11]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b08a      	sub	sp, #40	; 0x28
 8004016:	af02      	add	r7, sp, #8
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	3338      	adds	r3, #56	; 0x38
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	3304      	adds	r3, #4
 8004038:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a1a      	ldr	r2, [r3, #32]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	429a      	cmp	r2, r3
 8004044:	d901      	bls.n	800404a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e06c      	b.n	8004124 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	429a      	cmp	r2, r3
 800405e:	d902      	bls.n	8004066 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	3303      	adds	r3, #3
 800406a:	089b      	lsrs	r3, r3, #2
 800406c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800406e:	e02b      	b.n	80040c8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	429a      	cmp	r2, r3
 8004084:	d902      	bls.n	800408c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	3303      	adds	r3, #3
 8004090:	089b      	lsrs	r3, r3, #2
 8004092:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6919      	ldr	r1, [r3, #16]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	b2da      	uxtb	r2, r3
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	4603      	mov	r3, r0
 80040aa:	6978      	ldr	r0, [r7, #20]
 80040ac:	f002 fb9c 	bl	80067e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	441a      	add	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a1a      	ldr	r2, [r3, #32]
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	441a      	add	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d809      	bhi.n	80040f2 <PCD_WriteEmptyTxFifo+0xe0>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a1a      	ldr	r2, [r3, #32]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d203      	bcs.n	80040f2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1be      	bne.n	8004070 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d811      	bhi.n	8004122 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	2201      	movs	r2, #1
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	43db      	mvns	r3, r3
 8004118:	6939      	ldr	r1, [r7, #16]
 800411a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800411e:	4013      	ands	r3, r2
 8004120:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3720      	adds	r7, #32
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	333c      	adds	r3, #60	; 0x3c
 8004144:	3304      	adds	r3, #4
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d17b      	bne.n	800425a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d015      	beq.n	8004198 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	4a61      	ldr	r2, [pc, #388]	; (80042f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	f240 80b9 	bls.w	80042e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80b3 	beq.w	80042e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	461a      	mov	r2, r3
 8004190:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004194:	6093      	str	r3, [r2, #8]
 8004196:	e0a7      	b.n	80042e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d009      	beq.n	80041b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ae:	461a      	mov	r2, r3
 80041b0:	2320      	movs	r3, #32
 80041b2:	6093      	str	r3, [r2, #8]
 80041b4:	e098      	b.n	80042e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f040 8093 	bne.w	80042e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	4a4b      	ldr	r2, [pc, #300]	; (80042f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d90f      	bls.n	80041ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e0:	461a      	mov	r2, r3
 80041e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e6:	6093      	str	r3, [r2, #8]
 80041e8:	e07e      	b.n	80042e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4413      	add	r3, r2
 80041fc:	3304      	adds	r3, #4
 80041fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	0159      	lsls	r1, r3, #5
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	440b      	add	r3, r1
 800420c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004216:	1ad2      	subs	r2, r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d114      	bne.n	800424c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004234:	461a      	mov	r2, r3
 8004236:	2101      	movs	r1, #1
 8004238:	f002 fd6c 	bl	8006d14 <USB_EP0_OutStart>
 800423c:	e006      	b.n	800424c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	441a      	add	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	4619      	mov	r1, r3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f005 f824 	bl	80092a0 <HAL_PCD_DataOutStageCallback>
 8004258:	e046      	b.n	80042e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	4a26      	ldr	r2, [pc, #152]	; (80042f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d124      	bne.n	80042ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004278:	461a      	mov	r2, r3
 800427a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800427e:	6093      	str	r3, [r2, #8]
 8004280:	e032      	b.n	80042e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004298:	461a      	mov	r2, r3
 800429a:	2320      	movs	r3, #32
 800429c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	4619      	mov	r1, r3
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f004 fffb 	bl	80092a0 <HAL_PCD_DataOutStageCallback>
 80042aa:	e01d      	b.n	80042e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d114      	bne.n	80042dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	4613      	mov	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d108      	bne.n	80042dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042d4:	461a      	mov	r2, r3
 80042d6:	2100      	movs	r1, #0
 80042d8:	f002 fd1c 	bl	8006d14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	4619      	mov	r1, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f004 ffdc 	bl	80092a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3720      	adds	r7, #32
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	4f54300a 	.word	0x4f54300a
 80042f8:	4f54310a 	.word	0x4f54310a

080042fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	333c      	adds	r3, #60	; 0x3c
 8004314:	3304      	adds	r3, #4
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4a15      	ldr	r2, [pc, #84]	; (8004384 <PCD_EP_OutSetupPacket_int+0x88>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d90e      	bls.n	8004350 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004338:	2b00      	cmp	r3, #0
 800433a:	d009      	beq.n	8004350 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004348:	461a      	mov	r2, r3
 800434a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f004 ff93 	bl	800927c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a0a      	ldr	r2, [pc, #40]	; (8004384 <PCD_EP_OutSetupPacket_int+0x88>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d90c      	bls.n	8004378 <PCD_EP_OutSetupPacket_int+0x7c>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d108      	bne.n	8004378 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004370:	461a      	mov	r2, r3
 8004372:	2101      	movs	r1, #1
 8004374:	f002 fcce 	bl	8006d14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	4f54300a 	.word	0x4f54300a

08004388 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
 8004394:	4613      	mov	r3, r2
 8004396:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d107      	bne.n	80043b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043a6:	883b      	ldrh	r3, [r7, #0]
 80043a8:	0419      	lsls	r1, r3, #16
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28
 80043b4:	e028      	b.n	8004408 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	4413      	add	r3, r2
 80043c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043c4:	2300      	movs	r3, #0
 80043c6:	73fb      	strb	r3, [r7, #15]
 80043c8:	e00d      	b.n	80043e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	3340      	adds	r3, #64	; 0x40
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	4413      	add	r3, r2
 80043de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	3301      	adds	r3, #1
 80043e4:	73fb      	strb	r3, [r7, #15]
 80043e6:	7bfa      	ldrb	r2, [r7, #15]
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d3ec      	bcc.n	80043ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043f0:	883b      	ldrh	r3, [r7, #0]
 80043f2:	0418      	lsls	r0, r3, #16
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6819      	ldr	r1, [r3, #0]
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	4302      	orrs	r2, r0
 8004400:	3340      	adds	r3, #64	; 0x40
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	460b      	mov	r3, r1
 8004420:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	887a      	ldrh	r2, [r7, #2]
 8004428:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e267      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d075      	beq.n	800455a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800446e:	4b88      	ldr	r3, [pc, #544]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b04      	cmp	r3, #4
 8004478:	d00c      	beq.n	8004494 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800447a:	4b85      	ldr	r3, [pc, #532]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004482:	2b08      	cmp	r3, #8
 8004484:	d112      	bne.n	80044ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004486:	4b82      	ldr	r3, [pc, #520]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004492:	d10b      	bne.n	80044ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004494:	4b7e      	ldr	r3, [pc, #504]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d05b      	beq.n	8004558 <HAL_RCC_OscConfig+0x108>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d157      	bne.n	8004558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e242      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b4:	d106      	bne.n	80044c4 <HAL_RCC_OscConfig+0x74>
 80044b6:	4b76      	ldr	r3, [pc, #472]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a75      	ldr	r2, [pc, #468]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e01d      	b.n	8004500 <HAL_RCC_OscConfig+0xb0>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044cc:	d10c      	bne.n	80044e8 <HAL_RCC_OscConfig+0x98>
 80044ce:	4b70      	ldr	r3, [pc, #448]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a6f      	ldr	r2, [pc, #444]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 80044d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	4b6d      	ldr	r3, [pc, #436]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a6c      	ldr	r2, [pc, #432]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 80044e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e00b      	b.n	8004500 <HAL_RCC_OscConfig+0xb0>
 80044e8:	4b69      	ldr	r3, [pc, #420]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a68      	ldr	r2, [pc, #416]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 80044ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	4b66      	ldr	r3, [pc, #408]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a65      	ldr	r2, [pc, #404]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 80044fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d013      	beq.n	8004530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004508:	f7fd fa86 	bl	8001a18 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004510:	f7fd fa82 	bl	8001a18 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b64      	cmp	r3, #100	; 0x64
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e207      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004522:	4b5b      	ldr	r3, [pc, #364]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0xc0>
 800452e:	e014      	b.n	800455a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004530:	f7fd fa72 	bl	8001a18 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004538:	f7fd fa6e 	bl	8001a18 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	; 0x64
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e1f3      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454a:	4b51      	ldr	r3, [pc, #324]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0xe8>
 8004556:	e000      	b.n	800455a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d063      	beq.n	800462e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004566:	4b4a      	ldr	r3, [pc, #296]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 030c 	and.w	r3, r3, #12
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004572:	4b47      	ldr	r3, [pc, #284]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800457a:	2b08      	cmp	r3, #8
 800457c:	d11c      	bne.n	80045b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800457e:	4b44      	ldr	r3, [pc, #272]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d116      	bne.n	80045b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800458a:	4b41      	ldr	r3, [pc, #260]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d005      	beq.n	80045a2 <HAL_RCC_OscConfig+0x152>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d001      	beq.n	80045a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e1c7      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a2:	4b3b      	ldr	r3, [pc, #236]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4937      	ldr	r1, [pc, #220]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b6:	e03a      	b.n	800462e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d020      	beq.n	8004602 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c0:	4b34      	ldr	r3, [pc, #208]	; (8004694 <HAL_RCC_OscConfig+0x244>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c6:	f7fd fa27 	bl	8001a18 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045cc:	e008      	b.n	80045e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ce:	f7fd fa23 	bl	8001a18 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e1a8      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e0:	4b2b      	ldr	r3, [pc, #172]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f0      	beq.n	80045ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ec:	4b28      	ldr	r3, [pc, #160]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4925      	ldr	r1, [pc, #148]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]
 8004600:	e015      	b.n	800462e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004602:	4b24      	ldr	r3, [pc, #144]	; (8004694 <HAL_RCC_OscConfig+0x244>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fd fa06 	bl	8001a18 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004610:	f7fd fa02 	bl	8001a18 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e187      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004622:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d036      	beq.n	80046a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d016      	beq.n	8004670 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004642:	4b15      	ldr	r3, [pc, #84]	; (8004698 <HAL_RCC_OscConfig+0x248>)
 8004644:	2201      	movs	r2, #1
 8004646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004648:	f7fd f9e6 	bl	8001a18 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004650:	f7fd f9e2 	bl	8001a18 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e167      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_RCC_OscConfig+0x240>)
 8004664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x200>
 800466e:	e01b      	b.n	80046a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <HAL_RCC_OscConfig+0x248>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004676:	f7fd f9cf 	bl	8001a18 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800467c:	e00e      	b.n	800469c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800467e:	f7fd f9cb 	bl	8001a18 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d907      	bls.n	800469c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e150      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
 8004690:	40023800 	.word	0x40023800
 8004694:	42470000 	.word	0x42470000
 8004698:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800469c:	4b88      	ldr	r3, [pc, #544]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 800469e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1ea      	bne.n	800467e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8097 	beq.w	80047e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046b6:	2300      	movs	r3, #0
 80046b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ba:	4b81      	ldr	r3, [pc, #516]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10f      	bne.n	80046e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	4b7d      	ldr	r3, [pc, #500]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	4a7c      	ldr	r2, [pc, #496]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 80046d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d4:	6413      	str	r3, [r2, #64]	; 0x40
 80046d6:	4b7a      	ldr	r3, [pc, #488]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e2:	2301      	movs	r3, #1
 80046e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e6:	4b77      	ldr	r3, [pc, #476]	; (80048c4 <HAL_RCC_OscConfig+0x474>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d118      	bne.n	8004724 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046f2:	4b74      	ldr	r3, [pc, #464]	; (80048c4 <HAL_RCC_OscConfig+0x474>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a73      	ldr	r2, [pc, #460]	; (80048c4 <HAL_RCC_OscConfig+0x474>)
 80046f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046fe:	f7fd f98b 	bl	8001a18 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004706:	f7fd f987 	bl	8001a18 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e10c      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004718:	4b6a      	ldr	r3, [pc, #424]	; (80048c4 <HAL_RCC_OscConfig+0x474>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d106      	bne.n	800473a <HAL_RCC_OscConfig+0x2ea>
 800472c:	4b64      	ldr	r3, [pc, #400]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	4a63      	ldr	r2, [pc, #396]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6713      	str	r3, [r2, #112]	; 0x70
 8004738:	e01c      	b.n	8004774 <HAL_RCC_OscConfig+0x324>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b05      	cmp	r3, #5
 8004740:	d10c      	bne.n	800475c <HAL_RCC_OscConfig+0x30c>
 8004742:	4b5f      	ldr	r3, [pc, #380]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	4a5e      	ldr	r2, [pc, #376]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 8004748:	f043 0304 	orr.w	r3, r3, #4
 800474c:	6713      	str	r3, [r2, #112]	; 0x70
 800474e:	4b5c      	ldr	r3, [pc, #368]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	4a5b      	ldr	r2, [pc, #364]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	6713      	str	r3, [r2, #112]	; 0x70
 800475a:	e00b      	b.n	8004774 <HAL_RCC_OscConfig+0x324>
 800475c:	4b58      	ldr	r3, [pc, #352]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 800475e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004760:	4a57      	ldr	r2, [pc, #348]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	6713      	str	r3, [r2, #112]	; 0x70
 8004768:	4b55      	ldr	r3, [pc, #340]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476c:	4a54      	ldr	r2, [pc, #336]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 800476e:	f023 0304 	bic.w	r3, r3, #4
 8004772:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d015      	beq.n	80047a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fd f94c 	bl	8001a18 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004782:	e00a      	b.n	800479a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004784:	f7fd f948 	bl	8001a18 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e0cb      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479a:	4b49      	ldr	r3, [pc, #292]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0ee      	beq.n	8004784 <HAL_RCC_OscConfig+0x334>
 80047a6:	e014      	b.n	80047d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a8:	f7fd f936 	bl	8001a18 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b0:	f7fd f932 	bl	8001a18 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e0b5      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c6:	4b3e      	ldr	r3, [pc, #248]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1ee      	bne.n	80047b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047d2:	7dfb      	ldrb	r3, [r7, #23]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d105      	bne.n	80047e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d8:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	4a38      	ldr	r2, [pc, #224]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 80047de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80a1 	beq.w	8004930 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ee:	4b34      	ldr	r3, [pc, #208]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d05c      	beq.n	80048b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d141      	bne.n	8004886 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004802:	4b31      	ldr	r3, [pc, #196]	; (80048c8 <HAL_RCC_OscConfig+0x478>)
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fd f906 	bl	8001a18 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004810:	f7fd f902 	bl	8001a18 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e087      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004822:	4b27      	ldr	r3, [pc, #156]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	019b      	lsls	r3, r3, #6
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	085b      	lsrs	r3, r3, #1
 8004846:	3b01      	subs	r3, #1
 8004848:	041b      	lsls	r3, r3, #16
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	061b      	lsls	r3, r3, #24
 8004852:	491b      	ldr	r1, [pc, #108]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 8004854:	4313      	orrs	r3, r2
 8004856:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004858:	4b1b      	ldr	r3, [pc, #108]	; (80048c8 <HAL_RCC_OscConfig+0x478>)
 800485a:	2201      	movs	r2, #1
 800485c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485e:	f7fd f8db 	bl	8001a18 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004866:	f7fd f8d7 	bl	8001a18 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e05c      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004878:	4b11      	ldr	r3, [pc, #68]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x416>
 8004884:	e054      	b.n	8004930 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <HAL_RCC_OscConfig+0x478>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488c:	f7fd f8c4 	bl	8001a18 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004894:	f7fd f8c0 	bl	8001a18 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e045      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <HAL_RCC_OscConfig+0x470>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x444>
 80048b2:	e03d      	b.n	8004930 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d107      	bne.n	80048cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e038      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
 80048c0:	40023800 	.word	0x40023800
 80048c4:	40007000 	.word	0x40007000
 80048c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <HAL_RCC_OscConfig+0x4ec>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d028      	beq.n	800492c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d121      	bne.n	800492c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d11a      	bne.n	800492c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048fc:	4013      	ands	r3, r2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004902:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004904:	4293      	cmp	r3, r2
 8004906:	d111      	bne.n	800492c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	085b      	lsrs	r3, r3, #1
 8004914:	3b01      	subs	r3, #1
 8004916:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d107      	bne.n	800492c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004928:	429a      	cmp	r2, r3
 800492a:	d001      	beq.n	8004930 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40023800 	.word	0x40023800

08004940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e0cc      	b.n	8004aee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004954:	4b68      	ldr	r3, [pc, #416]	; (8004af8 <HAL_RCC_ClockConfig+0x1b8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d90c      	bls.n	800497c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004962:	4b65      	ldr	r3, [pc, #404]	; (8004af8 <HAL_RCC_ClockConfig+0x1b8>)
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800496a:	4b63      	ldr	r3, [pc, #396]	; (8004af8 <HAL_RCC_ClockConfig+0x1b8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d001      	beq.n	800497c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e0b8      	b.n	8004aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d020      	beq.n	80049ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004994:	4b59      	ldr	r3, [pc, #356]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	4a58      	ldr	r2, [pc, #352]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800499e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049ac:	4b53      	ldr	r3, [pc, #332]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4a52      	ldr	r2, [pc, #328]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b8:	4b50      	ldr	r3, [pc, #320]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	494d      	ldr	r1, [pc, #308]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d044      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d107      	bne.n	80049ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	4b47      	ldr	r3, [pc, #284]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d119      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e07f      	b.n	8004aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d003      	beq.n	80049fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d107      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fe:	4b3f      	ldr	r3, [pc, #252]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d109      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e06f      	b.n	8004aee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0e:	4b3b      	ldr	r3, [pc, #236]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e067      	b.n	8004aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a1e:	4b37      	ldr	r3, [pc, #220]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f023 0203 	bic.w	r2, r3, #3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	4934      	ldr	r1, [pc, #208]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a30:	f7fc fff2 	bl	8001a18 <HAL_GetTick>
 8004a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a38:	f7fc ffee 	bl	8001a18 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e04f      	b.n	8004aee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4e:	4b2b      	ldr	r3, [pc, #172]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 020c 	and.w	r2, r3, #12
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d1eb      	bne.n	8004a38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a60:	4b25      	ldr	r3, [pc, #148]	; (8004af8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d20c      	bcs.n	8004a88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6e:	4b22      	ldr	r3, [pc, #136]	; (8004af8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a76:	4b20      	ldr	r3, [pc, #128]	; (8004af8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d001      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e032      	b.n	8004aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a94:	4b19      	ldr	r3, [pc, #100]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4916      	ldr	r1, [pc, #88]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ab2:	4b12      	ldr	r3, [pc, #72]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	490e      	ldr	r1, [pc, #56]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ac6:	f000 f821 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8004aca:	4602      	mov	r2, r0
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	091b      	lsrs	r3, r3, #4
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	490a      	ldr	r1, [pc, #40]	; (8004b00 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad8:	5ccb      	ldrb	r3, [r1, r3]
 8004ada:	fa22 f303 	lsr.w	r3, r2, r3
 8004ade:	4a09      	ldr	r2, [pc, #36]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ae2:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fc ff52 	bl	8001990 <HAL_InitTick>

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40023c00 	.word	0x40023c00
 8004afc:	40023800 	.word	0x40023800
 8004b00:	08009e1c 	.word	0x08009e1c
 8004b04:	20000000 	.word	0x20000000
 8004b08:	20000004 	.word	0x20000004

08004b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b10:	b090      	sub	sp, #64	; 0x40
 8004b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
 8004b18:	2300      	movs	r3, #0
 8004b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b24:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 030c 	and.w	r3, r3, #12
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d00d      	beq.n	8004b4c <HAL_RCC_GetSysClockFreq+0x40>
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	f200 80a1 	bhi.w	8004c78 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_RCC_GetSysClockFreq+0x34>
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d003      	beq.n	8004b46 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b3e:	e09b      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b40:	4b53      	ldr	r3, [pc, #332]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b42:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004b44:	e09b      	b.n	8004c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b46:	4b53      	ldr	r3, [pc, #332]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b4a:	e098      	b.n	8004c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b4c:	4b4f      	ldr	r3, [pc, #316]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b54:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b56:	4b4d      	ldr	r3, [pc, #308]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d028      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b62:	4b4a      	ldr	r3, [pc, #296]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	099b      	lsrs	r3, r3, #6
 8004b68:	2200      	movs	r2, #0
 8004b6a:	623b      	str	r3, [r7, #32]
 8004b6c:	627a      	str	r2, [r7, #36]	; 0x24
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b74:	2100      	movs	r1, #0
 8004b76:	4b47      	ldr	r3, [pc, #284]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b78:	fb03 f201 	mul.w	r2, r3, r1
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	fb00 f303 	mul.w	r3, r0, r3
 8004b82:	4413      	add	r3, r2
 8004b84:	4a43      	ldr	r2, [pc, #268]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b86:	fba0 1202 	umull	r1, r2, r0, r2
 8004b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b8c:	460a      	mov	r2, r1
 8004b8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b92:	4413      	add	r3, r2
 8004b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b98:	2200      	movs	r2, #0
 8004b9a:	61bb      	str	r3, [r7, #24]
 8004b9c:	61fa      	str	r2, [r7, #28]
 8004b9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ba2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ba6:	f7fb ffd3 	bl	8000b50 <__aeabi_uldivmod>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4613      	mov	r3, r2
 8004bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bb2:	e053      	b.n	8004c5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb4:	4b35      	ldr	r3, [pc, #212]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	099b      	lsrs	r3, r3, #6
 8004bba:	2200      	movs	r2, #0
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	617a      	str	r2, [r7, #20]
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004bc6:	f04f 0b00 	mov.w	fp, #0
 8004bca:	4652      	mov	r2, sl
 8004bcc:	465b      	mov	r3, fp
 8004bce:	f04f 0000 	mov.w	r0, #0
 8004bd2:	f04f 0100 	mov.w	r1, #0
 8004bd6:	0159      	lsls	r1, r3, #5
 8004bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bdc:	0150      	lsls	r0, r2, #5
 8004bde:	4602      	mov	r2, r0
 8004be0:	460b      	mov	r3, r1
 8004be2:	ebb2 080a 	subs.w	r8, r2, sl
 8004be6:	eb63 090b 	sbc.w	r9, r3, fp
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004bf6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004bfa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004bfe:	ebb2 0408 	subs.w	r4, r2, r8
 8004c02:	eb63 0509 	sbc.w	r5, r3, r9
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	00eb      	lsls	r3, r5, #3
 8004c10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c14:	00e2      	lsls	r2, r4, #3
 8004c16:	4614      	mov	r4, r2
 8004c18:	461d      	mov	r5, r3
 8004c1a:	eb14 030a 	adds.w	r3, r4, sl
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	eb45 030b 	adc.w	r3, r5, fp
 8004c24:	607b      	str	r3, [r7, #4]
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c32:	4629      	mov	r1, r5
 8004c34:	028b      	lsls	r3, r1, #10
 8004c36:	4621      	mov	r1, r4
 8004c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	028a      	lsls	r2, r1, #10
 8004c40:	4610      	mov	r0, r2
 8004c42:	4619      	mov	r1, r3
 8004c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c46:	2200      	movs	r2, #0
 8004c48:	60bb      	str	r3, [r7, #8]
 8004c4a:	60fa      	str	r2, [r7, #12]
 8004c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c50:	f7fb ff7e 	bl	8000b50 <__aeabi_uldivmod>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4613      	mov	r3, r2
 8004c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	0c1b      	lsrs	r3, r3, #16
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	3301      	adds	r3, #1
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c76:	e002      	b.n	8004c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c78:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c7a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3740      	adds	r7, #64	; 0x40
 8004c84:	46bd      	mov	sp, r7
 8004c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	00f42400 	.word	0x00f42400
 8004c94:	017d7840 	.word	0x017d7840

08004c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c9c:	4b03      	ldr	r3, [pc, #12]	; (8004cac <HAL_RCC_GetHCLKFreq+0x14>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	20000000 	.word	0x20000000

08004cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cb4:	f7ff fff0 	bl	8004c98 <HAL_RCC_GetHCLKFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	0a9b      	lsrs	r3, r3, #10
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	4903      	ldr	r1, [pc, #12]	; (8004cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cc6:	5ccb      	ldrb	r3, [r1, r3]
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	08009e2c 	.word	0x08009e2c

08004cd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e041      	b.n	8004d6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fc fd5c 	bl	80017bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3304      	adds	r3, #4
 8004d14:	4619      	mov	r1, r3
 8004d16:	4610      	mov	r0, r2
 8004d18:	f000 f9a0 	bl	800505c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <HAL_TIM_PWM_Start+0x24>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e022      	b.n	8004de2 <HAL_TIM_PWM_Start+0x6a>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d109      	bne.n	8004db6 <HAL_TIM_PWM_Start+0x3e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	bf14      	ite	ne
 8004dae:	2301      	movne	r3, #1
 8004db0:	2300      	moveq	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	e015      	b.n	8004de2 <HAL_TIM_PWM_Start+0x6a>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d109      	bne.n	8004dd0 <HAL_TIM_PWM_Start+0x58>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e008      	b.n	8004de2 <HAL_TIM_PWM_Start+0x6a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	bf14      	ite	ne
 8004ddc:	2301      	movne	r3, #1
 8004dde:	2300      	moveq	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e068      	b.n	8004ebc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <HAL_TIM_PWM_Start+0x82>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df8:	e013      	b.n	8004e22 <HAL_TIM_PWM_Start+0xaa>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d104      	bne.n	8004e0a <HAL_TIM_PWM_Start+0x92>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e08:	e00b      	b.n	8004e22 <HAL_TIM_PWM_Start+0xaa>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIM_PWM_Start+0xa2>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e18:	e003      	b.n	8004e22 <HAL_TIM_PWM_Start+0xaa>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2201      	movs	r2, #1
 8004e28:	6839      	ldr	r1, [r7, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fb22 	bl	8005474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a23      	ldr	r2, [pc, #140]	; (8004ec4 <HAL_TIM_PWM_Start+0x14c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d107      	bne.n	8004e4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <HAL_TIM_PWM_Start+0x14c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d018      	beq.n	8004e86 <HAL_TIM_PWM_Start+0x10e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5c:	d013      	beq.n	8004e86 <HAL_TIM_PWM_Start+0x10e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a19      	ldr	r2, [pc, #100]	; (8004ec8 <HAL_TIM_PWM_Start+0x150>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00e      	beq.n	8004e86 <HAL_TIM_PWM_Start+0x10e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a17      	ldr	r2, [pc, #92]	; (8004ecc <HAL_TIM_PWM_Start+0x154>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <HAL_TIM_PWM_Start+0x10e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a16      	ldr	r2, [pc, #88]	; (8004ed0 <HAL_TIM_PWM_Start+0x158>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <HAL_TIM_PWM_Start+0x10e>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a14      	ldr	r2, [pc, #80]	; (8004ed4 <HAL_TIM_PWM_Start+0x15c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d111      	bne.n	8004eaa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b06      	cmp	r3, #6
 8004e96:	d010      	beq.n	8004eba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea8:	e007      	b.n	8004eba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0201 	orr.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40000c00 	.word	0x40000c00
 8004ed4:	40014000 	.word	0x40014000

08004ed8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e0ae      	b.n	8005054 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b0c      	cmp	r3, #12
 8004f02:	f200 809f 	bhi.w	8005044 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f06:	a201      	add	r2, pc, #4	; (adr r2, 8004f0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f41 	.word	0x08004f41
 8004f10:	08005045 	.word	0x08005045
 8004f14:	08005045 	.word	0x08005045
 8004f18:	08005045 	.word	0x08005045
 8004f1c:	08004f81 	.word	0x08004f81
 8004f20:	08005045 	.word	0x08005045
 8004f24:	08005045 	.word	0x08005045
 8004f28:	08005045 	.word	0x08005045
 8004f2c:	08004fc3 	.word	0x08004fc3
 8004f30:	08005045 	.word	0x08005045
 8004f34:	08005045 	.word	0x08005045
 8004f38:	08005045 	.word	0x08005045
 8004f3c:	08005003 	.word	0x08005003
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 f908 	bl	800515c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 0208 	orr.w	r2, r2, #8
 8004f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0204 	bic.w	r2, r2, #4
 8004f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6999      	ldr	r1, [r3, #24]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	619a      	str	r2, [r3, #24]
      break;
 8004f7e:	e064      	b.n	800504a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 f94e 	bl	8005228 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699a      	ldr	r2, [r3, #24]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6999      	ldr	r1, [r3, #24]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	021a      	lsls	r2, r3, #8
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	619a      	str	r2, [r3, #24]
      break;
 8004fc0:	e043      	b.n	800504a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68b9      	ldr	r1, [r7, #8]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f000 f999 	bl	8005300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69da      	ldr	r2, [r3, #28]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0208 	orr.w	r2, r2, #8
 8004fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0204 	bic.w	r2, r2, #4
 8004fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69d9      	ldr	r1, [r3, #28]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	61da      	str	r2, [r3, #28]
      break;
 8005000:	e023      	b.n	800504a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	4618      	mov	r0, r3
 800500a:	f000 f9e3 	bl	80053d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800501c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800502c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69d9      	ldr	r1, [r3, #28]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	021a      	lsls	r2, r3, #8
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	61da      	str	r2, [r3, #28]
      break;
 8005042:	e002      	b.n	800504a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	75fb      	strb	r3, [r7, #23]
      break;
 8005048:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005052:	7dfb      	ldrb	r3, [r7, #23]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a34      	ldr	r2, [pc, #208]	; (8005140 <TIM_Base_SetConfig+0xe4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00f      	beq.n	8005094 <TIM_Base_SetConfig+0x38>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507a:	d00b      	beq.n	8005094 <TIM_Base_SetConfig+0x38>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a31      	ldr	r2, [pc, #196]	; (8005144 <TIM_Base_SetConfig+0xe8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d007      	beq.n	8005094 <TIM_Base_SetConfig+0x38>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a30      	ldr	r2, [pc, #192]	; (8005148 <TIM_Base_SetConfig+0xec>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d003      	beq.n	8005094 <TIM_Base_SetConfig+0x38>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a2f      	ldr	r2, [pc, #188]	; (800514c <TIM_Base_SetConfig+0xf0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d108      	bne.n	80050a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a25      	ldr	r2, [pc, #148]	; (8005140 <TIM_Base_SetConfig+0xe4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d01b      	beq.n	80050e6 <TIM_Base_SetConfig+0x8a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b4:	d017      	beq.n	80050e6 <TIM_Base_SetConfig+0x8a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a22      	ldr	r2, [pc, #136]	; (8005144 <TIM_Base_SetConfig+0xe8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d013      	beq.n	80050e6 <TIM_Base_SetConfig+0x8a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a21      	ldr	r2, [pc, #132]	; (8005148 <TIM_Base_SetConfig+0xec>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00f      	beq.n	80050e6 <TIM_Base_SetConfig+0x8a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a20      	ldr	r2, [pc, #128]	; (800514c <TIM_Base_SetConfig+0xf0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00b      	beq.n	80050e6 <TIM_Base_SetConfig+0x8a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1f      	ldr	r2, [pc, #124]	; (8005150 <TIM_Base_SetConfig+0xf4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d007      	beq.n	80050e6 <TIM_Base_SetConfig+0x8a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1e      	ldr	r2, [pc, #120]	; (8005154 <TIM_Base_SetConfig+0xf8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d003      	beq.n	80050e6 <TIM_Base_SetConfig+0x8a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a1d      	ldr	r2, [pc, #116]	; (8005158 <TIM_Base_SetConfig+0xfc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d108      	bne.n	80050f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a08      	ldr	r2, [pc, #32]	; (8005140 <TIM_Base_SetConfig+0xe4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d103      	bne.n	800512c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	615a      	str	r2, [r3, #20]
}
 8005132:	bf00      	nop
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40010000 	.word	0x40010000
 8005144:	40000400 	.word	0x40000400
 8005148:	40000800 	.word	0x40000800
 800514c:	40000c00 	.word	0x40000c00
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400
 8005158:	40014800 	.word	0x40014800

0800515c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800515c:	b480      	push	{r7}
 800515e:	b087      	sub	sp, #28
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	f023 0201 	bic.w	r2, r3, #1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0303 	bic.w	r3, r3, #3
 8005192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f023 0302 	bic.w	r3, r3, #2
 80051a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a1c      	ldr	r2, [pc, #112]	; (8005224 <TIM_OC1_SetConfig+0xc8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d10c      	bne.n	80051d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f023 0308 	bic.w	r3, r3, #8
 80051be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f023 0304 	bic.w	r3, r3, #4
 80051d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a13      	ldr	r2, [pc, #76]	; (8005224 <TIM_OC1_SetConfig+0xc8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d111      	bne.n	80051fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	621a      	str	r2, [r3, #32]
}
 8005218:	bf00      	nop
 800521a:	371c      	adds	r7, #28
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	40010000 	.word	0x40010000

08005228 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f023 0210 	bic.w	r2, r3, #16
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f023 0320 	bic.w	r3, r3, #32
 8005272:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a1e      	ldr	r2, [pc, #120]	; (80052fc <TIM_OC2_SetConfig+0xd4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d10d      	bne.n	80052a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800528e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	4313      	orrs	r3, r2
 800529a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a15      	ldr	r2, [pc, #84]	; (80052fc <TIM_OC2_SetConfig+0xd4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d113      	bne.n	80052d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	bf00      	nop
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	40010000 	.word	0x40010000

08005300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0303 	bic.w	r3, r3, #3
 8005336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	021b      	lsls	r3, r3, #8
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <TIM_OC3_SetConfig+0xd0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d10d      	bne.n	800537a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a14      	ldr	r2, [pc, #80]	; (80053d0 <TIM_OC3_SetConfig+0xd0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d113      	bne.n	80053aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	621a      	str	r2, [r3, #32]
}
 80053c4:	bf00      	nop
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	40010000 	.word	0x40010000

080053d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	021b      	lsls	r3, r3, #8
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800541e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	031b      	lsls	r3, r3, #12
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a10      	ldr	r2, [pc, #64]	; (8005470 <TIM_OC4_SetConfig+0x9c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d109      	bne.n	8005448 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800543a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	019b      	lsls	r3, r3, #6
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	621a      	str	r2, [r3, #32]
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40010000 	.word	0x40010000

08005474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f003 031f 	and.w	r3, r3, #31
 8005486:	2201      	movs	r2, #1
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6a1a      	ldr	r2, [r3, #32]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	43db      	mvns	r3, r3
 8005496:	401a      	ands	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a1a      	ldr	r2, [r3, #32]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f003 031f 	and.w	r3, r3, #31
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	431a      	orrs	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	bf00      	nop
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
	...

080054c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d101      	bne.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054d4:	2302      	movs	r3, #2
 80054d6:	e050      	b.n	800557a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a1c      	ldr	r2, [pc, #112]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d018      	beq.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005524:	d013      	beq.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a18      	ldr	r2, [pc, #96]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00e      	beq.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a16      	ldr	r2, [pc, #88]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d009      	beq.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a15      	ldr	r2, [pc, #84]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d004      	beq.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a13      	ldr	r2, [pc, #76]	; (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d10c      	bne.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	4313      	orrs	r3, r2
 800555e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40010000 	.word	0x40010000
 800558c:	40000400 	.word	0x40000400
 8005590:	40000800 	.word	0x40000800
 8005594:	40000c00 	.word	0x40000c00
 8005598:	40014000 	.word	0x40014000

0800559c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800559c:	b084      	sub	sp, #16
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	f107 001c 	add.w	r0, r7, #28
 80055aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d122      	bne.n	80055fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d105      	bne.n	80055ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f001 fbee 	bl	8006dd0 <USB_CoreReset>
 80055f4:	4603      	mov	r3, r0
 80055f6:	73fb      	strb	r3, [r7, #15]
 80055f8:	e01a      	b.n	8005630 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f001 fbe2 	bl	8006dd0 <USB_CoreReset>
 800560c:	4603      	mov	r3, r0
 800560e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d106      	bne.n	8005624 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
 8005622:	e005      	b.n	8005630 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005632:	2b01      	cmp	r3, #1
 8005634:	d10b      	bne.n	800564e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f043 0206 	orr.w	r2, r3, #6
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f043 0220 	orr.w	r2, r3, #32
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800564e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800565a:	b004      	add	sp, #16
 800565c:	4770      	bx	lr
	...

08005660 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	4613      	mov	r3, r2
 800566c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d165      	bne.n	8005740 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4a41      	ldr	r2, [pc, #260]	; (800577c <USB_SetTurnaroundTime+0x11c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d906      	bls.n	800568a <USB_SetTurnaroundTime+0x2a>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4a40      	ldr	r2, [pc, #256]	; (8005780 <USB_SetTurnaroundTime+0x120>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d202      	bcs.n	800568a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005684:	230f      	movs	r3, #15
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	e062      	b.n	8005750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	4a3c      	ldr	r2, [pc, #240]	; (8005780 <USB_SetTurnaroundTime+0x120>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d306      	bcc.n	80056a0 <USB_SetTurnaroundTime+0x40>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	4a3b      	ldr	r2, [pc, #236]	; (8005784 <USB_SetTurnaroundTime+0x124>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d202      	bcs.n	80056a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800569a:	230e      	movs	r3, #14
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	e057      	b.n	8005750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4a38      	ldr	r2, [pc, #224]	; (8005784 <USB_SetTurnaroundTime+0x124>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d306      	bcc.n	80056b6 <USB_SetTurnaroundTime+0x56>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4a37      	ldr	r2, [pc, #220]	; (8005788 <USB_SetTurnaroundTime+0x128>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d202      	bcs.n	80056b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056b0:	230d      	movs	r3, #13
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	e04c      	b.n	8005750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	4a33      	ldr	r2, [pc, #204]	; (8005788 <USB_SetTurnaroundTime+0x128>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d306      	bcc.n	80056cc <USB_SetTurnaroundTime+0x6c>
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	4a32      	ldr	r2, [pc, #200]	; (800578c <USB_SetTurnaroundTime+0x12c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d802      	bhi.n	80056cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056c6:	230c      	movs	r3, #12
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e041      	b.n	8005750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4a2f      	ldr	r2, [pc, #188]	; (800578c <USB_SetTurnaroundTime+0x12c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d906      	bls.n	80056e2 <USB_SetTurnaroundTime+0x82>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4a2e      	ldr	r2, [pc, #184]	; (8005790 <USB_SetTurnaroundTime+0x130>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d802      	bhi.n	80056e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80056dc:	230b      	movs	r3, #11
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	e036      	b.n	8005750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4a2a      	ldr	r2, [pc, #168]	; (8005790 <USB_SetTurnaroundTime+0x130>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d906      	bls.n	80056f8 <USB_SetTurnaroundTime+0x98>
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4a29      	ldr	r2, [pc, #164]	; (8005794 <USB_SetTurnaroundTime+0x134>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d802      	bhi.n	80056f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80056f2:	230a      	movs	r3, #10
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	e02b      	b.n	8005750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4a26      	ldr	r2, [pc, #152]	; (8005794 <USB_SetTurnaroundTime+0x134>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d906      	bls.n	800570e <USB_SetTurnaroundTime+0xae>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4a25      	ldr	r2, [pc, #148]	; (8005798 <USB_SetTurnaroundTime+0x138>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d202      	bcs.n	800570e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005708:	2309      	movs	r3, #9
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e020      	b.n	8005750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4a21      	ldr	r2, [pc, #132]	; (8005798 <USB_SetTurnaroundTime+0x138>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d306      	bcc.n	8005724 <USB_SetTurnaroundTime+0xc4>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4a20      	ldr	r2, [pc, #128]	; (800579c <USB_SetTurnaroundTime+0x13c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d802      	bhi.n	8005724 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800571e:	2308      	movs	r3, #8
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	e015      	b.n	8005750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4a1d      	ldr	r2, [pc, #116]	; (800579c <USB_SetTurnaroundTime+0x13c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d906      	bls.n	800573a <USB_SetTurnaroundTime+0xda>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4a1c      	ldr	r2, [pc, #112]	; (80057a0 <USB_SetTurnaroundTime+0x140>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d202      	bcs.n	800573a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005734:	2307      	movs	r3, #7
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	e00a      	b.n	8005750 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800573a:	2306      	movs	r3, #6
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	e007      	b.n	8005750 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d102      	bne.n	800574c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005746:	2309      	movs	r3, #9
 8005748:	617b      	str	r3, [r7, #20]
 800574a:	e001      	b.n	8005750 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800574c:	2309      	movs	r3, #9
 800574e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	029b      	lsls	r3, r3, #10
 8005764:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005768:	431a      	orrs	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	371c      	adds	r7, #28
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	00d8acbf 	.word	0x00d8acbf
 8005780:	00e4e1c0 	.word	0x00e4e1c0
 8005784:	00f42400 	.word	0x00f42400
 8005788:	01067380 	.word	0x01067380
 800578c:	011a499f 	.word	0x011a499f
 8005790:	01312cff 	.word	0x01312cff
 8005794:	014ca43f 	.word	0x014ca43f
 8005798:	016e3600 	.word	0x016e3600
 800579c:	01a6ab1f 	.word	0x01a6ab1f
 80057a0:	01e84800 	.word	0x01e84800

080057a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f043 0201 	orr.w	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f023 0201 	bic.w	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	460b      	mov	r3, r1
 80057f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d115      	bne.n	8005836 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005816:	2001      	movs	r0, #1
 8005818:	f7fc f90a 	bl	8001a30 <HAL_Delay>
      ms++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3301      	adds	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f001 fa45 	bl	8006cb2 <USB_GetMode>
 8005828:	4603      	mov	r3, r0
 800582a:	2b01      	cmp	r3, #1
 800582c:	d01e      	beq.n	800586c <USB_SetCurrentMode+0x84>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2b31      	cmp	r3, #49	; 0x31
 8005832:	d9f0      	bls.n	8005816 <USB_SetCurrentMode+0x2e>
 8005834:	e01a      	b.n	800586c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005836:	78fb      	ldrb	r3, [r7, #3]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d115      	bne.n	8005868 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005848:	2001      	movs	r0, #1
 800584a:	f7fc f8f1 	bl	8001a30 <HAL_Delay>
      ms++;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3301      	adds	r3, #1
 8005852:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 fa2c 	bl	8006cb2 <USB_GetMode>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d005      	beq.n	800586c <USB_SetCurrentMode+0x84>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b31      	cmp	r3, #49	; 0x31
 8005864:	d9f0      	bls.n	8005848 <USB_SetCurrentMode+0x60>
 8005866:	e001      	b.n	800586c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e005      	b.n	8005878 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b32      	cmp	r3, #50	; 0x32
 8005870:	d101      	bne.n	8005876 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005880:	b084      	sub	sp, #16
 8005882:	b580      	push	{r7, lr}
 8005884:	b086      	sub	sp, #24
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800588e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800589a:	2300      	movs	r3, #0
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	e009      	b.n	80058b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	3340      	adds	r3, #64	; 0x40
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	2200      	movs	r2, #0
 80058ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	3301      	adds	r3, #1
 80058b2:	613b      	str	r3, [r7, #16]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2b0e      	cmp	r3, #14
 80058b8:	d9f2      	bls.n	80058a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d11c      	bne.n	80058fa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ce:	f043 0302 	orr.w	r3, r3, #2
 80058d2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38
 80058f8:	e00b      	b.n	8005912 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005918:	461a      	mov	r2, r3
 800591a:	2300      	movs	r3, #0
 800591c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005924:	4619      	mov	r1, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800592c:	461a      	mov	r2, r3
 800592e:	680b      	ldr	r3, [r1, #0]
 8005930:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005934:	2b01      	cmp	r3, #1
 8005936:	d10c      	bne.n	8005952 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d104      	bne.n	8005948 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800593e:	2100      	movs	r1, #0
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f965 	bl	8005c10 <USB_SetDevSpeed>
 8005946:	e008      	b.n	800595a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005948:	2101      	movs	r1, #1
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f960 	bl	8005c10 <USB_SetDevSpeed>
 8005950:	e003      	b.n	800595a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005952:	2103      	movs	r1, #3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f95b 	bl	8005c10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800595a:	2110      	movs	r1, #16
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f8f3 	bl	8005b48 <USB_FlushTxFifo>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f91f 	bl	8005bb0 <USB_FlushRxFifo>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	461a      	mov	r2, r3
 8005984:	2300      	movs	r3, #0
 8005986:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598e:	461a      	mov	r2, r3
 8005990:	2300      	movs	r3, #0
 8005992:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599a:	461a      	mov	r2, r3
 800599c:	2300      	movs	r3, #0
 800599e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a0:	2300      	movs	r3, #0
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	e043      	b.n	8005a2e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059bc:	d118      	bne.n	80059f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d0:	461a      	mov	r2, r3
 80059d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	e013      	b.n	8005a02 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e6:	461a      	mov	r2, r3
 80059e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e008      	b.n	8005a02 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fc:	461a      	mov	r2, r3
 80059fe:	2300      	movs	r3, #0
 8005a00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0e:	461a      	mov	r2, r3
 8005a10:	2300      	movs	r3, #0
 8005a12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a20:	461a      	mov	r2, r3
 8005a22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d3b7      	bcc.n	80059a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a36:	2300      	movs	r3, #0
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	e043      	b.n	8005ac4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a52:	d118      	bne.n	8005a86 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a66:	461a      	mov	r2, r3
 8005a68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	e013      	b.n	8005a98 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	e008      	b.n	8005a98 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a92:	461a      	mov	r2, r3
 8005a94:	2300      	movs	r3, #0
 8005a96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005abc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	613b      	str	r3, [r7, #16]
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d3b7      	bcc.n	8005a3c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ade:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005aec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	f043 0210 	orr.w	r2, r3, #16
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699a      	ldr	r2, [r3, #24]
 8005b04:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <USB_DevInit+0x2c4>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d005      	beq.n	8005b1e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	f043 0208 	orr.w	r2, r3, #8
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d107      	bne.n	8005b34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b2c:	f043 0304 	orr.w	r3, r3, #4
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b40:	b004      	add	sp, #16
 8005b42:	4770      	bx	lr
 8005b44:	803c3800 	.word	0x803c3800

08005b48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4a13      	ldr	r2, [pc, #76]	; (8005bac <USB_FlushTxFifo+0x64>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d901      	bls.n	8005b68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e01b      	b.n	8005ba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	daf2      	bge.n	8005b56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	019b      	lsls	r3, r3, #6
 8005b78:	f043 0220 	orr.w	r2, r3, #32
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	3301      	adds	r3, #1
 8005b84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4a08      	ldr	r2, [pc, #32]	; (8005bac <USB_FlushTxFifo+0x64>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d901      	bls.n	8005b92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e006      	b.n	8005ba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d0f0      	beq.n	8005b80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	00030d40 	.word	0x00030d40

08005bb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4a11      	ldr	r2, [pc, #68]	; (8005c0c <USB_FlushRxFifo+0x5c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d901      	bls.n	8005bce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e018      	b.n	8005c00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	daf2      	bge.n	8005bbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2210      	movs	r2, #16
 8005bde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3301      	adds	r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4a08      	ldr	r2, [pc, #32]	; (8005c0c <USB_FlushRxFifo+0x5c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e006      	b.n	8005c00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2b10      	cmp	r3, #16
 8005bfc:	d0f0      	beq.n	8005be0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	00030d40 	.word	0x00030d40

08005c10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	68f9      	ldr	r1, [r7, #12]
 8005c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c30:	4313      	orrs	r3, r2
 8005c32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b087      	sub	sp, #28
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 0306 	and.w	r3, r3, #6
 8005c5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d102      	bne.n	8005c68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c62:	2300      	movs	r3, #0
 8005c64:	75fb      	strb	r3, [r7, #23]
 8005c66:	e00a      	b.n	8005c7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d002      	beq.n	8005c74 <USB_GetDevSpeed+0x32>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b06      	cmp	r3, #6
 8005c72:	d102      	bne.n	8005c7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c74:	2302      	movs	r3, #2
 8005c76:	75fb      	strb	r3, [r7, #23]
 8005c78:	e001      	b.n	8005c7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c7a:	230f      	movs	r3, #15
 8005c7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	785b      	ldrb	r3, [r3, #1]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d13a      	bne.n	8005d1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	f003 030f 	and.w	r3, r3, #15
 8005cb8:	2101      	movs	r1, #1
 8005cba:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	68f9      	ldr	r1, [r7, #12]
 8005cc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d155      	bne.n	8005d8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	791b      	ldrb	r3, [r3, #4]
 8005cfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	059b      	lsls	r3, r3, #22
 8005d02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d04:	4313      	orrs	r3, r2
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	e036      	b.n	8005d8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d24:	69da      	ldr	r2, [r3, #28]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	2101      	movs	r1, #1
 8005d30:	fa01 f303 	lsl.w	r3, r1, r3
 8005d34:	041b      	lsls	r3, r3, #16
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d11a      	bne.n	8005d8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	791b      	ldrb	r3, [r3, #4]
 8005d70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d72:	430b      	orrs	r3, r1
 8005d74:	4313      	orrs	r3, r2
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d161      	bne.n	8005e7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dce:	d11f      	bne.n	8005e10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	f003 030f 	and.w	r3, r3, #15
 8005e20:	2101      	movs	r1, #1
 8005e22:	fa01 f303 	lsl.w	r3, r1, r3
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	68f9      	ldr	r1, [r7, #12]
 8005e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e30:	4013      	ands	r3, r2
 8005e32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3a:	69da      	ldr	r2, [r3, #28]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	f003 030f 	and.w	r3, r3, #15
 8005e44:	2101      	movs	r1, #1
 8005e46:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	68f9      	ldr	r1, [r7, #12]
 8005e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e54:	4013      	ands	r3, r2
 8005e56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	0159      	lsls	r1, r3, #5
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	440b      	add	r3, r1
 8005e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e72:	4619      	mov	r1, r3
 8005e74:	4b35      	ldr	r3, [pc, #212]	; (8005f4c <USB_DeactivateEndpoint+0x1b0>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	600b      	str	r3, [r1, #0]
 8005e7a:	e060      	b.n	8005f3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e92:	d11f      	bne.n	8005ed4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	0151      	lsls	r1, r2, #5
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	440a      	add	r2, r1
 8005eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005eb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ece:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ed2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eea:	041b      	lsls	r3, r3, #16
 8005eec:	43db      	mvns	r3, r3
 8005eee:	68f9      	ldr	r1, [r7, #12]
 8005ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efe:	69da      	ldr	r2, [r3, #28]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	2101      	movs	r1, #1
 8005f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0e:	041b      	lsls	r3, r3, #16
 8005f10:	43db      	mvns	r3, r3
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f18:	4013      	ands	r3, r2
 8005f1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	0159      	lsls	r1, r3, #5
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	440b      	add	r3, r1
 8005f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f36:	4619      	mov	r1, r3
 8005f38:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <USB_DeactivateEndpoint+0x1b4>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	ec337800 	.word	0xec337800
 8005f50:	eff37800 	.word	0xeff37800

08005f54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08a      	sub	sp, #40	; 0x28
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	785b      	ldrb	r3, [r3, #1]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	f040 815c 	bne.w	800622e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d132      	bne.n	8005fe4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fdc:	0cdb      	lsrs	r3, r3, #19
 8005fde:	04db      	lsls	r3, r3, #19
 8005fe0:	6113      	str	r3, [r2, #16]
 8005fe2:	e074      	b.n	80060ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffe:	0cdb      	lsrs	r3, r3, #19
 8006000:	04db      	lsls	r3, r3, #19
 8006002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	4413      	add	r3, r2
 800600c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	0151      	lsls	r1, r2, #5
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	440a      	add	r2, r1
 800601a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800601e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006022:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006026:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006034:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	6999      	ldr	r1, [r3, #24]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	440b      	add	r3, r1
 8006040:	1e59      	subs	r1, r3, #1
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	fbb1 f3f3 	udiv	r3, r1, r3
 800604a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800604c:	4b9d      	ldr	r3, [pc, #628]	; (80062c4 <USB_EPStartXfer+0x370>)
 800604e:	400b      	ands	r3, r1
 8006050:	69b9      	ldr	r1, [r7, #24]
 8006052:	0148      	lsls	r0, r1, #5
 8006054:	69f9      	ldr	r1, [r7, #28]
 8006056:	4401      	add	r1, r0
 8006058:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800605c:	4313      	orrs	r3, r2
 800605e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606c:	691a      	ldr	r2, [r3, #16]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006076:	69b9      	ldr	r1, [r7, #24]
 8006078:	0148      	lsls	r0, r1, #5
 800607a:	69f9      	ldr	r1, [r7, #28]
 800607c:	4401      	add	r1, r0
 800607e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006082:	4313      	orrs	r3, r2
 8006084:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	791b      	ldrb	r3, [r3, #4]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d11f      	bne.n	80060ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	0151      	lsls	r1, r2, #5
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	440a      	add	r2, r1
 80060a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80060ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	0151      	lsls	r1, r2, #5
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	440a      	add	r2, r1
 80060c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80060ce:	79fb      	ldrb	r3, [r7, #7]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d14b      	bne.n	800616c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d009      	beq.n	80060f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e8:	461a      	mov	r2, r3
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	791b      	ldrb	r3, [r3, #4]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d128      	bne.n	800614a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006104:	2b00      	cmp	r3, #0
 8006106:	d110      	bne.n	800612a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	69fa      	ldr	r2, [r7, #28]
 800611c:	440a      	add	r2, r1
 800611e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006122:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006126:	6013      	str	r3, [r2, #0]
 8006128:	e00f      	b.n	800614a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	4413      	add	r3, r2
 8006132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	0151      	lsls	r1, r2, #5
 800613c:	69fa      	ldr	r2, [r7, #28]
 800613e:	440a      	add	r2, r1
 8006140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006148:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	69fa      	ldr	r2, [r7, #28]
 800615e:	440a      	add	r2, r1
 8006160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006164:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	e133      	b.n	80063d4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	440a      	add	r2, r1
 8006182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006186:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800618a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	791b      	ldrb	r3, [r3, #4]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d015      	beq.n	80061c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 811b 	beq.w	80063d4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	2101      	movs	r1, #1
 80061b0:	fa01 f303 	lsl.w	r3, r1, r3
 80061b4:	69f9      	ldr	r1, [r7, #28]
 80061b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061ba:	4313      	orrs	r3, r2
 80061bc:	634b      	str	r3, [r1, #52]	; 0x34
 80061be:	e109      	b.n	80063d4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d110      	bne.n	80061f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	e00f      	b.n	8006212 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	440a      	add	r2, r1
 8006208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800620c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006210:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	6919      	ldr	r1, [r3, #16]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	781a      	ldrb	r2, [r3, #0]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	b298      	uxth	r0, r3
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	4603      	mov	r3, r0
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 fade 	bl	80067e8 <USB_WritePacket>
 800622c:	e0d2      	b.n	80063d4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	0151      	lsls	r1, r2, #5
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	440a      	add	r2, r1
 8006244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006248:	0cdb      	lsrs	r3, r3, #19
 800624a:	04db      	lsls	r3, r3, #19
 800624c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006268:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800626c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006270:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d126      	bne.n	80062c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006290:	69b9      	ldr	r1, [r7, #24]
 8006292:	0148      	lsls	r0, r1, #5
 8006294:	69f9      	ldr	r1, [r7, #28]
 8006296:	4401      	add	r1, r0
 8006298:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800629c:	4313      	orrs	r3, r2
 800629e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062be:	6113      	str	r3, [r2, #16]
 80062c0:	e03a      	b.n	8006338 <USB_EPStartXfer+0x3e4>
 80062c2:	bf00      	nop
 80062c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	699a      	ldr	r2, [r3, #24]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	4413      	add	r3, r2
 80062d2:	1e5a      	subs	r2, r3, #1
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062dc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	8afa      	ldrh	r2, [r7, #22]
 80062e4:	fb03 f202 	mul.w	r2, r3, r2
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f8:	691a      	ldr	r2, [r3, #16]
 80062fa:	8afb      	ldrh	r3, [r7, #22]
 80062fc:	04d9      	lsls	r1, r3, #19
 80062fe:	4b38      	ldr	r3, [pc, #224]	; (80063e0 <USB_EPStartXfer+0x48c>)
 8006300:	400b      	ands	r3, r1
 8006302:	69b9      	ldr	r1, [r7, #24]
 8006304:	0148      	lsls	r0, r1, #5
 8006306:	69f9      	ldr	r1, [r7, #28]
 8006308:	4401      	add	r1, r0
 800630a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800630e:	4313      	orrs	r3, r2
 8006310:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006328:	69b9      	ldr	r1, [r7, #24]
 800632a:	0148      	lsls	r0, r1, #5
 800632c:	69f9      	ldr	r1, [r7, #28]
 800632e:	4401      	add	r1, r0
 8006330:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006334:	4313      	orrs	r3, r2
 8006336:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d10d      	bne.n	800635a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d009      	beq.n	800635a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	6919      	ldr	r1, [r3, #16]
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006356:	460a      	mov	r2, r1
 8006358:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	791b      	ldrb	r3, [r3, #4]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d128      	bne.n	80063b4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636e:	2b00      	cmp	r3, #0
 8006370:	d110      	bne.n	8006394 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	0151      	lsls	r1, r2, #5
 8006384:	69fa      	ldr	r2, [r7, #28]
 8006386:	440a      	add	r2, r1
 8006388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800638c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	e00f      	b.n	80063b4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	0151      	lsls	r1, r2, #5
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	440a      	add	r2, r1
 80063ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3720      	adds	r7, #32
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	1ff80000 	.word	0x1ff80000

080063e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	4613      	mov	r3, r2
 80063f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	785b      	ldrb	r3, [r3, #1]
 8006400:	2b01      	cmp	r3, #1
 8006402:	f040 80ce 	bne.w	80065a2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d132      	bne.n	8006474 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	0151      	lsls	r1, r2, #5
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	440a      	add	r2, r1
 8006424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006428:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800642c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	0151      	lsls	r1, r2, #5
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	440a      	add	r2, r1
 8006448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006450:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	440a      	add	r2, r1
 8006468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646c:	0cdb      	lsrs	r3, r3, #19
 800646e:	04db      	lsls	r3, r3, #19
 8006470:	6113      	str	r3, [r2, #16]
 8006472:	e04e      	b.n	8006512 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	440a      	add	r2, r1
 800648a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648e:	0cdb      	lsrs	r3, r3, #19
 8006490:	04db      	lsls	r3, r3, #19
 8006492:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	699a      	ldr	r2, [r3, #24]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d903      	bls.n	80064cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	0151      	lsls	r1, r2, #5
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	440a      	add	r2, r1
 80064e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f8:	691a      	ldr	r2, [r3, #16]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006502:	6939      	ldr	r1, [r7, #16]
 8006504:	0148      	lsls	r0, r1, #5
 8006506:	6979      	ldr	r1, [r7, #20]
 8006508:	4401      	add	r1, r0
 800650a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800650e:	4313      	orrs	r3, r2
 8006510:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d11e      	bne.n	8006556 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d009      	beq.n	8006534 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652c:	461a      	mov	r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	0151      	lsls	r1, r2, #5
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	440a      	add	r2, r1
 800654a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800654e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	e097      	b.n	8006686 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	0151      	lsls	r1, r2, #5
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	440a      	add	r2, r1
 800656c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006570:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006574:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 8083 	beq.w	8006686 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	f003 030f 	and.w	r3, r3, #15
 8006590:	2101      	movs	r1, #1
 8006592:	fa01 f303 	lsl.w	r3, r1, r3
 8006596:	6979      	ldr	r1, [r7, #20]
 8006598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800659c:	4313      	orrs	r3, r2
 800659e:	634b      	str	r3, [r1, #52]	; 0x34
 80065a0:	e071      	b.n	8006686 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065bc:	0cdb      	lsrs	r3, r3, #19
 80065be:	04db      	lsls	r3, r3, #19
 80065c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	0151      	lsls	r1, r2, #5
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	440a      	add	r2, r1
 80065d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	68da      	ldr	r2, [r3, #12]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	440a      	add	r2, r1
 8006614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006618:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800661c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006634:	6939      	ldr	r1, [r7, #16]
 8006636:	0148      	lsls	r0, r1, #5
 8006638:	6979      	ldr	r1, [r7, #20]
 800663a:	4401      	add	r1, r0
 800663c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006640:	4313      	orrs	r3, r2
 8006642:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006644:	79fb      	ldrb	r3, [r7, #7]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d10d      	bne.n	8006666 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d009      	beq.n	8006666 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6919      	ldr	r1, [r3, #16]
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006662:	460a      	mov	r2, r1
 8006664:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	440a      	add	r2, r1
 800667c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006680:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006684:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	785b      	ldrb	r3, [r3, #1]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d14a      	bne.n	8006748 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066ca:	f040 8086 	bne.w	80067da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	7812      	ldrb	r2, [r2, #0]
 80066e2:	0151      	lsls	r1, r2, #5
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	440a      	add	r2, r1
 80066e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	7812      	ldrb	r2, [r2, #0]
 8006706:	0151      	lsls	r1, r2, #5
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	440a      	add	r2, r1
 800670c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006714:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3301      	adds	r3, #1
 800671a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006722:	4293      	cmp	r3, r2
 8006724:	d902      	bls.n	800672c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	75fb      	strb	r3, [r7, #23]
          break;
 800672a:	e056      	b.n	80067da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006744:	d0e7      	beq.n	8006716 <USB_EPStopXfer+0x82>
 8006746:	e048      	b.n	80067da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800675c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006760:	d13b      	bne.n	80067da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	7812      	ldrb	r2, [r2, #0]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	440a      	add	r2, r1
 800677c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006780:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006784:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	0151      	lsls	r1, r2, #5
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	440a      	add	r2, r1
 80067a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d902      	bls.n	80067c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	75fb      	strb	r3, [r7, #23]
          break;
 80067be:	e00c      	b.n	80067da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067d8:	d0e7      	beq.n	80067aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80067da:	7dfb      	ldrb	r3, [r7, #23]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b089      	sub	sp, #36	; 0x24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	4611      	mov	r1, r2
 80067f4:	461a      	mov	r2, r3
 80067f6:	460b      	mov	r3, r1
 80067f8:	71fb      	strb	r3, [r7, #7]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006806:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800680a:	2b00      	cmp	r3, #0
 800680c:	d123      	bne.n	8006856 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800680e:	88bb      	ldrh	r3, [r7, #4]
 8006810:	3303      	adds	r3, #3
 8006812:	089b      	lsrs	r3, r3, #2
 8006814:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006816:	2300      	movs	r3, #0
 8006818:	61bb      	str	r3, [r7, #24]
 800681a:	e018      	b.n	800684e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800681c:	79fb      	ldrb	r3, [r7, #7]
 800681e:	031a      	lsls	r2, r3, #12
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	4413      	add	r3, r2
 8006824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006828:	461a      	mov	r2, r3
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	3301      	adds	r3, #1
 8006834:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	3301      	adds	r3, #1
 800683a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	3301      	adds	r3, #1
 8006840:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	3301      	adds	r3, #1
 8006846:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	3301      	adds	r3, #1
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	429a      	cmp	r2, r3
 8006854:	d3e2      	bcc.n	800681c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3724      	adds	r7, #36	; 0x24
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006864:	b480      	push	{r7}
 8006866:	b08b      	sub	sp, #44	; 0x2c
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	4613      	mov	r3, r2
 8006870:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800687a:	88fb      	ldrh	r3, [r7, #6]
 800687c:	089b      	lsrs	r3, r3, #2
 800687e:	b29b      	uxth	r3, r3
 8006880:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006882:	88fb      	ldrh	r3, [r7, #6]
 8006884:	f003 0303 	and.w	r3, r3, #3
 8006888:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800688a:	2300      	movs	r3, #0
 800688c:	623b      	str	r3, [r7, #32]
 800688e:	e014      	b.n	80068ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	601a      	str	r2, [r3, #0]
    pDest++;
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	3301      	adds	r3, #1
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	3301      	adds	r3, #1
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	3301      	adds	r3, #1
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	3301      	adds	r3, #1
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	3301      	adds	r3, #1
 80068b8:	623b      	str	r3, [r7, #32]
 80068ba:	6a3a      	ldr	r2, [r7, #32]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d3e6      	bcc.n	8006890 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068c2:	8bfb      	ldrh	r3, [r7, #30]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01e      	beq.n	8006906 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d2:	461a      	mov	r2, r3
 80068d4:	f107 0310 	add.w	r3, r7, #16
 80068d8:	6812      	ldr	r2, [r2, #0]
 80068da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	fa22 f303 	lsr.w	r3, r2, r3
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	701a      	strb	r2, [r3, #0]
      i++;
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	3301      	adds	r3, #1
 80068f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	3301      	adds	r3, #1
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80068fa:	8bfb      	ldrh	r3, [r7, #30]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006900:	8bfb      	ldrh	r3, [r7, #30]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1ea      	bne.n	80068dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006908:	4618      	mov	r0, r3
 800690a:	372c      	adds	r7, #44	; 0x2c
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	785b      	ldrb	r3, [r3, #1]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d12c      	bne.n	800698a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	db12      	blt.n	8006968 <USB_EPSetStall+0x54>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00f      	beq.n	8006968 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	0151      	lsls	r1, r2, #5
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	440a      	add	r2, r1
 800695e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006962:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006966:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	0151      	lsls	r1, r2, #5
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	440a      	add	r2, r1
 800697e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006982:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	e02b      	b.n	80069e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	db12      	blt.n	80069c2 <USB_EPSetStall+0xae>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00f      	beq.n	80069c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	0151      	lsls	r1, r2, #5
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	440a      	add	r2, r1
 80069b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	0151      	lsls	r1, r2, #5
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	440a      	add	r2, r1
 80069d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	785b      	ldrb	r3, [r3, #1]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d128      	bne.n	8006a5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	0151      	lsls	r1, r2, #5
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	440a      	add	r2, r1
 8006a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	791b      	ldrb	r3, [r3, #4]
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d003      	beq.n	8006a3c <USB_EPClearStall+0x4c>
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	791b      	ldrb	r3, [r3, #4]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d138      	bne.n	8006aae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	0151      	lsls	r1, r2, #5
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	440a      	add	r2, r1
 8006a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	e027      	b.n	8006aae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	0151      	lsls	r1, r2, #5
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	440a      	add	r2, r1
 8006a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	791b      	ldrb	r3, [r3, #4]
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d003      	beq.n	8006a8e <USB_EPClearStall+0x9e>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	791b      	ldrb	r3, [r3, #4]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d10f      	bne.n	8006aae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	0151      	lsls	r1, r2, #5
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	440a      	add	r2, r1
 8006aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ada:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006ade:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006af0:	68f9      	ldr	r1, [r7, #12]
 8006af2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006af6:	4313      	orrs	r3, r2
 8006af8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b22:	f023 0303 	bic.w	r3, r3, #3
 8006b26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b36:	f023 0302 	bic.w	r3, r3, #2
 8006b3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b64:	f023 0303 	bic.w	r3, r3, #3
 8006b68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b78:	f043 0302 	orr.w	r3, r3, #2
 8006b7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b085      	sub	sp, #20
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	0c1b      	lsrs	r3, r3, #16
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b085      	sub	sp, #20
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	4013      	ands	r3, r2
 8006c08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	b29b      	uxth	r3, r3
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	460b      	mov	r3, r1
 8006c24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c2a:	78fb      	ldrb	r3, [r7, #3]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	4013      	ands	r3, r2
 8006c46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c48:	68bb      	ldr	r3, [r7, #8]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c56:	b480      	push	{r7}
 8006c58:	b087      	sub	sp, #28
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	f003 030f 	and.w	r3, r3, #15
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	fa22 f303 	lsr.w	r3, r2, r3
 8006c86:	01db      	lsls	r3, r3, #7
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b085      	sub	sp, #20
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006cec:	f023 0307 	bic.w	r3, r3, #7
 8006cf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	333c      	adds	r3, #60	; 0x3c
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	4a26      	ldr	r2, [pc, #152]	; (8006dcc <USB_EP0_OutStart+0xb8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d90a      	bls.n	8006d4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d48:	d101      	bne.n	8006d4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	e037      	b.n	8006dbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d54:	461a      	mov	r2, r3
 8006d56:	2300      	movs	r3, #0
 8006d58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d7c:	f043 0318 	orr.w	r3, r3, #24
 8006d80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006d94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d96:	7afb      	ldrb	r3, [r7, #11]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d10f      	bne.n	8006dbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da2:	461a      	mov	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006dba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	4f54300a 	.word	0x4f54300a

08006dd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3301      	adds	r3, #1
 8006de0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4a13      	ldr	r2, [pc, #76]	; (8006e34 <USB_CoreReset+0x64>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d901      	bls.n	8006dee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e01b      	b.n	8006e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	daf2      	bge.n	8006ddc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f043 0201 	orr.w	r2, r3, #1
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4a09      	ldr	r2, [pc, #36]	; (8006e34 <USB_CoreReset+0x64>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d901      	bls.n	8006e18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e006      	b.n	8006e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d0f0      	beq.n	8006e06 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	00030d40 	.word	0x00030d40

08006e38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e48:	f002 fc8a 	bl	8009760 <USBD_static_malloc>
 8006e4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d109      	bne.n	8006e68 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	32b0      	adds	r2, #176	; 0xb0
 8006e5e:	2100      	movs	r1, #0
 8006e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e64:	2302      	movs	r3, #2
 8006e66:	e0d4      	b.n	8007012 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006e68:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f002 fcba 	bl	80097e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	32b0      	adds	r2, #176	; 0xb0
 8006e7e:	68f9      	ldr	r1, [r7, #12]
 8006e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	32b0      	adds	r2, #176	; 0xb0
 8006e8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	7c1b      	ldrb	r3, [r3, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d138      	bne.n	8006f12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ea0:	4b5e      	ldr	r3, [pc, #376]	; (800701c <USBD_CDC_Init+0x1e4>)
 8006ea2:	7819      	ldrb	r1, [r3, #0]
 8006ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f002 fb35 	bl	800951a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006eb0:	4b5a      	ldr	r3, [pc, #360]	; (800701c <USBD_CDC_Init+0x1e4>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	f003 020f 	and.w	r2, r3, #15
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	3324      	adds	r3, #36	; 0x24
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006eca:	4b55      	ldr	r3, [pc, #340]	; (8007020 <USBD_CDC_Init+0x1e8>)
 8006ecc:	7819      	ldrb	r1, [r3, #0]
 8006ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f002 fb20 	bl	800951a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006eda:	4b51      	ldr	r3, [pc, #324]	; (8007020 <USBD_CDC_Init+0x1e8>)
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	f003 020f 	and.w	r2, r3, #15
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	440b      	add	r3, r1
 8006eee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ef6:	4b4b      	ldr	r3, [pc, #300]	; (8007024 <USBD_CDC_Init+0x1ec>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	f003 020f 	and.w	r2, r3, #15
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	3326      	adds	r3, #38	; 0x26
 8006f0c:	2210      	movs	r2, #16
 8006f0e:	801a      	strh	r2, [r3, #0]
 8006f10:	e035      	b.n	8006f7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f12:	4b42      	ldr	r3, [pc, #264]	; (800701c <USBD_CDC_Init+0x1e4>)
 8006f14:	7819      	ldrb	r1, [r3, #0]
 8006f16:	2340      	movs	r3, #64	; 0x40
 8006f18:	2202      	movs	r2, #2
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f002 fafd 	bl	800951a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f20:	4b3e      	ldr	r3, [pc, #248]	; (800701c <USBD_CDC_Init+0x1e4>)
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	f003 020f 	and.w	r2, r3, #15
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	3324      	adds	r3, #36	; 0x24
 8006f36:	2201      	movs	r2, #1
 8006f38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f3a:	4b39      	ldr	r3, [pc, #228]	; (8007020 <USBD_CDC_Init+0x1e8>)
 8006f3c:	7819      	ldrb	r1, [r3, #0]
 8006f3e:	2340      	movs	r3, #64	; 0x40
 8006f40:	2202      	movs	r2, #2
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f002 fae9 	bl	800951a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f48:	4b35      	ldr	r3, [pc, #212]	; (8007020 <USBD_CDC_Init+0x1e8>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	f003 020f 	and.w	r2, r3, #15
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f60:	2201      	movs	r2, #1
 8006f62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f64:	4b2f      	ldr	r3, [pc, #188]	; (8007024 <USBD_CDC_Init+0x1ec>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	f003 020f 	and.w	r2, r3, #15
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	3326      	adds	r3, #38	; 0x26
 8006f7a:	2210      	movs	r2, #16
 8006f7c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f7e:	4b29      	ldr	r3, [pc, #164]	; (8007024 <USBD_CDC_Init+0x1ec>)
 8006f80:	7819      	ldrb	r1, [r3, #0]
 8006f82:	2308      	movs	r3, #8
 8006f84:	2203      	movs	r2, #3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f002 fac7 	bl	800951a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f8c:	4b25      	ldr	r3, [pc, #148]	; (8007024 <USBD_CDC_Init+0x1ec>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	f003 020f 	and.w	r2, r3, #15
 8006f94:	6879      	ldr	r1, [r7, #4]
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	440b      	add	r3, r1
 8006fa0:	3324      	adds	r3, #36	; 0x24
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	33b0      	adds	r3, #176	; 0xb0
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e018      	b.n	8007012 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	7c1b      	ldrb	r3, [r3, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10a      	bne.n	8006ffe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fe8:	4b0d      	ldr	r3, [pc, #52]	; (8007020 <USBD_CDC_Init+0x1e8>)
 8006fea:	7819      	ldrb	r1, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f002 fb7e 	bl	80096f8 <USBD_LL_PrepareReceive>
 8006ffc:	e008      	b.n	8007010 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ffe:	4b08      	ldr	r3, [pc, #32]	; (8007020 <USBD_CDC_Init+0x1e8>)
 8007000:	7819      	ldrb	r1, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007008:	2340      	movs	r3, #64	; 0x40
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f002 fb74 	bl	80096f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20000093 	.word	0x20000093
 8007020:	20000094 	.word	0x20000094
 8007024:	20000095 	.word	0x20000095

08007028 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007034:	4b3a      	ldr	r3, [pc, #232]	; (8007120 <USBD_CDC_DeInit+0xf8>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f002 fa93 	bl	8009566 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007040:	4b37      	ldr	r3, [pc, #220]	; (8007120 <USBD_CDC_DeInit+0xf8>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	f003 020f 	and.w	r2, r3, #15
 8007048:	6879      	ldr	r1, [r7, #4]
 800704a:	4613      	mov	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	440b      	add	r3, r1
 8007054:	3324      	adds	r3, #36	; 0x24
 8007056:	2200      	movs	r2, #0
 8007058:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800705a:	4b32      	ldr	r3, [pc, #200]	; (8007124 <USBD_CDC_DeInit+0xfc>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f002 fa80 	bl	8009566 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007066:	4b2f      	ldr	r3, [pc, #188]	; (8007124 <USBD_CDC_DeInit+0xfc>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	f003 020f 	and.w	r2, r3, #15
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	4613      	mov	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	440b      	add	r3, r1
 800707a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800707e:	2200      	movs	r2, #0
 8007080:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007082:	4b29      	ldr	r3, [pc, #164]	; (8007128 <USBD_CDC_DeInit+0x100>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f002 fa6c 	bl	8009566 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800708e:	4b26      	ldr	r3, [pc, #152]	; (8007128 <USBD_CDC_DeInit+0x100>)
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	f003 020f 	and.w	r2, r3, #15
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	4613      	mov	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	3324      	adds	r3, #36	; 0x24
 80070a4:	2200      	movs	r2, #0
 80070a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80070a8:	4b1f      	ldr	r3, [pc, #124]	; (8007128 <USBD_CDC_DeInit+0x100>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	f003 020f 	and.w	r2, r3, #15
 80070b0:	6879      	ldr	r1, [r7, #4]
 80070b2:	4613      	mov	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	440b      	add	r3, r1
 80070bc:	3326      	adds	r3, #38	; 0x26
 80070be:	2200      	movs	r2, #0
 80070c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	32b0      	adds	r2, #176	; 0xb0
 80070cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01f      	beq.n	8007114 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	33b0      	adds	r3, #176	; 0xb0
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	32b0      	adds	r2, #176	; 0xb0
 80070f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f002 fb40 	bl	800977c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	32b0      	adds	r2, #176	; 0xb0
 8007106:	2100      	movs	r1, #0
 8007108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	20000093 	.word	0x20000093
 8007124:	20000094 	.word	0x20000094
 8007128:	20000095 	.word	0x20000095

0800712c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	32b0      	adds	r2, #176	; 0xb0
 8007140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007144:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800714e:	2300      	movs	r3, #0
 8007150:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007158:	2303      	movs	r3, #3
 800715a:	e0bf      	b.n	80072dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007164:	2b00      	cmp	r3, #0
 8007166:	d050      	beq.n	800720a <USBD_CDC_Setup+0xde>
 8007168:	2b20      	cmp	r3, #32
 800716a:	f040 80af 	bne.w	80072cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	88db      	ldrh	r3, [r3, #6]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d03a      	beq.n	80071ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	b25b      	sxtb	r3, r3
 800717c:	2b00      	cmp	r3, #0
 800717e:	da1b      	bge.n	80071b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	33b0      	adds	r3, #176	; 0xb0
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007196:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	88d2      	ldrh	r2, [r2, #6]
 800719c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	88db      	ldrh	r3, [r3, #6]
 80071a2:	2b07      	cmp	r3, #7
 80071a4:	bf28      	it	cs
 80071a6:	2307      	movcs	r3, #7
 80071a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	89fa      	ldrh	r2, [r7, #14]
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 fd89 	bl	8008cc8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80071b6:	e090      	b.n	80072da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	785a      	ldrb	r2, [r3, #1]
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	88db      	ldrh	r3, [r3, #6]
 80071c6:	2b3f      	cmp	r3, #63	; 0x3f
 80071c8:	d803      	bhi.n	80071d2 <USBD_CDC_Setup+0xa6>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	88db      	ldrh	r3, [r3, #6]
 80071ce:	b2da      	uxtb	r2, r3
 80071d0:	e000      	b.n	80071d4 <USBD_CDC_Setup+0xa8>
 80071d2:	2240      	movs	r2, #64	; 0x40
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80071da:	6939      	ldr	r1, [r7, #16]
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80071e2:	461a      	mov	r2, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f001 fd9b 	bl	8008d20 <USBD_CtlPrepareRx>
      break;
 80071ea:	e076      	b.n	80072da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	33b0      	adds	r3, #176	; 0xb0
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	7850      	ldrb	r0, [r2, #1]
 8007202:	2200      	movs	r2, #0
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	4798      	blx	r3
      break;
 8007208:	e067      	b.n	80072da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	785b      	ldrb	r3, [r3, #1]
 800720e:	2b0b      	cmp	r3, #11
 8007210:	d851      	bhi.n	80072b6 <USBD_CDC_Setup+0x18a>
 8007212:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <USBD_CDC_Setup+0xec>)
 8007214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007218:	08007249 	.word	0x08007249
 800721c:	080072c5 	.word	0x080072c5
 8007220:	080072b7 	.word	0x080072b7
 8007224:	080072b7 	.word	0x080072b7
 8007228:	080072b7 	.word	0x080072b7
 800722c:	080072b7 	.word	0x080072b7
 8007230:	080072b7 	.word	0x080072b7
 8007234:	080072b7 	.word	0x080072b7
 8007238:	080072b7 	.word	0x080072b7
 800723c:	080072b7 	.word	0x080072b7
 8007240:	08007273 	.word	0x08007273
 8007244:	0800729d 	.word	0x0800729d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b03      	cmp	r3, #3
 8007252:	d107      	bne.n	8007264 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007254:	f107 030a 	add.w	r3, r7, #10
 8007258:	2202      	movs	r2, #2
 800725a:	4619      	mov	r1, r3
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 fd33 	bl	8008cc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007262:	e032      	b.n	80072ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007264:	6839      	ldr	r1, [r7, #0]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f001 fcbd 	bl	8008be6 <USBD_CtlError>
            ret = USBD_FAIL;
 800726c:	2303      	movs	r3, #3
 800726e:	75fb      	strb	r3, [r7, #23]
          break;
 8007270:	e02b      	b.n	80072ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b03      	cmp	r3, #3
 800727c:	d107      	bne.n	800728e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800727e:	f107 030d 	add.w	r3, r7, #13
 8007282:	2201      	movs	r2, #1
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f001 fd1e 	bl	8008cc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800728c:	e01d      	b.n	80072ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 fca8 	bl	8008be6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007296:	2303      	movs	r3, #3
 8007298:	75fb      	strb	r3, [r7, #23]
          break;
 800729a:	e016      	b.n	80072ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d00f      	beq.n	80072c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 fc9b 	bl	8008be6 <USBD_CtlError>
            ret = USBD_FAIL;
 80072b0:	2303      	movs	r3, #3
 80072b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80072b4:	e008      	b.n	80072c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 fc94 	bl	8008be6 <USBD_CtlError>
          ret = USBD_FAIL;
 80072be:	2303      	movs	r3, #3
 80072c0:	75fb      	strb	r3, [r7, #23]
          break;
 80072c2:	e002      	b.n	80072ca <USBD_CDC_Setup+0x19e>
          break;
 80072c4:	bf00      	nop
 80072c6:	e008      	b.n	80072da <USBD_CDC_Setup+0x1ae>
          break;
 80072c8:	bf00      	nop
      }
      break;
 80072ca:	e006      	b.n	80072da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 fc89 	bl	8008be6 <USBD_CtlError>
      ret = USBD_FAIL;
 80072d4:	2303      	movs	r3, #3
 80072d6:	75fb      	strb	r3, [r7, #23]
      break;
 80072d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80072da:	7dfb      	ldrb	r3, [r7, #23]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80072f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	32b0      	adds	r2, #176	; 0xb0
 8007302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800730a:	2303      	movs	r3, #3
 800730c:	e065      	b.n	80073da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	32b0      	adds	r2, #176	; 0xb0
 8007318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	f003 020f 	and.w	r2, r3, #15
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	440b      	add	r3, r1
 8007330:	3318      	adds	r3, #24
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d02f      	beq.n	8007398 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	f003 020f 	and.w	r2, r3, #15
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	440b      	add	r3, r1
 800734a:	3318      	adds	r3, #24
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	f003 010f 	and.w	r1, r3, #15
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	460b      	mov	r3, r1
 8007358:	00db      	lsls	r3, r3, #3
 800735a:	440b      	add	r3, r1
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4403      	add	r3, r0
 8007360:	3348      	adds	r3, #72	; 0x48
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	fbb2 f1f3 	udiv	r1, r2, r3
 8007368:	fb01 f303 	mul.w	r3, r1, r3
 800736c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800736e:	2b00      	cmp	r3, #0
 8007370:	d112      	bne.n	8007398 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007372:	78fb      	ldrb	r3, [r7, #3]
 8007374:	f003 020f 	and.w	r2, r3, #15
 8007378:	6879      	ldr	r1, [r7, #4]
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	440b      	add	r3, r1
 8007384:	3318      	adds	r3, #24
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800738a:	78f9      	ldrb	r1, [r7, #3]
 800738c:	2300      	movs	r3, #0
 800738e:	2200      	movs	r2, #0
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f002 f990 	bl	80096b6 <USBD_LL_Transmit>
 8007396:	e01f      	b.n	80073d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	33b0      	adds	r3, #176	; 0xb0
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d010      	beq.n	80073d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	33b0      	adds	r3, #176	; 0xb0
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80073d4:	78fa      	ldrb	r2, [r7, #3]
 80073d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	460b      	mov	r3, r1
 80073ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	32b0      	adds	r2, #176	; 0xb0
 80073f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	32b0      	adds	r2, #176	; 0xb0
 8007408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007410:	2303      	movs	r3, #3
 8007412:	e01a      	b.n	800744a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f002 f98e 	bl	800973a <USBD_LL_GetRxDataSize>
 800741e:	4602      	mov	r2, r0
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	33b0      	adds	r3, #176	; 0xb0
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007444:	4611      	mov	r1, r2
 8007446:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	32b0      	adds	r2, #176	; 0xb0
 8007464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007468:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007470:	2303      	movs	r3, #3
 8007472:	e025      	b.n	80074c0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	33b0      	adds	r3, #176	; 0xb0
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01a      	beq.n	80074be <USBD_CDC_EP0_RxReady+0x6c>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800748e:	2bff      	cmp	r3, #255	; 0xff
 8007490:	d015      	beq.n	80074be <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	33b0      	adds	r3, #176	; 0xb0
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80074aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074b2:	b292      	uxth	r2, r2
 80074b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	22ff      	movs	r2, #255	; 0xff
 80074ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074d0:	2182      	movs	r1, #130	; 0x82
 80074d2:	4818      	ldr	r0, [pc, #96]	; (8007534 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074d4:	f000 fd4f 	bl	8007f76 <USBD_GetEpDesc>
 80074d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074da:	2101      	movs	r1, #1
 80074dc:	4815      	ldr	r0, [pc, #84]	; (8007534 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074de:	f000 fd4a 	bl	8007f76 <USBD_GetEpDesc>
 80074e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074e4:	2181      	movs	r1, #129	; 0x81
 80074e6:	4813      	ldr	r0, [pc, #76]	; (8007534 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80074e8:	f000 fd45 	bl	8007f76 <USBD_GetEpDesc>
 80074ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	2210      	movs	r2, #16
 80074f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d006      	beq.n	800750e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2200      	movs	r2, #0
 8007504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007508:	711a      	strb	r2, [r3, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d006      	beq.n	8007522 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800751c:	711a      	strb	r2, [r3, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2243      	movs	r2, #67	; 0x43
 8007526:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007528:	4b02      	ldr	r3, [pc, #8]	; (8007534 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800752a:	4618      	mov	r0, r3
 800752c:	3718      	adds	r7, #24
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	20000050 	.word	0x20000050

08007538 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007540:	2182      	movs	r1, #130	; 0x82
 8007542:	4818      	ldr	r0, [pc, #96]	; (80075a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007544:	f000 fd17 	bl	8007f76 <USBD_GetEpDesc>
 8007548:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800754a:	2101      	movs	r1, #1
 800754c:	4815      	ldr	r0, [pc, #84]	; (80075a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800754e:	f000 fd12 	bl	8007f76 <USBD_GetEpDesc>
 8007552:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007554:	2181      	movs	r1, #129	; 0x81
 8007556:	4813      	ldr	r0, [pc, #76]	; (80075a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007558:	f000 fd0d 	bl	8007f76 <USBD_GetEpDesc>
 800755c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	2210      	movs	r2, #16
 8007568:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d006      	beq.n	800757e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	2200      	movs	r2, #0
 8007574:	711a      	strb	r2, [r3, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f042 0202 	orr.w	r2, r2, #2
 800757c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d006      	beq.n	8007592 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	711a      	strb	r2, [r3, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f042 0202 	orr.w	r2, r2, #2
 8007590:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2243      	movs	r2, #67	; 0x43
 8007596:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007598:	4b02      	ldr	r3, [pc, #8]	; (80075a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20000050 	.word	0x20000050

080075a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075b0:	2182      	movs	r1, #130	; 0x82
 80075b2:	4818      	ldr	r0, [pc, #96]	; (8007614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075b4:	f000 fcdf 	bl	8007f76 <USBD_GetEpDesc>
 80075b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075ba:	2101      	movs	r1, #1
 80075bc:	4815      	ldr	r0, [pc, #84]	; (8007614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075be:	f000 fcda 	bl	8007f76 <USBD_GetEpDesc>
 80075c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075c4:	2181      	movs	r1, #129	; 0x81
 80075c6:	4813      	ldr	r0, [pc, #76]	; (8007614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075c8:	f000 fcd5 	bl	8007f76 <USBD_GetEpDesc>
 80075cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	2210      	movs	r2, #16
 80075d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d006      	beq.n	80075ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075e8:	711a      	strb	r2, [r3, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d006      	beq.n	8007602 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075fc:	711a      	strb	r2, [r3, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2243      	movs	r2, #67	; 0x43
 8007606:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007608:	4b02      	ldr	r3, [pc, #8]	; (8007614 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000050 	.word	0x20000050

08007618 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	220a      	movs	r2, #10
 8007624:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007626:	4b03      	ldr	r3, [pc, #12]	; (8007634 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	2000000c 	.word	0x2000000c

08007638 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007648:	2303      	movs	r3, #3
 800764a:	e009      	b.n	8007660 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	33b0      	adds	r3, #176	; 0xb0
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	32b0      	adds	r2, #176	; 0xb0
 8007682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007686:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800768e:	2303      	movs	r3, #3
 8007690:	e008      	b.n	80076a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	371c      	adds	r7, #28
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	32b0      	adds	r2, #176	; 0xb0
 80076c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e004      	b.n	80076de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
	...

080076ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	32b0      	adds	r2, #176	; 0xb0
 80076fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007702:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007704:	2301      	movs	r3, #1
 8007706:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	32b0      	adds	r2, #176	; 0xb0
 8007712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800771a:	2303      	movs	r3, #3
 800771c:	e025      	b.n	800776a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007724:	2b00      	cmp	r3, #0
 8007726:	d11f      	bne.n	8007768 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2201      	movs	r2, #1
 800772c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007730:	4b10      	ldr	r3, [pc, #64]	; (8007774 <USBD_CDC_TransmitPacket+0x88>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	f003 020f 	and.w	r2, r3, #15
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4613      	mov	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4403      	add	r3, r0
 800774a:	3318      	adds	r3, #24
 800774c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800774e:	4b09      	ldr	r3, [pc, #36]	; (8007774 <USBD_CDC_TransmitPacket+0x88>)
 8007750:	7819      	ldrb	r1, [r3, #0]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 ffa9 	bl	80096b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007768:	7bfb      	ldrb	r3, [r7, #15]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	20000093 	.word	0x20000093

08007778 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	32b0      	adds	r2, #176	; 0xb0
 800778a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	32b0      	adds	r2, #176	; 0xb0
 800779a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e018      	b.n	80077d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	7c1b      	ldrb	r3, [r3, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10a      	bne.n	80077c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077ae:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <USBD_CDC_ReceivePacket+0x68>)
 80077b0:	7819      	ldrb	r1, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 ff9b 	bl	80096f8 <USBD_LL_PrepareReceive>
 80077c2:	e008      	b.n	80077d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80077c4:	4b06      	ldr	r3, [pc, #24]	; (80077e0 <USBD_CDC_ReceivePacket+0x68>)
 80077c6:	7819      	ldrb	r1, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80077ce:	2340      	movs	r3, #64	; 0x40
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 ff91 	bl	80096f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20000094 	.word	0x20000094

080077e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b086      	sub	sp, #24
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	4613      	mov	r3, r2
 80077f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e01f      	b.n	800783c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	79fa      	ldrb	r2, [r7, #7]
 800782e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f001 fe0b 	bl	800944c <USBD_LL_Init>
 8007836:	4603      	mov	r3, r0
 8007838:	75fb      	strb	r3, [r7, #23]

  return ret;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3718      	adds	r7, #24
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007858:	2303      	movs	r3, #3
 800785a:	e025      	b.n	80078a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	32ae      	adds	r2, #174	; 0xae
 800786e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00f      	beq.n	8007898 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	32ae      	adds	r2, #174	; 0xae
 8007882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	f107 020e 	add.w	r2, r7, #14
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
 8007890:	4602      	mov	r2, r0
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f001 fe13 	bl	80094e4 <USBD_LL_Start>
 80078be:	4603      	mov	r3, r0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b084      	sub	sp, #16
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	460b      	mov	r3, r1
 80078e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d009      	beq.n	800790c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	78fa      	ldrb	r2, [r7, #3]
 8007902:	4611      	mov	r1, r2
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	4798      	blx	r3
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800790c:	7bfb      	ldrb	r3, [r7, #15]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	460b      	mov	r3, r1
 8007920:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	78fa      	ldrb	r2, [r7, #3]
 8007930:	4611      	mov	r1, r2
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800793c:	2303      	movs	r3, #3
 800793e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b084      	sub	sp, #16
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	f001 f908 	bl	8008b72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007970:	461a      	mov	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800797e:	f003 031f 	and.w	r3, r3, #31
 8007982:	2b02      	cmp	r3, #2
 8007984:	d01a      	beq.n	80079bc <USBD_LL_SetupStage+0x72>
 8007986:	2b02      	cmp	r3, #2
 8007988:	d822      	bhi.n	80079d0 <USBD_LL_SetupStage+0x86>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <USBD_LL_SetupStage+0x4a>
 800798e:	2b01      	cmp	r3, #1
 8007990:	d00a      	beq.n	80079a8 <USBD_LL_SetupStage+0x5e>
 8007992:	e01d      	b.n	80079d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fb5f 	bl	8008060 <USBD_StdDevReq>
 80079a2:	4603      	mov	r3, r0
 80079a4:	73fb      	strb	r3, [r7, #15]
      break;
 80079a6:	e020      	b.n	80079ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fbc7 	bl	8008144 <USBD_StdItfReq>
 80079b6:	4603      	mov	r3, r0
 80079b8:	73fb      	strb	r3, [r7, #15]
      break;
 80079ba:	e016      	b.n	80079ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fc29 	bl	800821c <USBD_StdEPReq>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73fb      	strb	r3, [r7, #15]
      break;
 80079ce:	e00c      	b.n	80079ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f001 fde0 	bl	80095a4 <USBD_LL_StallEP>
 80079e4:	4603      	mov	r3, r0
 80079e6:	73fb      	strb	r3, [r7, #15]
      break;
 80079e8:	bf00      	nop
  }

  return ret;
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	460b      	mov	r3, r1
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007a06:	7afb      	ldrb	r3, [r7, #11]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d16e      	bne.n	8007aea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007a12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	f040 8098 	bne.w	8007b50 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	689a      	ldr	r2, [r3, #8]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d913      	bls.n	8007a54 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	1ad2      	subs	r2, r2, r3
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	4293      	cmp	r3, r2
 8007a44:	bf28      	it	cs
 8007a46:	4613      	movcs	r3, r2
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f001 f984 	bl	8008d5a <USBD_CtlContinueRx>
 8007a52:	e07d      	b.n	8007b50 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a5a:	f003 031f 	and.w	r3, r3, #31
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d014      	beq.n	8007a8c <USBD_LL_DataOutStage+0x98>
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d81d      	bhi.n	8007aa2 <USBD_LL_DataOutStage+0xae>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <USBD_LL_DataOutStage+0x7c>
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d003      	beq.n	8007a76 <USBD_LL_DataOutStage+0x82>
 8007a6e:	e018      	b.n	8007aa2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	75bb      	strb	r3, [r7, #22]
            break;
 8007a74:	e018      	b.n	8007aa8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 fa5e 	bl	8007f42 <USBD_CoreFindIF>
 8007a86:	4603      	mov	r3, r0
 8007a88:	75bb      	strb	r3, [r7, #22]
            break;
 8007a8a:	e00d      	b.n	8007aa8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	4619      	mov	r1, r3
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 fa60 	bl	8007f5c <USBD_CoreFindEP>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	75bb      	strb	r3, [r7, #22]
            break;
 8007aa0:	e002      	b.n	8007aa8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	75bb      	strb	r3, [r7, #22]
            break;
 8007aa6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007aa8:	7dbb      	ldrb	r3, [r7, #22]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d119      	bne.n	8007ae2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d113      	bne.n	8007ae2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007aba:	7dba      	ldrb	r2, [r7, #22]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	32ae      	adds	r2, #174	; 0xae
 8007ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007aca:	7dba      	ldrb	r2, [r7, #22]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007ad2:	7dba      	ldrb	r2, [r7, #22]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	32ae      	adds	r2, #174	; 0xae
 8007ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f001 f94a 	bl	8008d7c <USBD_CtlSendStatus>
 8007ae8:	e032      	b.n	8007b50 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007aea:	7afb      	ldrb	r3, [r7, #11]
 8007aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	4619      	mov	r1, r3
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 fa31 	bl	8007f5c <USBD_CoreFindEP>
 8007afa:	4603      	mov	r3, r0
 8007afc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007afe:	7dbb      	ldrb	r3, [r7, #22]
 8007b00:	2bff      	cmp	r3, #255	; 0xff
 8007b02:	d025      	beq.n	8007b50 <USBD_LL_DataOutStage+0x15c>
 8007b04:	7dbb      	ldrb	r3, [r7, #22]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d122      	bne.n	8007b50 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d117      	bne.n	8007b46 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007b16:	7dba      	ldrb	r2, [r7, #22]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	32ae      	adds	r2, #174	; 0xae
 8007b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00f      	beq.n	8007b46 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007b26:	7dba      	ldrb	r2, [r7, #22]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007b2e:	7dba      	ldrb	r2, [r7, #22]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	32ae      	adds	r2, #174	; 0xae
 8007b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	7afa      	ldrb	r2, [r7, #11]
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	4798      	blx	r3
 8007b42:	4603      	mov	r3, r0
 8007b44:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	e000      	b.n	8007b52 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b086      	sub	sp, #24
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	460b      	mov	r3, r1
 8007b64:	607a      	str	r2, [r7, #4]
 8007b66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007b68:	7afb      	ldrb	r3, [r7, #11]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d16f      	bne.n	8007c4e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3314      	adds	r3, #20
 8007b72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d15a      	bne.n	8007c34 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	689a      	ldr	r2, [r3, #8]
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d914      	bls.n	8007bb4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	1ad2      	subs	r2, r2, r3
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f001 f8ac 	bl	8008cfe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2100      	movs	r1, #0
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f001 fda3 	bl	80096f8 <USBD_LL_PrepareReceive>
 8007bb2:	e03f      	b.n	8007c34 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	68da      	ldr	r2, [r3, #12]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d11c      	bne.n	8007bfa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	685a      	ldr	r2, [r3, #4]
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d316      	bcc.n	8007bfa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d20f      	bcs.n	8007bfa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2100      	movs	r1, #0
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f001 f88d 	bl	8008cfe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bec:	2300      	movs	r3, #0
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f001 fd80 	bl	80096f8 <USBD_LL_PrepareReceive>
 8007bf8:	e01c      	b.n	8007c34 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d10f      	bne.n	8007c26 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d009      	beq.n	8007c26 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c26:	2180      	movs	r1, #128	; 0x80
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f001 fcbb 	bl	80095a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f001 f8b7 	bl	8008da2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d03a      	beq.n	8007cb4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7ff fe42 	bl	80078c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007c4c:	e032      	b.n	8007cb4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007c4e:	7afb      	ldrb	r3, [r7, #11]
 8007c50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	4619      	mov	r1, r3
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 f97f 	bl	8007f5c <USBD_CoreFindEP>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	2bff      	cmp	r3, #255	; 0xff
 8007c66:	d025      	beq.n	8007cb4 <USBD_LL_DataInStage+0x15a>
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d122      	bne.n	8007cb4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d11c      	bne.n	8007cb4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c7a:	7dfa      	ldrb	r2, [r7, #23]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	32ae      	adds	r2, #174	; 0xae
 8007c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d014      	beq.n	8007cb4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c8a:	7dfa      	ldrb	r2, [r7, #23]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c92:	7dfa      	ldrb	r2, [r7, #23]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	32ae      	adds	r2, #174	; 0xae
 8007c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	7afa      	ldrb	r2, [r7, #11]
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	4798      	blx	r3
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007caa:	7dbb      	ldrb	r3, [r7, #22]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007cb0:	7dbb      	ldrb	r3, [r7, #22]
 8007cb2:	e000      	b.n	8007cb6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d014      	beq.n	8007d24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00e      	beq.n	8007d24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6852      	ldr	r2, [r2, #4]
 8007d12:	b2d2      	uxtb	r2, r2
 8007d14:	4611      	mov	r1, r2
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	4798      	blx	r3
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007d20:	2303      	movs	r3, #3
 8007d22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d24:	2340      	movs	r3, #64	; 0x40
 8007d26:	2200      	movs	r2, #0
 8007d28:	2100      	movs	r1, #0
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 fbf5 	bl	800951a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2240      	movs	r2, #64	; 0x40
 8007d3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d40:	2340      	movs	r3, #64	; 0x40
 8007d42:	2200      	movs	r2, #0
 8007d44:	2180      	movs	r1, #128	; 0x80
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f001 fbe7 	bl	800951a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2240      	movs	r2, #64	; 0x40
 8007d56:	621a      	str	r2, [r3, #32]

  return ret;
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	78fa      	ldrb	r2, [r7, #3]
 8007d72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2204      	movs	r2, #4
 8007d9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b04      	cmp	r3, #4
 8007dc0:	d106      	bne.n	8007dd0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d110      	bne.n	8007e14 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e02:	69db      	ldr	r3, [r3, #28]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d005      	beq.n	8007e14 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	460b      	mov	r3, r1
 8007e28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	32ae      	adds	r2, #174	; 0xae
 8007e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e01c      	b.n	8007e7a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b03      	cmp	r3, #3
 8007e4a:	d115      	bne.n	8007e78 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	32ae      	adds	r2, #174	; 0xae
 8007e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00b      	beq.n	8007e78 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	32ae      	adds	r2, #174	; 0xae
 8007e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	78fa      	ldrb	r2, [r7, #3]
 8007e72:	4611      	mov	r1, r2
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b082      	sub	sp, #8
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	32ae      	adds	r2, #174	; 0xae
 8007e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e01c      	b.n	8007ede <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d115      	bne.n	8007edc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	32ae      	adds	r2, #174	; 0xae
 8007eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00b      	beq.n	8007edc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	32ae      	adds	r2, #174	; 0xae
 8007ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	78fa      	ldrb	r2, [r7, #3]
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00e      	beq.n	8007f38 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	6852      	ldr	r2, [r2, #4]
 8007f26:	b2d2      	uxtb	r2, r2
 8007f28:	4611      	mov	r1, r2
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007f34:	2303      	movs	r3, #3
 8007f36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f4e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f68:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b086      	sub	sp, #24
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	460b      	mov	r3, r1
 8007f80:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	885b      	ldrh	r3, [r3, #2]
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d920      	bls.n	8007fe0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007fa6:	e013      	b.n	8007fd0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007fa8:	f107 030a 	add.w	r3, r7, #10
 8007fac:	4619      	mov	r1, r3
 8007fae:	6978      	ldr	r0, [r7, #20]
 8007fb0:	f000 f81b 	bl	8007fea <USBD_GetNextDesc>
 8007fb4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	785b      	ldrb	r3, [r3, #1]
 8007fba:	2b05      	cmp	r3, #5
 8007fbc:	d108      	bne.n	8007fd0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	789b      	ldrb	r3, [r3, #2]
 8007fc6:	78fa      	ldrb	r2, [r7, #3]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d008      	beq.n	8007fde <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	885b      	ldrh	r3, [r3, #2]
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	897b      	ldrh	r3, [r7, #10]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d8e5      	bhi.n	8007fa8 <USBD_GetEpDesc+0x32>
 8007fdc:	e000      	b.n	8007fe0 <USBD_GetEpDesc+0x6a>
          break;
 8007fde:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007fe0:	693b      	ldr	r3, [r7, #16]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b085      	sub	sp, #20
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	881a      	ldrh	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	b29b      	uxth	r3, r3
 8008002:	4413      	add	r3, r2
 8008004:	b29a      	uxth	r2, r3
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4413      	add	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008016:	68fb      	ldr	r3, [r7, #12]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	3301      	adds	r3, #1
 800803a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008042:	8a3b      	ldrh	r3, [r7, #16]
 8008044:	021b      	lsls	r3, r3, #8
 8008046:	b21a      	sxth	r2, r3
 8008048:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800804c:	4313      	orrs	r3, r2
 800804e:	b21b      	sxth	r3, r3
 8008050:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008052:	89fb      	ldrh	r3, [r7, #14]
}
 8008054:	4618      	mov	r0, r3
 8008056:	371c      	adds	r7, #28
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008076:	2b40      	cmp	r3, #64	; 0x40
 8008078:	d005      	beq.n	8008086 <USBD_StdDevReq+0x26>
 800807a:	2b40      	cmp	r3, #64	; 0x40
 800807c:	d857      	bhi.n	800812e <USBD_StdDevReq+0xce>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00f      	beq.n	80080a2 <USBD_StdDevReq+0x42>
 8008082:	2b20      	cmp	r3, #32
 8008084:	d153      	bne.n	800812e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	32ae      	adds	r2, #174	; 0xae
 8008090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	4798      	blx	r3
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]
      break;
 80080a0:	e04a      	b.n	8008138 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	785b      	ldrb	r3, [r3, #1]
 80080a6:	2b09      	cmp	r3, #9
 80080a8:	d83b      	bhi.n	8008122 <USBD_StdDevReq+0xc2>
 80080aa:	a201      	add	r2, pc, #4	; (adr r2, 80080b0 <USBD_StdDevReq+0x50>)
 80080ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b0:	08008105 	.word	0x08008105
 80080b4:	08008119 	.word	0x08008119
 80080b8:	08008123 	.word	0x08008123
 80080bc:	0800810f 	.word	0x0800810f
 80080c0:	08008123 	.word	0x08008123
 80080c4:	080080e3 	.word	0x080080e3
 80080c8:	080080d9 	.word	0x080080d9
 80080cc:	08008123 	.word	0x08008123
 80080d0:	080080fb 	.word	0x080080fb
 80080d4:	080080ed 	.word	0x080080ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 fa3c 	bl	8008558 <USBD_GetDescriptor>
          break;
 80080e0:	e024      	b.n	800812c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fba1 	bl	800882c <USBD_SetAddress>
          break;
 80080ea:	e01f      	b.n	800812c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fbe0 	bl	80088b4 <USBD_SetConfig>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]
          break;
 80080f8:	e018      	b.n	800812c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fc83 	bl	8008a08 <USBD_GetConfig>
          break;
 8008102:	e013      	b.n	800812c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fcb4 	bl	8008a74 <USBD_GetStatus>
          break;
 800810c:	e00e      	b.n	800812c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fce3 	bl	8008adc <USBD_SetFeature>
          break;
 8008116:	e009      	b.n	800812c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fd07 	bl	8008b2e <USBD_ClrFeature>
          break;
 8008120:	e004      	b.n	800812c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fd5e 	bl	8008be6 <USBD_CtlError>
          break;
 800812a:	bf00      	nop
      }
      break;
 800812c:	e004      	b.n	8008138 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fd58 	bl	8008be6 <USBD_CtlError>
      break;
 8008136:	bf00      	nop
  }

  return ret;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop

08008144 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800815a:	2b40      	cmp	r3, #64	; 0x40
 800815c:	d005      	beq.n	800816a <USBD_StdItfReq+0x26>
 800815e:	2b40      	cmp	r3, #64	; 0x40
 8008160:	d852      	bhi.n	8008208 <USBD_StdItfReq+0xc4>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <USBD_StdItfReq+0x26>
 8008166:	2b20      	cmp	r3, #32
 8008168:	d14e      	bne.n	8008208 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008170:	b2db      	uxtb	r3, r3
 8008172:	3b01      	subs	r3, #1
 8008174:	2b02      	cmp	r3, #2
 8008176:	d840      	bhi.n	80081fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	889b      	ldrh	r3, [r3, #4]
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b01      	cmp	r3, #1
 8008180:	d836      	bhi.n	80081f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	889b      	ldrh	r3, [r3, #4]
 8008186:	b2db      	uxtb	r3, r3
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff fed9 	bl	8007f42 <USBD_CoreFindIF>
 8008190:	4603      	mov	r3, r0
 8008192:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	2bff      	cmp	r3, #255	; 0xff
 8008198:	d01d      	beq.n	80081d6 <USBD_StdItfReq+0x92>
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d11a      	bne.n	80081d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80081a0:	7bba      	ldrb	r2, [r7, #14]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	32ae      	adds	r2, #174	; 0xae
 80081a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00f      	beq.n	80081d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80081b0:	7bba      	ldrb	r2, [r7, #14]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80081b8:	7bba      	ldrb	r2, [r7, #14]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	32ae      	adds	r2, #174	; 0xae
 80081be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	4798      	blx	r3
 80081ca:	4603      	mov	r3, r0
 80081cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081ce:	e004      	b.n	80081da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80081d0:	2303      	movs	r3, #3
 80081d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80081d4:	e001      	b.n	80081da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80081d6:	2303      	movs	r3, #3
 80081d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	88db      	ldrh	r3, [r3, #6]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d110      	bne.n	8008204 <USBD_StdItfReq+0xc0>
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10d      	bne.n	8008204 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fdc7 	bl	8008d7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081ee:	e009      	b.n	8008204 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fcf7 	bl	8008be6 <USBD_CtlError>
          break;
 80081f8:	e004      	b.n	8008204 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fcf2 	bl	8008be6 <USBD_CtlError>
          break;
 8008202:	e000      	b.n	8008206 <USBD_StdItfReq+0xc2>
          break;
 8008204:	bf00      	nop
      }
      break;
 8008206:	e004      	b.n	8008212 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fceb 	bl	8008be6 <USBD_CtlError>
      break;
 8008210:	bf00      	nop
  }

  return ret;
 8008212:	7bfb      	ldrb	r3, [r7, #15]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	889b      	ldrh	r3, [r3, #4]
 800822e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008238:	2b40      	cmp	r3, #64	; 0x40
 800823a:	d007      	beq.n	800824c <USBD_StdEPReq+0x30>
 800823c:	2b40      	cmp	r3, #64	; 0x40
 800823e:	f200 817f 	bhi.w	8008540 <USBD_StdEPReq+0x324>
 8008242:	2b00      	cmp	r3, #0
 8008244:	d02a      	beq.n	800829c <USBD_StdEPReq+0x80>
 8008246:	2b20      	cmp	r3, #32
 8008248:	f040 817a 	bne.w	8008540 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800824c:	7bbb      	ldrb	r3, [r7, #14]
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7ff fe83 	bl	8007f5c <USBD_CoreFindEP>
 8008256:	4603      	mov	r3, r0
 8008258:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800825a:	7b7b      	ldrb	r3, [r7, #13]
 800825c:	2bff      	cmp	r3, #255	; 0xff
 800825e:	f000 8174 	beq.w	800854a <USBD_StdEPReq+0x32e>
 8008262:	7b7b      	ldrb	r3, [r7, #13]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f040 8170 	bne.w	800854a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800826a:	7b7a      	ldrb	r2, [r7, #13]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008272:	7b7a      	ldrb	r2, [r7, #13]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	32ae      	adds	r2, #174	; 0xae
 8008278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	f000 8163 	beq.w	800854a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008284:	7b7a      	ldrb	r2, [r7, #13]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	32ae      	adds	r2, #174	; 0xae
 800828a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	4798      	blx	r3
 8008296:	4603      	mov	r3, r0
 8008298:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800829a:	e156      	b.n	800854a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	785b      	ldrb	r3, [r3, #1]
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d008      	beq.n	80082b6 <USBD_StdEPReq+0x9a>
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	f300 8145 	bgt.w	8008534 <USBD_StdEPReq+0x318>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 809b 	beq.w	80083e6 <USBD_StdEPReq+0x1ca>
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d03c      	beq.n	800832e <USBD_StdEPReq+0x112>
 80082b4:	e13e      	b.n	8008534 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d002      	beq.n	80082c8 <USBD_StdEPReq+0xac>
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d016      	beq.n	80082f4 <USBD_StdEPReq+0xd8>
 80082c6:	e02c      	b.n	8008322 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00d      	beq.n	80082ea <USBD_StdEPReq+0xce>
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	2b80      	cmp	r3, #128	; 0x80
 80082d2:	d00a      	beq.n	80082ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 f963 	bl	80095a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082de:	2180      	movs	r1, #128	; 0x80
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 f95f 	bl	80095a4 <USBD_LL_StallEP>
 80082e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082e8:	e020      	b.n	800832c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fc7a 	bl	8008be6 <USBD_CtlError>
              break;
 80082f2:	e01b      	b.n	800832c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	885b      	ldrh	r3, [r3, #2]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10e      	bne.n	800831a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00b      	beq.n	800831a <USBD_StdEPReq+0xfe>
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	2b80      	cmp	r3, #128	; 0x80
 8008306:	d008      	beq.n	800831a <USBD_StdEPReq+0xfe>
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	88db      	ldrh	r3, [r3, #6]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f001 f945 	bl	80095a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 fd2e 	bl	8008d7c <USBD_CtlSendStatus>

              break;
 8008320:	e004      	b.n	800832c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fc5e 	bl	8008be6 <USBD_CtlError>
              break;
 800832a:	bf00      	nop
          }
          break;
 800832c:	e107      	b.n	800853e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008334:	b2db      	uxtb	r3, r3
 8008336:	2b02      	cmp	r3, #2
 8008338:	d002      	beq.n	8008340 <USBD_StdEPReq+0x124>
 800833a:	2b03      	cmp	r3, #3
 800833c:	d016      	beq.n	800836c <USBD_StdEPReq+0x150>
 800833e:	e04b      	b.n	80083d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00d      	beq.n	8008362 <USBD_StdEPReq+0x146>
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b80      	cmp	r3, #128	; 0x80
 800834a:	d00a      	beq.n	8008362 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 f927 	bl	80095a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008356:	2180      	movs	r1, #128	; 0x80
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 f923 	bl	80095a4 <USBD_LL_StallEP>
 800835e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008360:	e040      	b.n	80083e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008362:	6839      	ldr	r1, [r7, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fc3e 	bl	8008be6 <USBD_CtlError>
              break;
 800836a:	e03b      	b.n	80083e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	885b      	ldrh	r3, [r3, #2]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d136      	bne.n	80083e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800837a:	2b00      	cmp	r3, #0
 800837c:	d004      	beq.n	8008388 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f001 f92d 	bl	80095e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fcf7 	bl	8008d7c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff fde2 	bl	8007f5c <USBD_CoreFindEP>
 8008398:	4603      	mov	r3, r0
 800839a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800839c:	7b7b      	ldrb	r3, [r7, #13]
 800839e:	2bff      	cmp	r3, #255	; 0xff
 80083a0:	d01f      	beq.n	80083e2 <USBD_StdEPReq+0x1c6>
 80083a2:	7b7b      	ldrb	r3, [r7, #13]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d11c      	bne.n	80083e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80083a8:	7b7a      	ldrb	r2, [r7, #13]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80083b0:	7b7a      	ldrb	r2, [r7, #13]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	32ae      	adds	r2, #174	; 0xae
 80083b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d010      	beq.n	80083e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083c0:	7b7a      	ldrb	r2, [r7, #13]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	32ae      	adds	r2, #174	; 0xae
 80083c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	4798      	blx	r3
 80083d2:	4603      	mov	r3, r0
 80083d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80083d6:	e004      	b.n	80083e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fc03 	bl	8008be6 <USBD_CtlError>
              break;
 80083e0:	e000      	b.n	80083e4 <USBD_StdEPReq+0x1c8>
              break;
 80083e2:	bf00      	nop
          }
          break;
 80083e4:	e0ab      	b.n	800853e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d002      	beq.n	80083f8 <USBD_StdEPReq+0x1dc>
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d032      	beq.n	800845c <USBD_StdEPReq+0x240>
 80083f6:	e097      	b.n	8008528 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d007      	beq.n	800840e <USBD_StdEPReq+0x1f2>
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	2b80      	cmp	r3, #128	; 0x80
 8008402:	d004      	beq.n	800840e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fbed 	bl	8008be6 <USBD_CtlError>
                break;
 800840c:	e091      	b.n	8008532 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800840e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008412:	2b00      	cmp	r3, #0
 8008414:	da0b      	bge.n	800842e <USBD_StdEPReq+0x212>
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	3310      	adds	r3, #16
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	4413      	add	r3, r2
 800842a:	3304      	adds	r3, #4
 800842c:	e00b      	b.n	8008446 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008434:	4613      	mov	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	4413      	add	r3, r2
 8008444:	3304      	adds	r3, #4
 8008446:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2202      	movs	r2, #2
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fc37 	bl	8008cc8 <USBD_CtlSendData>
              break;
 800845a:	e06a      	b.n	8008532 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800845c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008460:	2b00      	cmp	r3, #0
 8008462:	da11      	bge.n	8008488 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	f003 020f 	and.w	r2, r3, #15
 800846a:	6879      	ldr	r1, [r7, #4]
 800846c:	4613      	mov	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	440b      	add	r3, r1
 8008476:	3324      	adds	r3, #36	; 0x24
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d117      	bne.n	80084ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fbb0 	bl	8008be6 <USBD_CtlError>
                  break;
 8008486:	e054      	b.n	8008532 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	f003 020f 	and.w	r2, r3, #15
 800848e:	6879      	ldr	r1, [r7, #4]
 8008490:	4613      	mov	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	440b      	add	r3, r1
 800849a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d104      	bne.n	80084ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fb9d 	bl	8008be6 <USBD_CtlError>
                  break;
 80084ac:	e041      	b.n	8008532 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	da0b      	bge.n	80084ce <USBD_StdEPReq+0x2b2>
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084bc:	4613      	mov	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	3310      	adds	r3, #16
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	4413      	add	r3, r2
 80084ca:	3304      	adds	r3, #4
 80084cc:	e00b      	b.n	80084e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084ce:	7bbb      	ldrb	r3, [r7, #14]
 80084d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084d4:	4613      	mov	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	4413      	add	r3, r2
 80084e4:	3304      	adds	r3, #4
 80084e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d002      	beq.n	80084f4 <USBD_StdEPReq+0x2d8>
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b80      	cmp	r3, #128	; 0x80
 80084f2:	d103      	bne.n	80084fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2200      	movs	r2, #0
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	e00e      	b.n	800851a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
 80084fe:	4619      	mov	r1, r3
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 f88d 	bl	8009620 <USBD_LL_IsStallEP>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2201      	movs	r2, #1
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	e002      	b.n	800851a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2202      	movs	r2, #2
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fbd1 	bl	8008cc8 <USBD_CtlSendData>
              break;
 8008526:	e004      	b.n	8008532 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fb5b 	bl	8008be6 <USBD_CtlError>
              break;
 8008530:	bf00      	nop
          }
          break;
 8008532:	e004      	b.n	800853e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fb55 	bl	8008be6 <USBD_CtlError>
          break;
 800853c:	bf00      	nop
      }
      break;
 800853e:	e005      	b.n	800854c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fb4f 	bl	8008be6 <USBD_CtlError>
      break;
 8008548:	e000      	b.n	800854c <USBD_StdEPReq+0x330>
      break;
 800854a:	bf00      	nop
  }

  return ret;
 800854c:	7bfb      	ldrb	r3, [r7, #15]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
	...

08008558 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008562:	2300      	movs	r3, #0
 8008564:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008566:	2300      	movs	r3, #0
 8008568:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800856a:	2300      	movs	r3, #0
 800856c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	885b      	ldrh	r3, [r3, #2]
 8008572:	0a1b      	lsrs	r3, r3, #8
 8008574:	b29b      	uxth	r3, r3
 8008576:	3b01      	subs	r3, #1
 8008578:	2b06      	cmp	r3, #6
 800857a:	f200 8128 	bhi.w	80087ce <USBD_GetDescriptor+0x276>
 800857e:	a201      	add	r2, pc, #4	; (adr r2, 8008584 <USBD_GetDescriptor+0x2c>)
 8008580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008584:	080085a1 	.word	0x080085a1
 8008588:	080085b9 	.word	0x080085b9
 800858c:	080085f9 	.word	0x080085f9
 8008590:	080087cf 	.word	0x080087cf
 8008594:	080087cf 	.word	0x080087cf
 8008598:	0800876f 	.word	0x0800876f
 800859c:	0800879b 	.word	0x0800879b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	7c12      	ldrb	r2, [r2, #16]
 80085ac:	f107 0108 	add.w	r1, r7, #8
 80085b0:	4610      	mov	r0, r2
 80085b2:	4798      	blx	r3
 80085b4:	60f8      	str	r0, [r7, #12]
      break;
 80085b6:	e112      	b.n	80087de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	7c1b      	ldrb	r3, [r3, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10d      	bne.n	80085dc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c8:	f107 0208 	add.w	r2, r7, #8
 80085cc:	4610      	mov	r0, r2
 80085ce:	4798      	blx	r3
 80085d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3301      	adds	r3, #1
 80085d6:	2202      	movs	r2, #2
 80085d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085da:	e100      	b.n	80087de <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e4:	f107 0208 	add.w	r2, r7, #8
 80085e8:	4610      	mov	r0, r2
 80085ea:	4798      	blx	r3
 80085ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3301      	adds	r3, #1
 80085f2:	2202      	movs	r2, #2
 80085f4:	701a      	strb	r2, [r3, #0]
      break;
 80085f6:	e0f2      	b.n	80087de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	885b      	ldrh	r3, [r3, #2]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b05      	cmp	r3, #5
 8008600:	f200 80ac 	bhi.w	800875c <USBD_GetDescriptor+0x204>
 8008604:	a201      	add	r2, pc, #4	; (adr r2, 800860c <USBD_GetDescriptor+0xb4>)
 8008606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860a:	bf00      	nop
 800860c:	08008625 	.word	0x08008625
 8008610:	08008659 	.word	0x08008659
 8008614:	0800868d 	.word	0x0800868d
 8008618:	080086c1 	.word	0x080086c1
 800861c:	080086f5 	.word	0x080086f5
 8008620:	08008729 	.word	0x08008729
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	7c12      	ldrb	r2, [r2, #16]
 800863c:	f107 0108 	add.w	r1, r7, #8
 8008640:	4610      	mov	r0, r2
 8008642:	4798      	blx	r3
 8008644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008646:	e091      	b.n	800876c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 facb 	bl	8008be6 <USBD_CtlError>
            err++;
 8008650:	7afb      	ldrb	r3, [r7, #11]
 8008652:	3301      	adds	r3, #1
 8008654:	72fb      	strb	r3, [r7, #11]
          break;
 8008656:	e089      	b.n	800876c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00b      	beq.n	800867c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	7c12      	ldrb	r2, [r2, #16]
 8008670:	f107 0108 	add.w	r1, r7, #8
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
 8008678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800867a:	e077      	b.n	800876c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fab1 	bl	8008be6 <USBD_CtlError>
            err++;
 8008684:	7afb      	ldrb	r3, [r7, #11]
 8008686:	3301      	adds	r3, #1
 8008688:	72fb      	strb	r3, [r7, #11]
          break;
 800868a:	e06f      	b.n	800876c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7c12      	ldrb	r2, [r2, #16]
 80086a4:	f107 0108 	add.w	r1, r7, #8
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ae:	e05d      	b.n	800876c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fa97 	bl	8008be6 <USBD_CtlError>
            err++;
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	3301      	adds	r3, #1
 80086bc:	72fb      	strb	r3, [r7, #11]
          break;
 80086be:	e055      	b.n	800876c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	7c12      	ldrb	r2, [r2, #16]
 80086d8:	f107 0108 	add.w	r1, r7, #8
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
 80086e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086e2:	e043      	b.n	800876c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fa7d 	bl	8008be6 <USBD_CtlError>
            err++;
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	3301      	adds	r3, #1
 80086f0:	72fb      	strb	r3, [r7, #11]
          break;
 80086f2:	e03b      	b.n	800876c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086fa:	695b      	ldr	r3, [r3, #20]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	7c12      	ldrb	r2, [r2, #16]
 800870c:	f107 0108 	add.w	r1, r7, #8
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008716:	e029      	b.n	800876c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fa63 	bl	8008be6 <USBD_CtlError>
            err++;
 8008720:	7afb      	ldrb	r3, [r7, #11]
 8008722:	3301      	adds	r3, #1
 8008724:	72fb      	strb	r3, [r7, #11]
          break;
 8008726:	e021      	b.n	800876c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00b      	beq.n	800874c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	7c12      	ldrb	r2, [r2, #16]
 8008740:	f107 0108 	add.w	r1, r7, #8
 8008744:	4610      	mov	r0, r2
 8008746:	4798      	blx	r3
 8008748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800874a:	e00f      	b.n	800876c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fa49 	bl	8008be6 <USBD_CtlError>
            err++;
 8008754:	7afb      	ldrb	r3, [r7, #11]
 8008756:	3301      	adds	r3, #1
 8008758:	72fb      	strb	r3, [r7, #11]
          break;
 800875a:	e007      	b.n	800876c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fa41 	bl	8008be6 <USBD_CtlError>
          err++;
 8008764:	7afb      	ldrb	r3, [r7, #11]
 8008766:	3301      	adds	r3, #1
 8008768:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800876a:	bf00      	nop
      }
      break;
 800876c:	e037      	b.n	80087de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	7c1b      	ldrb	r3, [r3, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d109      	bne.n	800878a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800877c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800877e:	f107 0208 	add.w	r2, r7, #8
 8008782:	4610      	mov	r0, r2
 8008784:	4798      	blx	r3
 8008786:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008788:	e029      	b.n	80087de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fa2a 	bl	8008be6 <USBD_CtlError>
        err++;
 8008792:	7afb      	ldrb	r3, [r7, #11]
 8008794:	3301      	adds	r3, #1
 8008796:	72fb      	strb	r3, [r7, #11]
      break;
 8008798:	e021      	b.n	80087de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	7c1b      	ldrb	r3, [r3, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10d      	bne.n	80087be <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	f107 0208 	add.w	r2, r7, #8
 80087ae:	4610      	mov	r0, r2
 80087b0:	4798      	blx	r3
 80087b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3301      	adds	r3, #1
 80087b8:	2207      	movs	r2, #7
 80087ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80087bc:	e00f      	b.n	80087de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fa10 	bl	8008be6 <USBD_CtlError>
        err++;
 80087c6:	7afb      	ldrb	r3, [r7, #11]
 80087c8:	3301      	adds	r3, #1
 80087ca:	72fb      	strb	r3, [r7, #11]
      break;
 80087cc:	e007      	b.n	80087de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fa08 	bl	8008be6 <USBD_CtlError>
      err++;
 80087d6:	7afb      	ldrb	r3, [r7, #11]
 80087d8:	3301      	adds	r3, #1
 80087da:	72fb      	strb	r3, [r7, #11]
      break;
 80087dc:	bf00      	nop
  }

  if (err != 0U)
 80087de:	7afb      	ldrb	r3, [r7, #11]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d11e      	bne.n	8008822 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	88db      	ldrh	r3, [r3, #6]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d016      	beq.n	800881a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80087ec:	893b      	ldrh	r3, [r7, #8]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00e      	beq.n	8008810 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	88da      	ldrh	r2, [r3, #6]
 80087f6:	893b      	ldrh	r3, [r7, #8]
 80087f8:	4293      	cmp	r3, r2
 80087fa:	bf28      	it	cs
 80087fc:	4613      	movcs	r3, r2
 80087fe:	b29b      	uxth	r3, r3
 8008800:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008802:	893b      	ldrh	r3, [r7, #8]
 8008804:	461a      	mov	r2, r3
 8008806:	68f9      	ldr	r1, [r7, #12]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fa5d 	bl	8008cc8 <USBD_CtlSendData>
 800880e:	e009      	b.n	8008824 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f9e7 	bl	8008be6 <USBD_CtlError>
 8008818:	e004      	b.n	8008824 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 faae 	bl	8008d7c <USBD_CtlSendStatus>
 8008820:	e000      	b.n	8008824 <USBD_GetDescriptor+0x2cc>
    return;
 8008822:	bf00      	nop
  }
}
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop

0800882c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	889b      	ldrh	r3, [r3, #4]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d131      	bne.n	80088a2 <USBD_SetAddress+0x76>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	88db      	ldrh	r3, [r3, #6]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d12d      	bne.n	80088a2 <USBD_SetAddress+0x76>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	2b7f      	cmp	r3, #127	; 0x7f
 800884c:	d829      	bhi.n	80088a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	885b      	ldrh	r3, [r3, #2]
 8008852:	b2db      	uxtb	r3, r3
 8008854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008858:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b03      	cmp	r3, #3
 8008864:	d104      	bne.n	8008870 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008866:	6839      	ldr	r1, [r7, #0]
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f9bc 	bl	8008be6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800886e:	e01d      	b.n	80088ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	7bfa      	ldrb	r2, [r7, #15]
 8008874:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 fefb 	bl	8009678 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa7a 	bl	8008d7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008888:	7bfb      	ldrb	r3, [r7, #15]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d004      	beq.n	8008898 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2202      	movs	r2, #2
 8008892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008896:	e009      	b.n	80088ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a0:	e004      	b.n	80088ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80088a2:	6839      	ldr	r1, [r7, #0]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f99e 	bl	8008be6 <USBD_CtlError>
  }
}
 80088aa:	bf00      	nop
 80088ac:	bf00      	nop
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088be:	2300      	movs	r3, #0
 80088c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	885b      	ldrh	r3, [r3, #2]
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	4b4e      	ldr	r3, [pc, #312]	; (8008a04 <USBD_SetConfig+0x150>)
 80088ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80088cc:	4b4d      	ldr	r3, [pc, #308]	; (8008a04 <USBD_SetConfig+0x150>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d905      	bls.n	80088e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f985 	bl	8008be6 <USBD_CtlError>
    return USBD_FAIL;
 80088dc:	2303      	movs	r3, #3
 80088de:	e08c      	b.n	80089fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d002      	beq.n	80088f2 <USBD_SetConfig+0x3e>
 80088ec:	2b03      	cmp	r3, #3
 80088ee:	d029      	beq.n	8008944 <USBD_SetConfig+0x90>
 80088f0:	e075      	b.n	80089de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80088f2:	4b44      	ldr	r3, [pc, #272]	; (8008a04 <USBD_SetConfig+0x150>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d020      	beq.n	800893c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80088fa:	4b42      	ldr	r3, [pc, #264]	; (8008a04 <USBD_SetConfig+0x150>)
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008904:	4b3f      	ldr	r3, [pc, #252]	; (8008a04 <USBD_SetConfig+0x150>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7fe ffe7 	bl	80078de <USBD_SetClassConfig>
 8008910:	4603      	mov	r3, r0
 8008912:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008914:	7bfb      	ldrb	r3, [r7, #15]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d008      	beq.n	800892c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f962 	bl	8008be6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2202      	movs	r2, #2
 8008926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800892a:	e065      	b.n	80089f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fa25 	bl	8008d7c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2203      	movs	r2, #3
 8008936:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800893a:	e05d      	b.n	80089f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fa1d 	bl	8008d7c <USBD_CtlSendStatus>
      break;
 8008942:	e059      	b.n	80089f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008944:	4b2f      	ldr	r3, [pc, #188]	; (8008a04 <USBD_SetConfig+0x150>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d112      	bne.n	8008972 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2202      	movs	r2, #2
 8008950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008954:	4b2b      	ldr	r3, [pc, #172]	; (8008a04 <USBD_SetConfig+0x150>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	461a      	mov	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800895e:	4b29      	ldr	r3, [pc, #164]	; (8008a04 <USBD_SetConfig+0x150>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7fe ffd6 	bl	8007916 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fa06 	bl	8008d7c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008970:	e042      	b.n	80089f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008972:	4b24      	ldr	r3, [pc, #144]	; (8008a04 <USBD_SetConfig+0x150>)
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	429a      	cmp	r2, r3
 800897e:	d02a      	beq.n	80089d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7fe ffc4 	bl	8007916 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800898e:	4b1d      	ldr	r3, [pc, #116]	; (8008a04 <USBD_SetConfig+0x150>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008998:	4b1a      	ldr	r3, [pc, #104]	; (8008a04 <USBD_SetConfig+0x150>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7fe ff9d 	bl	80078de <USBD_SetClassConfig>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00f      	beq.n	80089ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f918 	bl	8008be6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7fe ffa9 	bl	8007916 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2202      	movs	r2, #2
 80089c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089cc:	e014      	b.n	80089f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f9d4 	bl	8008d7c <USBD_CtlSendStatus>
      break;
 80089d4:	e010      	b.n	80089f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f9d0 	bl	8008d7c <USBD_CtlSendStatus>
      break;
 80089dc:	e00c      	b.n	80089f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f900 	bl	8008be6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80089e6:	4b07      	ldr	r3, [pc, #28]	; (8008a04 <USBD_SetConfig+0x150>)
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7fe ff92 	bl	8007916 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80089f2:	2303      	movs	r3, #3
 80089f4:	73fb      	strb	r3, [r7, #15]
      break;
 80089f6:	bf00      	nop
  }

  return ret;
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20000220 	.word	0x20000220

08008a08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	88db      	ldrh	r3, [r3, #6]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d004      	beq.n	8008a24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f8e2 	bl	8008be6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008a22:	e023      	b.n	8008a6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b02      	cmp	r3, #2
 8008a2e:	dc02      	bgt.n	8008a36 <USBD_GetConfig+0x2e>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dc03      	bgt.n	8008a3c <USBD_GetConfig+0x34>
 8008a34:	e015      	b.n	8008a62 <USBD_GetConfig+0x5a>
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d00b      	beq.n	8008a52 <USBD_GetConfig+0x4a>
 8008a3a:	e012      	b.n	8008a62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3308      	adds	r3, #8
 8008a46:	2201      	movs	r2, #1
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f93c 	bl	8008cc8 <USBD_CtlSendData>
        break;
 8008a50:	e00c      	b.n	8008a6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3304      	adds	r3, #4
 8008a56:	2201      	movs	r2, #1
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f934 	bl	8008cc8 <USBD_CtlSendData>
        break;
 8008a60:	e004      	b.n	8008a6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f8be 	bl	8008be6 <USBD_CtlError>
        break;
 8008a6a:	bf00      	nop
}
 8008a6c:	bf00      	nop
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	3b01      	subs	r3, #1
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d81e      	bhi.n	8008aca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	88db      	ldrh	r3, [r3, #6]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d004      	beq.n	8008a9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f8a5 	bl	8008be6 <USBD_CtlError>
        break;
 8008a9c:	e01a      	b.n	8008ad4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d005      	beq.n	8008aba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f043 0202 	orr.w	r2, r3, #2
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	330c      	adds	r3, #12
 8008abe:	2202      	movs	r2, #2
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f900 	bl	8008cc8 <USBD_CtlSendData>
      break;
 8008ac8:	e004      	b.n	8008ad4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f88a 	bl	8008be6 <USBD_CtlError>
      break;
 8008ad2:	bf00      	nop
  }
}
 8008ad4:	bf00      	nop
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	885b      	ldrh	r3, [r3, #2]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d107      	bne.n	8008afe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f940 	bl	8008d7c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008afc:	e013      	b.n	8008b26 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	885b      	ldrh	r3, [r3, #2]
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d10b      	bne.n	8008b1e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	889b      	ldrh	r3, [r3, #4]
 8008b0a:	0a1b      	lsrs	r3, r3, #8
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	b2da      	uxtb	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f930 	bl	8008d7c <USBD_CtlSendStatus>
}
 8008b1c:	e003      	b.n	8008b26 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f860 	bl	8008be6 <USBD_CtlError>
}
 8008b26:	bf00      	nop
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	3b01      	subs	r3, #1
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d80b      	bhi.n	8008b5e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	885b      	ldrh	r3, [r3, #2]
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d10c      	bne.n	8008b68 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f910 	bl	8008d7c <USBD_CtlSendStatus>
      }
      break;
 8008b5c:	e004      	b.n	8008b68 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f840 	bl	8008be6 <USBD_CtlError>
      break;
 8008b66:	e000      	b.n	8008b6a <USBD_ClrFeature+0x3c>
      break;
 8008b68:	bf00      	nop
  }
}
 8008b6a:	bf00      	nop
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b084      	sub	sp, #16
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	781a      	ldrb	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	781a      	ldrb	r2, [r3, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f7ff fa41 	bl	8008024 <SWAPBYTE>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3301      	adds	r3, #1
 8008bae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f7ff fa34 	bl	8008024 <SWAPBYTE>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f7ff fa27 	bl	8008024 <SWAPBYTE>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	461a      	mov	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	80da      	strh	r2, [r3, #6]
}
 8008bde:	bf00      	nop
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008bf0:	2180      	movs	r1, #128	; 0x80
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fcd6 	bl	80095a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fcd2 	bl	80095a4 <USBD_LL_StallEP>
}
 8008c00:	bf00      	nop
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d036      	beq.n	8008c8c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008c22:	6938      	ldr	r0, [r7, #16]
 8008c24:	f000 f836 	bl	8008c94 <USBD_GetLen>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
 8008c38:	68ba      	ldr	r2, [r7, #8]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	7812      	ldrb	r2, [r2, #0]
 8008c40:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c42:	7dfb      	ldrb	r3, [r7, #23]
 8008c44:	3301      	adds	r3, #1
 8008c46:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	2203      	movs	r2, #3
 8008c50:	701a      	strb	r2, [r3, #0]
  idx++;
 8008c52:	7dfb      	ldrb	r3, [r7, #23]
 8008c54:	3301      	adds	r3, #1
 8008c56:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008c58:	e013      	b.n	8008c82 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008c5a:	7dfb      	ldrb	r3, [r7, #23]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	4413      	add	r3, r2
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	7812      	ldrb	r2, [r2, #0]
 8008c64:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	613b      	str	r3, [r7, #16]
    idx++;
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	4413      	add	r3, r2
 8008c78:	2200      	movs	r2, #0
 8008c7a:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e7      	bne.n	8008c5a <USBD_GetString+0x52>
 8008c8a:	e000      	b.n	8008c8e <USBD_GetString+0x86>
    return;
 8008c8c:	bf00      	nop
  }
}
 8008c8e:	3718      	adds	r7, #24
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ca4:	e005      	b.n	8008cb2 <USBD_GetLen+0x1e>
  {
    len++;
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1f5      	bne.n	8008ca6 <USBD_GetLen+0x12>
  }

  return len;
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	2100      	movs	r1, #0
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f000 fce1 	bl	80096b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	2100      	movs	r1, #0
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 fcd0 	bl	80096b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2203      	movs	r2, #3
 8008d30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	2100      	movs	r1, #0
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f000 fcd4 	bl	80096f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	60f8      	str	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 fcc3 	bl	80096f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2204      	movs	r2, #4
 8008d88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	2200      	movs	r2, #0
 8008d90:	2100      	movs	r1, #0
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fc8f 	bl	80096b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2205      	movs	r2, #5
 8008dae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008db2:	2300      	movs	r3, #0
 8008db4:	2200      	movs	r2, #0
 8008db6:	2100      	movs	r1, #0
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fc9d 	bl	80096f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	4912      	ldr	r1, [pc, #72]	; (8008e18 <MX_USB_DEVICE_Init+0x50>)
 8008dd0:	4812      	ldr	r0, [pc, #72]	; (8008e1c <MX_USB_DEVICE_Init+0x54>)
 8008dd2:	f7fe fd07 	bl	80077e4 <USBD_Init>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d001      	beq.n	8008de0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ddc:	f7f8 fc78 	bl	80016d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008de0:	490f      	ldr	r1, [pc, #60]	; (8008e20 <MX_USB_DEVICE_Init+0x58>)
 8008de2:	480e      	ldr	r0, [pc, #56]	; (8008e1c <MX_USB_DEVICE_Init+0x54>)
 8008de4:	f7fe fd2e 	bl	8007844 <USBD_RegisterClass>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008dee:	f7f8 fc6f 	bl	80016d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008df2:	490c      	ldr	r1, [pc, #48]	; (8008e24 <MX_USB_DEVICE_Init+0x5c>)
 8008df4:	4809      	ldr	r0, [pc, #36]	; (8008e1c <MX_USB_DEVICE_Init+0x54>)
 8008df6:	f7fe fc1f 	bl	8007638 <USBD_CDC_RegisterInterface>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e00:	f7f8 fc66 	bl	80016d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e04:	4805      	ldr	r0, [pc, #20]	; (8008e1c <MX_USB_DEVICE_Init+0x54>)
 8008e06:	f7fe fd53 	bl	80078b0 <USBD_Start>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d001      	beq.n	8008e14 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e10:	f7f8 fc5e 	bl	80016d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e14:	bf00      	nop
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	200000ac 	.word	0x200000ac
 8008e1c:	20000224 	.word	0x20000224
 8008e20:	20000018 	.word	0x20000018
 8008e24:	20000098 	.word	0x20000098

08008e28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	4905      	ldr	r1, [pc, #20]	; (8008e44 <CDC_Init_FS+0x1c>)
 8008e30:	4805      	ldr	r0, [pc, #20]	; (8008e48 <CDC_Init_FS+0x20>)
 8008e32:	f7fe fc1b 	bl	800766c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e36:	4905      	ldr	r1, [pc, #20]	; (8008e4c <CDC_Init_FS+0x24>)
 8008e38:	4803      	ldr	r0, [pc, #12]	; (8008e48 <CDC_Init_FS+0x20>)
 8008e3a:	f7fe fc39 	bl	80076b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	20000900 	.word	0x20000900
 8008e48:	20000224 	.word	0x20000224
 8008e4c:	20000500 	.word	0x20000500

08008e50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e50:	b480      	push	{r7}
 8008e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	6039      	str	r1, [r7, #0]
 8008e6a:	71fb      	strb	r3, [r7, #7]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	2b23      	cmp	r3, #35	; 0x23
 8008e74:	d84a      	bhi.n	8008f0c <CDC_Control_FS+0xac>
 8008e76:	a201      	add	r2, pc, #4	; (adr r2, 8008e7c <CDC_Control_FS+0x1c>)
 8008e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7c:	08008f0d 	.word	0x08008f0d
 8008e80:	08008f0d 	.word	0x08008f0d
 8008e84:	08008f0d 	.word	0x08008f0d
 8008e88:	08008f0d 	.word	0x08008f0d
 8008e8c:	08008f0d 	.word	0x08008f0d
 8008e90:	08008f0d 	.word	0x08008f0d
 8008e94:	08008f0d 	.word	0x08008f0d
 8008e98:	08008f0d 	.word	0x08008f0d
 8008e9c:	08008f0d 	.word	0x08008f0d
 8008ea0:	08008f0d 	.word	0x08008f0d
 8008ea4:	08008f0d 	.word	0x08008f0d
 8008ea8:	08008f0d 	.word	0x08008f0d
 8008eac:	08008f0d 	.word	0x08008f0d
 8008eb0:	08008f0d 	.word	0x08008f0d
 8008eb4:	08008f0d 	.word	0x08008f0d
 8008eb8:	08008f0d 	.word	0x08008f0d
 8008ebc:	08008f0d 	.word	0x08008f0d
 8008ec0:	08008f0d 	.word	0x08008f0d
 8008ec4:	08008f0d 	.word	0x08008f0d
 8008ec8:	08008f0d 	.word	0x08008f0d
 8008ecc:	08008f0d 	.word	0x08008f0d
 8008ed0:	08008f0d 	.word	0x08008f0d
 8008ed4:	08008f0d 	.word	0x08008f0d
 8008ed8:	08008f0d 	.word	0x08008f0d
 8008edc:	08008f0d 	.word	0x08008f0d
 8008ee0:	08008f0d 	.word	0x08008f0d
 8008ee4:	08008f0d 	.word	0x08008f0d
 8008ee8:	08008f0d 	.word	0x08008f0d
 8008eec:	08008f0d 	.word	0x08008f0d
 8008ef0:	08008f0d 	.word	0x08008f0d
 8008ef4:	08008f0d 	.word	0x08008f0d
 8008ef8:	08008f0d 	.word	0x08008f0d
 8008efc:	08008f0d 	.word	0x08008f0d
 8008f00:	08008f0d 	.word	0x08008f0d
 8008f04:	08008f0d 	.word	0x08008f0d
 8008f08:	08008f0d 	.word	0x08008f0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f0c:	bf00      	nop
  }

  return (USBD_OK);
 8008f0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	4805      	ldr	r0, [pc, #20]	; (8008f40 <CDC_Receive_FS+0x24>)
 8008f2a:	f7fe fbc1 	bl	80076b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f2e:	4804      	ldr	r0, [pc, #16]	; (8008f40 <CDC_Receive_FS+0x24>)
 8008f30:	f7fe fc22 	bl	8007778 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008f34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	20000224 	.word	0x20000224

08008f44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f54:	4b0d      	ldr	r3, [pc, #52]	; (8008f8c <CDC_Transmit_FS+0x48>)
 8008f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e00b      	b.n	8008f82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f6a:	887b      	ldrh	r3, [r7, #2]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6879      	ldr	r1, [r7, #4]
 8008f70:	4806      	ldr	r0, [pc, #24]	; (8008f8c <CDC_Transmit_FS+0x48>)
 8008f72:	f7fe fb7b 	bl	800766c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f76:	4805      	ldr	r0, [pc, #20]	; (8008f8c <CDC_Transmit_FS+0x48>)
 8008f78:	f7fe fbb8 	bl	80076ec <USBD_CDC_TransmitPacket>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	20000224 	.word	0x20000224

08008f90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b087      	sub	sp, #28
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008fa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	371c      	adds	r7, #28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
	...

08008fb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	6039      	str	r1, [r7, #0]
 8008fbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	2212      	movs	r2, #18
 8008fc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008fc6:	4b03      	ldr	r3, [pc, #12]	; (8008fd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	200000c8 	.word	0x200000c8

08008fd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	4603      	mov	r3, r0
 8008fe0:	6039      	str	r1, [r7, #0]
 8008fe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	2204      	movs	r2, #4
 8008fe8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fea:	4b03      	ldr	r3, [pc, #12]	; (8008ff8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	200000dc 	.word	0x200000dc

08008ffc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	6039      	str	r1, [r7, #0]
 8009006:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009008:	79fb      	ldrb	r3, [r7, #7]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d105      	bne.n	800901a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	4907      	ldr	r1, [pc, #28]	; (8009030 <USBD_FS_ProductStrDescriptor+0x34>)
 8009012:	4808      	ldr	r0, [pc, #32]	; (8009034 <USBD_FS_ProductStrDescriptor+0x38>)
 8009014:	f7ff fdf8 	bl	8008c08 <USBD_GetString>
 8009018:	e004      	b.n	8009024 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	4904      	ldr	r1, [pc, #16]	; (8009030 <USBD_FS_ProductStrDescriptor+0x34>)
 800901e:	4805      	ldr	r0, [pc, #20]	; (8009034 <USBD_FS_ProductStrDescriptor+0x38>)
 8009020:	f7ff fdf2 	bl	8008c08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009024:	4b02      	ldr	r3, [pc, #8]	; (8009030 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20000d00 	.word	0x20000d00
 8009034:	08009dd4 	.word	0x08009dd4

08009038 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	6039      	str	r1, [r7, #0]
 8009042:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	4904      	ldr	r1, [pc, #16]	; (8009058 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009048:	4804      	ldr	r0, [pc, #16]	; (800905c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800904a:	f7ff fddd 	bl	8008c08 <USBD_GetString>
  return USBD_StrDesc;
 800904e:	4b02      	ldr	r3, [pc, #8]	; (8009058 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009050:	4618      	mov	r0, r3
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	20000d00 	.word	0x20000d00
 800905c:	08009dec 	.word	0x08009dec

08009060 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	4603      	mov	r3, r0
 8009068:	6039      	str	r1, [r7, #0]
 800906a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	221a      	movs	r2, #26
 8009070:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009072:	f000 f843 	bl	80090fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009076:	4b02      	ldr	r3, [pc, #8]	; (8009080 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009078:	4618      	mov	r0, r3
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	200000e0 	.word	0x200000e0

08009084 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	4603      	mov	r3, r0
 800908c:	6039      	str	r1, [r7, #0]
 800908e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009090:	79fb      	ldrb	r3, [r7, #7]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d105      	bne.n	80090a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	4907      	ldr	r1, [pc, #28]	; (80090b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800909a:	4808      	ldr	r0, [pc, #32]	; (80090bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800909c:	f7ff fdb4 	bl	8008c08 <USBD_GetString>
 80090a0:	e004      	b.n	80090ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090a2:	683a      	ldr	r2, [r7, #0]
 80090a4:	4904      	ldr	r1, [pc, #16]	; (80090b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090a6:	4805      	ldr	r0, [pc, #20]	; (80090bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80090a8:	f7ff fdae 	bl	8008c08 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090ac:	4b02      	ldr	r3, [pc, #8]	; (80090b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	20000d00 	.word	0x20000d00
 80090bc:	08009e00 	.word	0x08009e00

080090c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	4603      	mov	r3, r0
 80090c8:	6039      	str	r1, [r7, #0]
 80090ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d105      	bne.n	80090de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	4907      	ldr	r1, [pc, #28]	; (80090f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090d6:	4808      	ldr	r0, [pc, #32]	; (80090f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090d8:	f7ff fd96 	bl	8008c08 <USBD_GetString>
 80090dc:	e004      	b.n	80090e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	4904      	ldr	r1, [pc, #16]	; (80090f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090e2:	4805      	ldr	r0, [pc, #20]	; (80090f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090e4:	f7ff fd90 	bl	8008c08 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090e8:	4b02      	ldr	r3, [pc, #8]	; (80090f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3708      	adds	r7, #8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	20000d00 	.word	0x20000d00
 80090f8:	08009e0c 	.word	0x08009e0c

080090fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009102:	4b0f      	ldr	r3, [pc, #60]	; (8009140 <Get_SerialNum+0x44>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009108:	4b0e      	ldr	r3, [pc, #56]	; (8009144 <Get_SerialNum+0x48>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800910e:	4b0e      	ldr	r3, [pc, #56]	; (8009148 <Get_SerialNum+0x4c>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4413      	add	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d009      	beq.n	8009136 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009122:	2208      	movs	r2, #8
 8009124:	4909      	ldr	r1, [pc, #36]	; (800914c <Get_SerialNum+0x50>)
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 f814 	bl	8009154 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800912c:	2204      	movs	r2, #4
 800912e:	4908      	ldr	r1, [pc, #32]	; (8009150 <Get_SerialNum+0x54>)
 8009130:	68b8      	ldr	r0, [r7, #8]
 8009132:	f000 f80f 	bl	8009154 <IntToUnicode>
  }
}
 8009136:	bf00      	nop
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	1fff7a10 	.word	0x1fff7a10
 8009144:	1fff7a14 	.word	0x1fff7a14
 8009148:	1fff7a18 	.word	0x1fff7a18
 800914c:	200000e2 	.word	0x200000e2
 8009150:	200000f2 	.word	0x200000f2

08009154 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	4613      	mov	r3, r2
 8009160:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009162:	2300      	movs	r3, #0
 8009164:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009166:	2300      	movs	r3, #0
 8009168:	75fb      	strb	r3, [r7, #23]
 800916a:	e027      	b.n	80091bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	0f1b      	lsrs	r3, r3, #28
 8009170:	2b09      	cmp	r3, #9
 8009172:	d80b      	bhi.n	800918c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	0f1b      	lsrs	r3, r3, #28
 8009178:	b2da      	uxtb	r2, r3
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	005b      	lsls	r3, r3, #1
 800917e:	4619      	mov	r1, r3
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	440b      	add	r3, r1
 8009184:	3230      	adds	r2, #48	; 0x30
 8009186:	b2d2      	uxtb	r2, r2
 8009188:	701a      	strb	r2, [r3, #0]
 800918a:	e00a      	b.n	80091a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	0f1b      	lsrs	r3, r3, #28
 8009190:	b2da      	uxtb	r2, r3
 8009192:	7dfb      	ldrb	r3, [r7, #23]
 8009194:	005b      	lsls	r3, r3, #1
 8009196:	4619      	mov	r1, r3
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	440b      	add	r3, r1
 800919c:	3237      	adds	r2, #55	; 0x37
 800919e:	b2d2      	uxtb	r2, r2
 80091a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	011b      	lsls	r3, r3, #4
 80091a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80091a8:	7dfb      	ldrb	r3, [r7, #23]
 80091aa:	005b      	lsls	r3, r3, #1
 80091ac:	3301      	adds	r3, #1
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	4413      	add	r3, r2
 80091b2:	2200      	movs	r2, #0
 80091b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
 80091b8:	3301      	adds	r3, #1
 80091ba:	75fb      	strb	r3, [r7, #23]
 80091bc:	7dfa      	ldrb	r2, [r7, #23]
 80091be:	79fb      	ldrb	r3, [r7, #7]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d3d3      	bcc.n	800916c <IntToUnicode+0x18>
  }
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop
 80091c8:	371c      	adds	r7, #28
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
	...

080091d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b08a      	sub	sp, #40	; 0x28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091dc:	f107 0314 	add.w	r3, r7, #20
 80091e0:	2200      	movs	r2, #0
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	605a      	str	r2, [r3, #4]
 80091e6:	609a      	str	r2, [r3, #8]
 80091e8:	60da      	str	r2, [r3, #12]
 80091ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091f4:	d13a      	bne.n	800926c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091f6:	2300      	movs	r3, #0
 80091f8:	613b      	str	r3, [r7, #16]
 80091fa:	4b1e      	ldr	r3, [pc, #120]	; (8009274 <HAL_PCD_MspInit+0xa0>)
 80091fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fe:	4a1d      	ldr	r2, [pc, #116]	; (8009274 <HAL_PCD_MspInit+0xa0>)
 8009200:	f043 0301 	orr.w	r3, r3, #1
 8009204:	6313      	str	r3, [r2, #48]	; 0x30
 8009206:	4b1b      	ldr	r3, [pc, #108]	; (8009274 <HAL_PCD_MspInit+0xa0>)
 8009208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	613b      	str	r3, [r7, #16]
 8009210:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009212:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009218:	2302      	movs	r3, #2
 800921a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800921c:	2300      	movs	r3, #0
 800921e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009220:	2303      	movs	r3, #3
 8009222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009224:	230a      	movs	r3, #10
 8009226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009228:	f107 0314 	add.w	r3, r7, #20
 800922c:	4619      	mov	r1, r3
 800922e:	4812      	ldr	r0, [pc, #72]	; (8009278 <HAL_PCD_MspInit+0xa4>)
 8009230:	f7f8 fd34 	bl	8001c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009234:	4b0f      	ldr	r3, [pc, #60]	; (8009274 <HAL_PCD_MspInit+0xa0>)
 8009236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009238:	4a0e      	ldr	r2, [pc, #56]	; (8009274 <HAL_PCD_MspInit+0xa0>)
 800923a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800923e:	6353      	str	r3, [r2, #52]	; 0x34
 8009240:	2300      	movs	r3, #0
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	4b0b      	ldr	r3, [pc, #44]	; (8009274 <HAL_PCD_MspInit+0xa0>)
 8009246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009248:	4a0a      	ldr	r2, [pc, #40]	; (8009274 <HAL_PCD_MspInit+0xa0>)
 800924a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800924e:	6453      	str	r3, [r2, #68]	; 0x44
 8009250:	4b08      	ldr	r3, [pc, #32]	; (8009274 <HAL_PCD_MspInit+0xa0>)
 8009252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009258:	60fb      	str	r3, [r7, #12]
 800925a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800925c:	2200      	movs	r2, #0
 800925e:	2100      	movs	r1, #0
 8009260:	2043      	movs	r0, #67	; 0x43
 8009262:	f7f8 fce4 	bl	8001c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009266:	2043      	movs	r0, #67	; 0x43
 8009268:	f7f8 fcfd 	bl	8001c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800926c:	bf00      	nop
 800926e:	3728      	adds	r7, #40	; 0x28
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	40023800 	.word	0x40023800
 8009278:	40020000 	.word	0x40020000

0800927c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009290:	4619      	mov	r1, r3
 8009292:	4610      	mov	r0, r2
 8009294:	f7fe fb59 	bl	800794a <USBD_LL_SetupStage>
}
 8009298:	bf00      	nop
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80092b2:	78fa      	ldrb	r2, [r7, #3]
 80092b4:	6879      	ldr	r1, [r7, #4]
 80092b6:	4613      	mov	r3, r2
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	4413      	add	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	440b      	add	r3, r1
 80092c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	78fb      	ldrb	r3, [r7, #3]
 80092c8:	4619      	mov	r1, r3
 80092ca:	f7fe fb93 	bl	80079f4 <USBD_LL_DataOutStage>
}
 80092ce:	bf00      	nop
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b082      	sub	sp, #8
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	460b      	mov	r3, r1
 80092e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80092e8:	78fa      	ldrb	r2, [r7, #3]
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	4613      	mov	r3, r2
 80092ee:	00db      	lsls	r3, r3, #3
 80092f0:	4413      	add	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	440b      	add	r3, r1
 80092f6:	334c      	adds	r3, #76	; 0x4c
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	4619      	mov	r1, r3
 80092fe:	f7fe fc2c 	bl	8007b5a <USBD_LL_DataInStage>
}
 8009302:	bf00      	nop
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b082      	sub	sp, #8
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009318:	4618      	mov	r0, r3
 800931a:	f7fe fd60 	bl	8007dde <USBD_LL_SOF>
}
 800931e:	bf00      	nop
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b084      	sub	sp, #16
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800932e:	2301      	movs	r3, #1
 8009330:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	2b02      	cmp	r3, #2
 8009338:	d001      	beq.n	800933e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800933a:	f7f8 f9c9 	bl	80016d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009344:	7bfa      	ldrb	r2, [r7, #15]
 8009346:	4611      	mov	r1, r2
 8009348:	4618      	mov	r0, r3
 800934a:	f7fe fd0a 	bl	8007d62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe fcb2 	bl	8007cbe <USBD_LL_Reset>
}
 800935a:	bf00      	nop
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009372:	4618      	mov	r0, r3
 8009374:	f7fe fd05 	bl	8007d82 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	6812      	ldr	r2, [r2, #0]
 8009386:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800938a:	f043 0301 	orr.w	r3, r3, #1
 800938e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a1b      	ldr	r3, [r3, #32]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d005      	beq.n	80093a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009398:	4b04      	ldr	r3, [pc, #16]	; (80093ac <HAL_PCD_SuspendCallback+0x48>)
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	4a03      	ldr	r2, [pc, #12]	; (80093ac <HAL_PCD_SuspendCallback+0x48>)
 800939e:	f043 0306 	orr.w	r3, r3, #6
 80093a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	e000ed00 	.word	0xe000ed00

080093b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe fcf5 	bl	8007dae <USBD_LL_Resume>
}
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093de:	78fa      	ldrb	r2, [r7, #3]
 80093e0:	4611      	mov	r1, r2
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fe fd4d 	bl	8007e82 <USBD_LL_IsoOUTIncomplete>
}
 80093e8:	bf00      	nop
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009402:	78fa      	ldrb	r2, [r7, #3]
 8009404:	4611      	mov	r1, r2
 8009406:	4618      	mov	r0, r3
 8009408:	f7fe fd09 	bl	8007e1e <USBD_LL_IsoINIncomplete>
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009422:	4618      	mov	r0, r3
 8009424:	f7fe fd5f 	bl	8007ee6 <USBD_LL_DevConnected>
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe fd5c 	bl	8007efc <USBD_LL_DevDisconnected>
}
 8009444:	bf00      	nop
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d13c      	bne.n	80094d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800945c:	4a20      	ldr	r2, [pc, #128]	; (80094e0 <USBD_LL_Init+0x94>)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a1e      	ldr	r2, [pc, #120]	; (80094e0 <USBD_LL_Init+0x94>)
 8009468:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800946c:	4b1c      	ldr	r3, [pc, #112]	; (80094e0 <USBD_LL_Init+0x94>)
 800946e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009472:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009474:	4b1a      	ldr	r3, [pc, #104]	; (80094e0 <USBD_LL_Init+0x94>)
 8009476:	2204      	movs	r2, #4
 8009478:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800947a:	4b19      	ldr	r3, [pc, #100]	; (80094e0 <USBD_LL_Init+0x94>)
 800947c:	2202      	movs	r2, #2
 800947e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009480:	4b17      	ldr	r3, [pc, #92]	; (80094e0 <USBD_LL_Init+0x94>)
 8009482:	2200      	movs	r2, #0
 8009484:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009486:	4b16      	ldr	r3, [pc, #88]	; (80094e0 <USBD_LL_Init+0x94>)
 8009488:	2202      	movs	r2, #2
 800948a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800948c:	4b14      	ldr	r3, [pc, #80]	; (80094e0 <USBD_LL_Init+0x94>)
 800948e:	2200      	movs	r2, #0
 8009490:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009492:	4b13      	ldr	r3, [pc, #76]	; (80094e0 <USBD_LL_Init+0x94>)
 8009494:	2200      	movs	r2, #0
 8009496:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009498:	4b11      	ldr	r3, [pc, #68]	; (80094e0 <USBD_LL_Init+0x94>)
 800949a:	2200      	movs	r2, #0
 800949c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800949e:	4b10      	ldr	r3, [pc, #64]	; (80094e0 <USBD_LL_Init+0x94>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80094a4:	4b0e      	ldr	r3, [pc, #56]	; (80094e0 <USBD_LL_Init+0x94>)
 80094a6:	2200      	movs	r2, #0
 80094a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80094aa:	480d      	ldr	r0, [pc, #52]	; (80094e0 <USBD_LL_Init+0x94>)
 80094ac:	f7f9 fd53 	bl	8002f56 <HAL_PCD_Init>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80094b6:	f7f8 f90b 	bl	80016d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80094ba:	2180      	movs	r1, #128	; 0x80
 80094bc:	4808      	ldr	r0, [pc, #32]	; (80094e0 <USBD_LL_Init+0x94>)
 80094be:	f7fa ffaa 	bl	8004416 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80094c2:	2240      	movs	r2, #64	; 0x40
 80094c4:	2100      	movs	r1, #0
 80094c6:	4806      	ldr	r0, [pc, #24]	; (80094e0 <USBD_LL_Init+0x94>)
 80094c8:	f7fa ff5e 	bl	8004388 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094cc:	2280      	movs	r2, #128	; 0x80
 80094ce:	2101      	movs	r1, #1
 80094d0:	4803      	ldr	r0, [pc, #12]	; (80094e0 <USBD_LL_Init+0x94>)
 80094d2:	f7fa ff59 	bl	8004388 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	20000f00 	.word	0x20000f00

080094e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7f9 fe48 	bl	8003190 <HAL_PCD_Start>
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 f942 	bl	8009790 <USBD_Get_USB_Status>
 800950c:	4603      	mov	r3, r0
 800950e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009510:	7bbb      	ldrb	r3, [r7, #14]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	4608      	mov	r0, r1
 8009524:	4611      	mov	r1, r2
 8009526:	461a      	mov	r2, r3
 8009528:	4603      	mov	r3, r0
 800952a:	70fb      	strb	r3, [r7, #3]
 800952c:	460b      	mov	r3, r1
 800952e:	70bb      	strb	r3, [r7, #2]
 8009530:	4613      	mov	r3, r2
 8009532:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009542:	78bb      	ldrb	r3, [r7, #2]
 8009544:	883a      	ldrh	r2, [r7, #0]
 8009546:	78f9      	ldrb	r1, [r7, #3]
 8009548:	f7fa fb19 	bl	8003b7e <HAL_PCD_EP_Open>
 800954c:	4603      	mov	r3, r0
 800954e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	4618      	mov	r0, r3
 8009554:	f000 f91c 	bl	8009790 <USBD_Get_USB_Status>
 8009558:	4603      	mov	r3, r0
 800955a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800955c:	7bbb      	ldrb	r3, [r7, #14]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	460b      	mov	r3, r1
 8009570:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009576:	2300      	movs	r3, #0
 8009578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009580:	78fa      	ldrb	r2, [r7, #3]
 8009582:	4611      	mov	r1, r2
 8009584:	4618      	mov	r0, r3
 8009586:	f7fa fb62 	bl	8003c4e <HAL_PCD_EP_Close>
 800958a:	4603      	mov	r3, r0
 800958c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800958e:	7bfb      	ldrb	r3, [r7, #15]
 8009590:	4618      	mov	r0, r3
 8009592:	f000 f8fd 	bl	8009790 <USBD_Get_USB_Status>
 8009596:	4603      	mov	r3, r0
 8009598:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800959a:	7bbb      	ldrb	r3, [r7, #14]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095be:	78fa      	ldrb	r2, [r7, #3]
 80095c0:	4611      	mov	r1, r2
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fa fc3a 	bl	8003e3c <HAL_PCD_EP_SetStall>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 f8de 	bl	8009790 <USBD_Get_USB_Status>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b084      	sub	sp, #16
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	460b      	mov	r3, r1
 80095ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095fc:	78fa      	ldrb	r2, [r7, #3]
 80095fe:	4611      	mov	r1, r2
 8009600:	4618      	mov	r0, r3
 8009602:	f7fa fc7f 	bl	8003f04 <HAL_PCD_EP_ClrStall>
 8009606:	4603      	mov	r3, r0
 8009608:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800960a:	7bfb      	ldrb	r3, [r7, #15]
 800960c:	4618      	mov	r0, r3
 800960e:	f000 f8bf 	bl	8009790 <USBD_Get_USB_Status>
 8009612:	4603      	mov	r3, r0
 8009614:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009616:	7bbb      	ldrb	r3, [r7, #14]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3710      	adds	r7, #16
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009632:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009638:	2b00      	cmp	r3, #0
 800963a:	da0b      	bge.n	8009654 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800963c:	78fb      	ldrb	r3, [r7, #3]
 800963e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009642:	68f9      	ldr	r1, [r7, #12]
 8009644:	4613      	mov	r3, r2
 8009646:	00db      	lsls	r3, r3, #3
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	440b      	add	r3, r1
 800964e:	333e      	adds	r3, #62	; 0x3e
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	e00b      	b.n	800966c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009654:	78fb      	ldrb	r3, [r7, #3]
 8009656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800965a:	68f9      	ldr	r1, [r7, #12]
 800965c:	4613      	mov	r3, r2
 800965e:	00db      	lsls	r3, r3, #3
 8009660:	4413      	add	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	440b      	add	r3, r1
 8009666:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800966a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009692:	78fa      	ldrb	r2, [r7, #3]
 8009694:	4611      	mov	r1, r2
 8009696:	4618      	mov	r0, r3
 8009698:	f7fa fa4c 	bl	8003b34 <HAL_PCD_SetAddress>
 800969c:	4603      	mov	r3, r0
 800969e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 f874 	bl	8009790 <USBD_Get_USB_Status>
 80096a8:	4603      	mov	r3, r0
 80096aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b086      	sub	sp, #24
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	60f8      	str	r0, [r7, #12]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]
 80096c2:	460b      	mov	r3, r1
 80096c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096d4:	7af9      	ldrb	r1, [r7, #11]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	f7fa fb65 	bl	8003da8 <HAL_PCD_EP_Transmit>
 80096de:	4603      	mov	r3, r0
 80096e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 f853 	bl	8009790 <USBD_Get_USB_Status>
 80096ea:	4603      	mov	r3, r0
 80096ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3718      	adds	r7, #24
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	607a      	str	r2, [r7, #4]
 8009702:	603b      	str	r3, [r7, #0]
 8009704:	460b      	mov	r3, r1
 8009706:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009716:	7af9      	ldrb	r1, [r7, #11]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	f7fa fae1 	bl	8003ce2 <HAL_PCD_EP_Receive>
 8009720:	4603      	mov	r3, r0
 8009722:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009724:	7dfb      	ldrb	r3, [r7, #23]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 f832 	bl	8009790 <USBD_Get_USB_Status>
 800972c:	4603      	mov	r3, r0
 800972e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009730:	7dbb      	ldrb	r3, [r7, #22]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b082      	sub	sp, #8
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800974c:	78fa      	ldrb	r2, [r7, #3]
 800974e:	4611      	mov	r1, r2
 8009750:	4618      	mov	r0, r3
 8009752:	f7fa fb11 	bl	8003d78 <HAL_PCD_EP_GetRxCount>
 8009756:	4603      	mov	r3, r0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009768:	4b03      	ldr	r3, [pc, #12]	; (8009778 <USBD_static_malloc+0x18>)
}
 800976a:	4618      	mov	r0, r3
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	2000140c 	.word	0x2000140c

0800977c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]

}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800979e:	79fb      	ldrb	r3, [r7, #7]
 80097a0:	2b03      	cmp	r3, #3
 80097a2:	d817      	bhi.n	80097d4 <USBD_Get_USB_Status+0x44>
 80097a4:	a201      	add	r2, pc, #4	; (adr r2, 80097ac <USBD_Get_USB_Status+0x1c>)
 80097a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097aa:	bf00      	nop
 80097ac:	080097bd 	.word	0x080097bd
 80097b0:	080097c3 	.word	0x080097c3
 80097b4:	080097c9 	.word	0x080097c9
 80097b8:	080097cf 	.word	0x080097cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]
    break;
 80097c0:	e00b      	b.n	80097da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097c2:	2303      	movs	r3, #3
 80097c4:	73fb      	strb	r3, [r7, #15]
    break;
 80097c6:	e008      	b.n	80097da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097c8:	2301      	movs	r3, #1
 80097ca:	73fb      	strb	r3, [r7, #15]
    break;
 80097cc:	e005      	b.n	80097da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097ce:	2303      	movs	r3, #3
 80097d0:	73fb      	strb	r3, [r7, #15]
    break;
 80097d2:	e002      	b.n	80097da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097d4:	2303      	movs	r3, #3
 80097d6:	73fb      	strb	r3, [r7, #15]
    break;
 80097d8:	bf00      	nop
  }
  return usb_status;
 80097da:	7bfb      	ldrb	r3, [r7, #15]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <memset>:
 80097e8:	4402      	add	r2, r0
 80097ea:	4603      	mov	r3, r0
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d100      	bne.n	80097f2 <memset+0xa>
 80097f0:	4770      	bx	lr
 80097f2:	f803 1b01 	strb.w	r1, [r3], #1
 80097f6:	e7f9      	b.n	80097ec <memset+0x4>

080097f8 <__errno>:
 80097f8:	4b01      	ldr	r3, [pc, #4]	; (8009800 <__errno+0x8>)
 80097fa:	6818      	ldr	r0, [r3, #0]
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	20000148 	.word	0x20000148

08009804 <__libc_init_array>:
 8009804:	b570      	push	{r4, r5, r6, lr}
 8009806:	4d0d      	ldr	r5, [pc, #52]	; (800983c <__libc_init_array+0x38>)
 8009808:	4c0d      	ldr	r4, [pc, #52]	; (8009840 <__libc_init_array+0x3c>)
 800980a:	1b64      	subs	r4, r4, r5
 800980c:	10a4      	asrs	r4, r4, #2
 800980e:	2600      	movs	r6, #0
 8009810:	42a6      	cmp	r6, r4
 8009812:	d109      	bne.n	8009828 <__libc_init_array+0x24>
 8009814:	4d0b      	ldr	r5, [pc, #44]	; (8009844 <__libc_init_array+0x40>)
 8009816:	4c0c      	ldr	r4, [pc, #48]	; (8009848 <__libc_init_array+0x44>)
 8009818:	f000 faca 	bl	8009db0 <_init>
 800981c:	1b64      	subs	r4, r4, r5
 800981e:	10a4      	asrs	r4, r4, #2
 8009820:	2600      	movs	r6, #0
 8009822:	42a6      	cmp	r6, r4
 8009824:	d105      	bne.n	8009832 <__libc_init_array+0x2e>
 8009826:	bd70      	pop	{r4, r5, r6, pc}
 8009828:	f855 3b04 	ldr.w	r3, [r5], #4
 800982c:	4798      	blx	r3
 800982e:	3601      	adds	r6, #1
 8009830:	e7ee      	b.n	8009810 <__libc_init_array+0xc>
 8009832:	f855 3b04 	ldr.w	r3, [r5], #4
 8009836:	4798      	blx	r3
 8009838:	3601      	adds	r6, #1
 800983a:	e7f2      	b.n	8009822 <__libc_init_array+0x1e>
 800983c:	08009e80 	.word	0x08009e80
 8009840:	08009e80 	.word	0x08009e80
 8009844:	08009e80 	.word	0x08009e80
 8009848:	08009e84 	.word	0x08009e84

0800984c <sqrt>:
 800984c:	b538      	push	{r3, r4, r5, lr}
 800984e:	ed2d 8b02 	vpush	{d8}
 8009852:	ec55 4b10 	vmov	r4, r5, d0
 8009856:	f000 f9d1 	bl	8009bfc <__ieee754_sqrt>
 800985a:	4622      	mov	r2, r4
 800985c:	462b      	mov	r3, r5
 800985e:	4620      	mov	r0, r4
 8009860:	4629      	mov	r1, r5
 8009862:	eeb0 8a40 	vmov.f32	s16, s0
 8009866:	eef0 8a60 	vmov.f32	s17, s1
 800986a:	f7f7 f90b 	bl	8000a84 <__aeabi_dcmpun>
 800986e:	b990      	cbnz	r0, 8009896 <sqrt+0x4a>
 8009870:	2200      	movs	r2, #0
 8009872:	2300      	movs	r3, #0
 8009874:	4620      	mov	r0, r4
 8009876:	4629      	mov	r1, r5
 8009878:	f7f7 f8dc 	bl	8000a34 <__aeabi_dcmplt>
 800987c:	b158      	cbz	r0, 8009896 <sqrt+0x4a>
 800987e:	f7ff ffbb 	bl	80097f8 <__errno>
 8009882:	2321      	movs	r3, #33	; 0x21
 8009884:	6003      	str	r3, [r0, #0]
 8009886:	2200      	movs	r2, #0
 8009888:	2300      	movs	r3, #0
 800988a:	4610      	mov	r0, r2
 800988c:	4619      	mov	r1, r3
 800988e:	f7f6 ff89 	bl	80007a4 <__aeabi_ddiv>
 8009892:	ec41 0b18 	vmov	d8, r0, r1
 8009896:	eeb0 0a48 	vmov.f32	s0, s16
 800989a:	eef0 0a68 	vmov.f32	s1, s17
 800989e:	ecbd 8b02 	vpop	{d8}
 80098a2:	bd38      	pop	{r3, r4, r5, pc}
 80098a4:	0000      	movs	r0, r0
	...

080098a8 <atan>:
 80098a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ac:	ec55 4b10 	vmov	r4, r5, d0
 80098b0:	4bc3      	ldr	r3, [pc, #780]	; (8009bc0 <atan+0x318>)
 80098b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80098b6:	429e      	cmp	r6, r3
 80098b8:	46ab      	mov	fp, r5
 80098ba:	dd18      	ble.n	80098ee <atan+0x46>
 80098bc:	4bc1      	ldr	r3, [pc, #772]	; (8009bc4 <atan+0x31c>)
 80098be:	429e      	cmp	r6, r3
 80098c0:	dc01      	bgt.n	80098c6 <atan+0x1e>
 80098c2:	d109      	bne.n	80098d8 <atan+0x30>
 80098c4:	b144      	cbz	r4, 80098d8 <atan+0x30>
 80098c6:	4622      	mov	r2, r4
 80098c8:	462b      	mov	r3, r5
 80098ca:	4620      	mov	r0, r4
 80098cc:	4629      	mov	r1, r5
 80098ce:	f7f6 fc89 	bl	80001e4 <__adddf3>
 80098d2:	4604      	mov	r4, r0
 80098d4:	460d      	mov	r5, r1
 80098d6:	e006      	b.n	80098e6 <atan+0x3e>
 80098d8:	f1bb 0f00 	cmp.w	fp, #0
 80098dc:	f300 8131 	bgt.w	8009b42 <atan+0x29a>
 80098e0:	a59b      	add	r5, pc, #620	; (adr r5, 8009b50 <atan+0x2a8>)
 80098e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80098e6:	ec45 4b10 	vmov	d0, r4, r5
 80098ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ee:	4bb6      	ldr	r3, [pc, #728]	; (8009bc8 <atan+0x320>)
 80098f0:	429e      	cmp	r6, r3
 80098f2:	dc14      	bgt.n	800991e <atan+0x76>
 80098f4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80098f8:	429e      	cmp	r6, r3
 80098fa:	dc0d      	bgt.n	8009918 <atan+0x70>
 80098fc:	a396      	add	r3, pc, #600	; (adr r3, 8009b58 <atan+0x2b0>)
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	ee10 0a10 	vmov	r0, s0
 8009906:	4629      	mov	r1, r5
 8009908:	f7f6 fc6c 	bl	80001e4 <__adddf3>
 800990c:	4baf      	ldr	r3, [pc, #700]	; (8009bcc <atan+0x324>)
 800990e:	2200      	movs	r2, #0
 8009910:	f7f7 f8ae 	bl	8000a70 <__aeabi_dcmpgt>
 8009914:	2800      	cmp	r0, #0
 8009916:	d1e6      	bne.n	80098e6 <atan+0x3e>
 8009918:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800991c:	e02b      	b.n	8009976 <atan+0xce>
 800991e:	f000 f963 	bl	8009be8 <fabs>
 8009922:	4bab      	ldr	r3, [pc, #684]	; (8009bd0 <atan+0x328>)
 8009924:	429e      	cmp	r6, r3
 8009926:	ec55 4b10 	vmov	r4, r5, d0
 800992a:	f300 80bf 	bgt.w	8009aac <atan+0x204>
 800992e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009932:	429e      	cmp	r6, r3
 8009934:	f300 80a0 	bgt.w	8009a78 <atan+0x1d0>
 8009938:	ee10 2a10 	vmov	r2, s0
 800993c:	ee10 0a10 	vmov	r0, s0
 8009940:	462b      	mov	r3, r5
 8009942:	4629      	mov	r1, r5
 8009944:	f7f6 fc4e 	bl	80001e4 <__adddf3>
 8009948:	4ba0      	ldr	r3, [pc, #640]	; (8009bcc <atan+0x324>)
 800994a:	2200      	movs	r2, #0
 800994c:	f7f6 fc48 	bl	80001e0 <__aeabi_dsub>
 8009950:	2200      	movs	r2, #0
 8009952:	4606      	mov	r6, r0
 8009954:	460f      	mov	r7, r1
 8009956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800995a:	4620      	mov	r0, r4
 800995c:	4629      	mov	r1, r5
 800995e:	f7f6 fc41 	bl	80001e4 <__adddf3>
 8009962:	4602      	mov	r2, r0
 8009964:	460b      	mov	r3, r1
 8009966:	4630      	mov	r0, r6
 8009968:	4639      	mov	r1, r7
 800996a:	f7f6 ff1b 	bl	80007a4 <__aeabi_ddiv>
 800996e:	f04f 0a00 	mov.w	sl, #0
 8009972:	4604      	mov	r4, r0
 8009974:	460d      	mov	r5, r1
 8009976:	4622      	mov	r2, r4
 8009978:	462b      	mov	r3, r5
 800997a:	4620      	mov	r0, r4
 800997c:	4629      	mov	r1, r5
 800997e:	f7f6 fde7 	bl	8000550 <__aeabi_dmul>
 8009982:	4602      	mov	r2, r0
 8009984:	460b      	mov	r3, r1
 8009986:	4680      	mov	r8, r0
 8009988:	4689      	mov	r9, r1
 800998a:	f7f6 fde1 	bl	8000550 <__aeabi_dmul>
 800998e:	a374      	add	r3, pc, #464	; (adr r3, 8009b60 <atan+0x2b8>)
 8009990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009994:	4606      	mov	r6, r0
 8009996:	460f      	mov	r7, r1
 8009998:	f7f6 fdda 	bl	8000550 <__aeabi_dmul>
 800999c:	a372      	add	r3, pc, #456	; (adr r3, 8009b68 <atan+0x2c0>)
 800999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a2:	f7f6 fc1f 	bl	80001e4 <__adddf3>
 80099a6:	4632      	mov	r2, r6
 80099a8:	463b      	mov	r3, r7
 80099aa:	f7f6 fdd1 	bl	8000550 <__aeabi_dmul>
 80099ae:	a370      	add	r3, pc, #448	; (adr r3, 8009b70 <atan+0x2c8>)
 80099b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b4:	f7f6 fc16 	bl	80001e4 <__adddf3>
 80099b8:	4632      	mov	r2, r6
 80099ba:	463b      	mov	r3, r7
 80099bc:	f7f6 fdc8 	bl	8000550 <__aeabi_dmul>
 80099c0:	a36d      	add	r3, pc, #436	; (adr r3, 8009b78 <atan+0x2d0>)
 80099c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c6:	f7f6 fc0d 	bl	80001e4 <__adddf3>
 80099ca:	4632      	mov	r2, r6
 80099cc:	463b      	mov	r3, r7
 80099ce:	f7f6 fdbf 	bl	8000550 <__aeabi_dmul>
 80099d2:	a36b      	add	r3, pc, #428	; (adr r3, 8009b80 <atan+0x2d8>)
 80099d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d8:	f7f6 fc04 	bl	80001e4 <__adddf3>
 80099dc:	4632      	mov	r2, r6
 80099de:	463b      	mov	r3, r7
 80099e0:	f7f6 fdb6 	bl	8000550 <__aeabi_dmul>
 80099e4:	a368      	add	r3, pc, #416	; (adr r3, 8009b88 <atan+0x2e0>)
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	f7f6 fbfb 	bl	80001e4 <__adddf3>
 80099ee:	4642      	mov	r2, r8
 80099f0:	464b      	mov	r3, r9
 80099f2:	f7f6 fdad 	bl	8000550 <__aeabi_dmul>
 80099f6:	a366      	add	r3, pc, #408	; (adr r3, 8009b90 <atan+0x2e8>)
 80099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fc:	4680      	mov	r8, r0
 80099fe:	4689      	mov	r9, r1
 8009a00:	4630      	mov	r0, r6
 8009a02:	4639      	mov	r1, r7
 8009a04:	f7f6 fda4 	bl	8000550 <__aeabi_dmul>
 8009a08:	a363      	add	r3, pc, #396	; (adr r3, 8009b98 <atan+0x2f0>)
 8009a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0e:	f7f6 fbe7 	bl	80001e0 <__aeabi_dsub>
 8009a12:	4632      	mov	r2, r6
 8009a14:	463b      	mov	r3, r7
 8009a16:	f7f6 fd9b 	bl	8000550 <__aeabi_dmul>
 8009a1a:	a361      	add	r3, pc, #388	; (adr r3, 8009ba0 <atan+0x2f8>)
 8009a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a20:	f7f6 fbde 	bl	80001e0 <__aeabi_dsub>
 8009a24:	4632      	mov	r2, r6
 8009a26:	463b      	mov	r3, r7
 8009a28:	f7f6 fd92 	bl	8000550 <__aeabi_dmul>
 8009a2c:	a35e      	add	r3, pc, #376	; (adr r3, 8009ba8 <atan+0x300>)
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	f7f6 fbd5 	bl	80001e0 <__aeabi_dsub>
 8009a36:	4632      	mov	r2, r6
 8009a38:	463b      	mov	r3, r7
 8009a3a:	f7f6 fd89 	bl	8000550 <__aeabi_dmul>
 8009a3e:	a35c      	add	r3, pc, #368	; (adr r3, 8009bb0 <atan+0x308>)
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	f7f6 fbcc 	bl	80001e0 <__aeabi_dsub>
 8009a48:	4632      	mov	r2, r6
 8009a4a:	463b      	mov	r3, r7
 8009a4c:	f7f6 fd80 	bl	8000550 <__aeabi_dmul>
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	4640      	mov	r0, r8
 8009a56:	4649      	mov	r1, r9
 8009a58:	f7f6 fbc4 	bl	80001e4 <__adddf3>
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	462b      	mov	r3, r5
 8009a60:	f7f6 fd76 	bl	8000550 <__aeabi_dmul>
 8009a64:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009a68:	4602      	mov	r2, r0
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	d14b      	bne.n	8009b06 <atan+0x25e>
 8009a6e:	4620      	mov	r0, r4
 8009a70:	4629      	mov	r1, r5
 8009a72:	f7f6 fbb5 	bl	80001e0 <__aeabi_dsub>
 8009a76:	e72c      	b.n	80098d2 <atan+0x2a>
 8009a78:	ee10 0a10 	vmov	r0, s0
 8009a7c:	4b53      	ldr	r3, [pc, #332]	; (8009bcc <atan+0x324>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	4629      	mov	r1, r5
 8009a82:	f7f6 fbad 	bl	80001e0 <__aeabi_dsub>
 8009a86:	4b51      	ldr	r3, [pc, #324]	; (8009bcc <atan+0x324>)
 8009a88:	4606      	mov	r6, r0
 8009a8a:	460f      	mov	r7, r1
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	4620      	mov	r0, r4
 8009a90:	4629      	mov	r1, r5
 8009a92:	f7f6 fba7 	bl	80001e4 <__adddf3>
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	f7f6 fe81 	bl	80007a4 <__aeabi_ddiv>
 8009aa2:	f04f 0a01 	mov.w	sl, #1
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	460d      	mov	r5, r1
 8009aaa:	e764      	b.n	8009976 <atan+0xce>
 8009aac:	4b49      	ldr	r3, [pc, #292]	; (8009bd4 <atan+0x32c>)
 8009aae:	429e      	cmp	r6, r3
 8009ab0:	da1d      	bge.n	8009aee <atan+0x246>
 8009ab2:	ee10 0a10 	vmov	r0, s0
 8009ab6:	4b48      	ldr	r3, [pc, #288]	; (8009bd8 <atan+0x330>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	4629      	mov	r1, r5
 8009abc:	f7f6 fb90 	bl	80001e0 <__aeabi_dsub>
 8009ac0:	4b45      	ldr	r3, [pc, #276]	; (8009bd8 <atan+0x330>)
 8009ac2:	4606      	mov	r6, r0
 8009ac4:	460f      	mov	r7, r1
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	4620      	mov	r0, r4
 8009aca:	4629      	mov	r1, r5
 8009acc:	f7f6 fd40 	bl	8000550 <__aeabi_dmul>
 8009ad0:	4b3e      	ldr	r3, [pc, #248]	; (8009bcc <atan+0x324>)
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f7f6 fb86 	bl	80001e4 <__adddf3>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4630      	mov	r0, r6
 8009ade:	4639      	mov	r1, r7
 8009ae0:	f7f6 fe60 	bl	80007a4 <__aeabi_ddiv>
 8009ae4:	f04f 0a02 	mov.w	sl, #2
 8009ae8:	4604      	mov	r4, r0
 8009aea:	460d      	mov	r5, r1
 8009aec:	e743      	b.n	8009976 <atan+0xce>
 8009aee:	462b      	mov	r3, r5
 8009af0:	ee10 2a10 	vmov	r2, s0
 8009af4:	4939      	ldr	r1, [pc, #228]	; (8009bdc <atan+0x334>)
 8009af6:	2000      	movs	r0, #0
 8009af8:	f7f6 fe54 	bl	80007a4 <__aeabi_ddiv>
 8009afc:	f04f 0a03 	mov.w	sl, #3
 8009b00:	4604      	mov	r4, r0
 8009b02:	460d      	mov	r5, r1
 8009b04:	e737      	b.n	8009976 <atan+0xce>
 8009b06:	4b36      	ldr	r3, [pc, #216]	; (8009be0 <atan+0x338>)
 8009b08:	4e36      	ldr	r6, [pc, #216]	; (8009be4 <atan+0x33c>)
 8009b0a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f7f6 fb65 	bl	80001e0 <__aeabi_dsub>
 8009b16:	4622      	mov	r2, r4
 8009b18:	462b      	mov	r3, r5
 8009b1a:	f7f6 fb61 	bl	80001e0 <__aeabi_dsub>
 8009b1e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009b2a:	f7f6 fb59 	bl	80001e0 <__aeabi_dsub>
 8009b2e:	f1bb 0f00 	cmp.w	fp, #0
 8009b32:	4604      	mov	r4, r0
 8009b34:	460d      	mov	r5, r1
 8009b36:	f6bf aed6 	bge.w	80098e6 <atan+0x3e>
 8009b3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b3e:	461d      	mov	r5, r3
 8009b40:	e6d1      	b.n	80098e6 <atan+0x3e>
 8009b42:	a51d      	add	r5, pc, #116	; (adr r5, 8009bb8 <atan+0x310>)
 8009b44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b48:	e6cd      	b.n	80098e6 <atan+0x3e>
 8009b4a:	bf00      	nop
 8009b4c:	f3af 8000 	nop.w
 8009b50:	54442d18 	.word	0x54442d18
 8009b54:	bff921fb 	.word	0xbff921fb
 8009b58:	8800759c 	.word	0x8800759c
 8009b5c:	7e37e43c 	.word	0x7e37e43c
 8009b60:	e322da11 	.word	0xe322da11
 8009b64:	3f90ad3a 	.word	0x3f90ad3a
 8009b68:	24760deb 	.word	0x24760deb
 8009b6c:	3fa97b4b 	.word	0x3fa97b4b
 8009b70:	a0d03d51 	.word	0xa0d03d51
 8009b74:	3fb10d66 	.word	0x3fb10d66
 8009b78:	c54c206e 	.word	0xc54c206e
 8009b7c:	3fb745cd 	.word	0x3fb745cd
 8009b80:	920083ff 	.word	0x920083ff
 8009b84:	3fc24924 	.word	0x3fc24924
 8009b88:	5555550d 	.word	0x5555550d
 8009b8c:	3fd55555 	.word	0x3fd55555
 8009b90:	2c6a6c2f 	.word	0x2c6a6c2f
 8009b94:	bfa2b444 	.word	0xbfa2b444
 8009b98:	52defd9a 	.word	0x52defd9a
 8009b9c:	3fadde2d 	.word	0x3fadde2d
 8009ba0:	af749a6d 	.word	0xaf749a6d
 8009ba4:	3fb3b0f2 	.word	0x3fb3b0f2
 8009ba8:	fe231671 	.word	0xfe231671
 8009bac:	3fbc71c6 	.word	0x3fbc71c6
 8009bb0:	9998ebc4 	.word	0x9998ebc4
 8009bb4:	3fc99999 	.word	0x3fc99999
 8009bb8:	54442d18 	.word	0x54442d18
 8009bbc:	3ff921fb 	.word	0x3ff921fb
 8009bc0:	440fffff 	.word	0x440fffff
 8009bc4:	7ff00000 	.word	0x7ff00000
 8009bc8:	3fdbffff 	.word	0x3fdbffff
 8009bcc:	3ff00000 	.word	0x3ff00000
 8009bd0:	3ff2ffff 	.word	0x3ff2ffff
 8009bd4:	40038000 	.word	0x40038000
 8009bd8:	3ff80000 	.word	0x3ff80000
 8009bdc:	bff00000 	.word	0xbff00000
 8009be0:	08009e58 	.word	0x08009e58
 8009be4:	08009e38 	.word	0x08009e38

08009be8 <fabs>:
 8009be8:	ec51 0b10 	vmov	r0, r1, d0
 8009bec:	ee10 2a10 	vmov	r2, s0
 8009bf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009bf4:	ec43 2b10 	vmov	d0, r2, r3
 8009bf8:	4770      	bx	lr
	...

08009bfc <__ieee754_sqrt>:
 8009bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c00:	ec55 4b10 	vmov	r4, r5, d0
 8009c04:	4e67      	ldr	r6, [pc, #412]	; (8009da4 <__ieee754_sqrt+0x1a8>)
 8009c06:	43ae      	bics	r6, r5
 8009c08:	ee10 0a10 	vmov	r0, s0
 8009c0c:	ee10 2a10 	vmov	r2, s0
 8009c10:	4629      	mov	r1, r5
 8009c12:	462b      	mov	r3, r5
 8009c14:	d10d      	bne.n	8009c32 <__ieee754_sqrt+0x36>
 8009c16:	f7f6 fc9b 	bl	8000550 <__aeabi_dmul>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4620      	mov	r0, r4
 8009c20:	4629      	mov	r1, r5
 8009c22:	f7f6 fadf 	bl	80001e4 <__adddf3>
 8009c26:	4604      	mov	r4, r0
 8009c28:	460d      	mov	r5, r1
 8009c2a:	ec45 4b10 	vmov	d0, r4, r5
 8009c2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c32:	2d00      	cmp	r5, #0
 8009c34:	dc0b      	bgt.n	8009c4e <__ieee754_sqrt+0x52>
 8009c36:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009c3a:	4326      	orrs	r6, r4
 8009c3c:	d0f5      	beq.n	8009c2a <__ieee754_sqrt+0x2e>
 8009c3e:	b135      	cbz	r5, 8009c4e <__ieee754_sqrt+0x52>
 8009c40:	f7f6 face 	bl	80001e0 <__aeabi_dsub>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	f7f6 fdac 	bl	80007a4 <__aeabi_ddiv>
 8009c4c:	e7eb      	b.n	8009c26 <__ieee754_sqrt+0x2a>
 8009c4e:	1509      	asrs	r1, r1, #20
 8009c50:	f000 808d 	beq.w	8009d6e <__ieee754_sqrt+0x172>
 8009c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c58:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c60:	07c9      	lsls	r1, r1, #31
 8009c62:	bf5c      	itt	pl
 8009c64:	005b      	lslpl	r3, r3, #1
 8009c66:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009c6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009c6e:	bf58      	it	pl
 8009c70:	0052      	lslpl	r2, r2, #1
 8009c72:	2500      	movs	r5, #0
 8009c74:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009c78:	1076      	asrs	r6, r6, #1
 8009c7a:	0052      	lsls	r2, r2, #1
 8009c7c:	f04f 0e16 	mov.w	lr, #22
 8009c80:	46ac      	mov	ip, r5
 8009c82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c86:	eb0c 0001 	add.w	r0, ip, r1
 8009c8a:	4298      	cmp	r0, r3
 8009c8c:	bfde      	ittt	le
 8009c8e:	1a1b      	suble	r3, r3, r0
 8009c90:	eb00 0c01 	addle.w	ip, r0, r1
 8009c94:	186d      	addle	r5, r5, r1
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	f1be 0e01 	subs.w	lr, lr, #1
 8009c9c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009ca0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009ca4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009ca8:	d1ed      	bne.n	8009c86 <__ieee754_sqrt+0x8a>
 8009caa:	4674      	mov	r4, lr
 8009cac:	2720      	movs	r7, #32
 8009cae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009cb2:	4563      	cmp	r3, ip
 8009cb4:	eb01 000e 	add.w	r0, r1, lr
 8009cb8:	dc02      	bgt.n	8009cc0 <__ieee754_sqrt+0xc4>
 8009cba:	d113      	bne.n	8009ce4 <__ieee754_sqrt+0xe8>
 8009cbc:	4290      	cmp	r0, r2
 8009cbe:	d811      	bhi.n	8009ce4 <__ieee754_sqrt+0xe8>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	eb00 0e01 	add.w	lr, r0, r1
 8009cc6:	da57      	bge.n	8009d78 <__ieee754_sqrt+0x17c>
 8009cc8:	f1be 0f00 	cmp.w	lr, #0
 8009ccc:	db54      	blt.n	8009d78 <__ieee754_sqrt+0x17c>
 8009cce:	f10c 0801 	add.w	r8, ip, #1
 8009cd2:	eba3 030c 	sub.w	r3, r3, ip
 8009cd6:	4290      	cmp	r0, r2
 8009cd8:	bf88      	it	hi
 8009cda:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8009cde:	1a12      	subs	r2, r2, r0
 8009ce0:	440c      	add	r4, r1
 8009ce2:	46c4      	mov	ip, r8
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	3f01      	subs	r7, #1
 8009ce8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009cec:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009cf0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009cf4:	d1dd      	bne.n	8009cb2 <__ieee754_sqrt+0xb6>
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	d01b      	beq.n	8009d32 <__ieee754_sqrt+0x136>
 8009cfa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009da8 <__ieee754_sqrt+0x1ac>
 8009cfe:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009dac <__ieee754_sqrt+0x1b0>
 8009d02:	e9da 0100 	ldrd	r0, r1, [sl]
 8009d06:	e9db 2300 	ldrd	r2, r3, [fp]
 8009d0a:	f7f6 fa69 	bl	80001e0 <__aeabi_dsub>
 8009d0e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d12:	4602      	mov	r2, r0
 8009d14:	460b      	mov	r3, r1
 8009d16:	4640      	mov	r0, r8
 8009d18:	4649      	mov	r1, r9
 8009d1a:	f7f6 fe95 	bl	8000a48 <__aeabi_dcmple>
 8009d1e:	b140      	cbz	r0, 8009d32 <__ieee754_sqrt+0x136>
 8009d20:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8009d24:	e9da 0100 	ldrd	r0, r1, [sl]
 8009d28:	e9db 2300 	ldrd	r2, r3, [fp]
 8009d2c:	d126      	bne.n	8009d7c <__ieee754_sqrt+0x180>
 8009d2e:	3501      	adds	r5, #1
 8009d30:	463c      	mov	r4, r7
 8009d32:	106a      	asrs	r2, r5, #1
 8009d34:	0863      	lsrs	r3, r4, #1
 8009d36:	07e9      	lsls	r1, r5, #31
 8009d38:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009d3c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009d40:	bf48      	it	mi
 8009d42:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009d46:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009d4a:	461c      	mov	r4, r3
 8009d4c:	e76d      	b.n	8009c2a <__ieee754_sqrt+0x2e>
 8009d4e:	0ad3      	lsrs	r3, r2, #11
 8009d50:	3815      	subs	r0, #21
 8009d52:	0552      	lsls	r2, r2, #21
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d0fa      	beq.n	8009d4e <__ieee754_sqrt+0x152>
 8009d58:	02dc      	lsls	r4, r3, #11
 8009d5a:	d50a      	bpl.n	8009d72 <__ieee754_sqrt+0x176>
 8009d5c:	f1c1 0420 	rsb	r4, r1, #32
 8009d60:	fa22 f404 	lsr.w	r4, r2, r4
 8009d64:	1e4d      	subs	r5, r1, #1
 8009d66:	408a      	lsls	r2, r1
 8009d68:	4323      	orrs	r3, r4
 8009d6a:	1b41      	subs	r1, r0, r5
 8009d6c:	e772      	b.n	8009c54 <__ieee754_sqrt+0x58>
 8009d6e:	4608      	mov	r0, r1
 8009d70:	e7f0      	b.n	8009d54 <__ieee754_sqrt+0x158>
 8009d72:	005b      	lsls	r3, r3, #1
 8009d74:	3101      	adds	r1, #1
 8009d76:	e7ef      	b.n	8009d58 <__ieee754_sqrt+0x15c>
 8009d78:	46e0      	mov	r8, ip
 8009d7a:	e7aa      	b.n	8009cd2 <__ieee754_sqrt+0xd6>
 8009d7c:	f7f6 fa32 	bl	80001e4 <__adddf3>
 8009d80:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4640      	mov	r0, r8
 8009d8a:	4649      	mov	r1, r9
 8009d8c:	f7f6 fe52 	bl	8000a34 <__aeabi_dcmplt>
 8009d90:	b120      	cbz	r0, 8009d9c <__ieee754_sqrt+0x1a0>
 8009d92:	1ca0      	adds	r0, r4, #2
 8009d94:	bf08      	it	eq
 8009d96:	3501      	addeq	r5, #1
 8009d98:	3402      	adds	r4, #2
 8009d9a:	e7ca      	b.n	8009d32 <__ieee754_sqrt+0x136>
 8009d9c:	3401      	adds	r4, #1
 8009d9e:	f024 0401 	bic.w	r4, r4, #1
 8009da2:	e7c6      	b.n	8009d32 <__ieee754_sqrt+0x136>
 8009da4:	7ff00000 	.word	0x7ff00000
 8009da8:	20000150 	.word	0x20000150
 8009dac:	20000158 	.word	0x20000158

08009db0 <_init>:
 8009db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db2:	bf00      	nop
 8009db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009db6:	bc08      	pop	{r3}
 8009db8:	469e      	mov	lr, r3
 8009dba:	4770      	bx	lr

08009dbc <_fini>:
 8009dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dbe:	bf00      	nop
 8009dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dc2:	bc08      	pop	{r3}
 8009dc4:	469e      	mov	lr, r3
 8009dc6:	4770      	bx	lr
