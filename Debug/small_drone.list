
small_drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000843c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080085d0  080085d0  000185d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008630  08008630  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008630  08008630  00018630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008638  08008638  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008638  08008638  00018638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800863c  0800863c  0001863c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c8  200000fc  0800873c  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  0800873c  000215c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000149bd  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032f5  00000000  00000000  00034b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001348  00000000  00000000  00037e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee6  00000000  00000000  00039170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f45  00000000  00000000  0003a056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000176f1  00000000  00000000  00052f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090c87  00000000  00000000  0006a68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051b0  00000000  00000000  000fb314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001004c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080085b8 	.word	0x080085b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	080085b8 	.word	0x080085b8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fb97 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f8e3 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f9f5 	bl	80008cc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e2:	f000 f94b 	bl	800077c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80004e6:	f007 fb51 	bl	8007b8c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80004ea:	f000 f975 	bl	80007d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004ee:	2100      	movs	r1, #0
 80004f0:	4869      	ldr	r0, [pc, #420]	; (8000698 <main+0x1c8>)
 80004f2:	f003 fb69 	bl	8003bc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004f6:	2104      	movs	r1, #4
 80004f8:	4867      	ldr	r0, [pc, #412]	; (8000698 <main+0x1c8>)
 80004fa:	f003 fb65 	bl	8003bc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80004fe:	2108      	movs	r1, #8
 8000500:	4865      	ldr	r0, [pc, #404]	; (8000698 <main+0x1c8>)
 8000502:	f003 fb61 	bl	8003bc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000506:	210c      	movs	r1, #12
 8000508:	4863      	ldr	r0, [pc, #396]	; (8000698 <main+0x1c8>)
 800050a:	f003 fb5d 	bl	8003bc8 <HAL_TIM_PWM_Start>
#define ACCEL_REG 28

	uint8_t temp; // used to write into reg

	// check if device is working
	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, 0x68 << 1, 1, 100);
 800050e:	2364      	movs	r3, #100	; 0x64
 8000510:	2201      	movs	r2, #1
 8000512:	21d0      	movs	r1, #208	; 0xd0
 8000514:	4861      	ldr	r0, [pc, #388]	; (800069c <main+0x1cc>)
 8000516:	f001 f8fb 	bl	8001710 <HAL_I2C_IsDeviceReady>
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d013      	beq.n	800054c <main+0x7c>
		while (1) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	485d      	ldr	r0, [pc, #372]	; (80006a0 <main+0x1d0>)
 800052c:	f000 fe98 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 8000530:	20c8      	movs	r0, #200	; 0xc8
 8000532:	f000 fbdb 	bl	8000cec <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053c:	4858      	ldr	r0, [pc, #352]	; (80006a0 <main+0x1d0>)
 800053e:	f000 fe8f 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_Delay(800);
 8000542:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000546:	f000 fbd1 	bl	8000cec <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800054a:	e7eb      	b.n	8000524 <main+0x54>
		}
	}

	// config gyro reg
	temp = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU_ARD, GYRO_REG, sizeof(temp), &temp,
 8000550:	2364      	movs	r3, #100	; 0x64
 8000552:	9302      	str	r3, [sp, #8]
 8000554:	2301      	movs	r3, #1
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	1dbb      	adds	r3, r7, #6
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2301      	movs	r3, #1
 800055e:	221b      	movs	r2, #27
 8000560:	21d0      	movs	r1, #208	; 0xd0
 8000562:	484e      	ldr	r0, [pc, #312]	; (800069c <main+0x1cc>)
 8000564:	f000 ffda 	bl	800151c <HAL_I2C_Mem_Write>
 8000568:	4603      	mov	r3, r0
 800056a:	71fb      	strb	r3, [r7, #7]
			sizeof(temp), 100);
	if (ret != HAL_OK) {
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d013      	beq.n	800059a <main+0xca>
		while (1) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000578:	4849      	ldr	r0, [pc, #292]	; (80006a0 <main+0x1d0>)
 800057a:	f000 fe71 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 800057e:	20c8      	movs	r0, #200	; 0xc8
 8000580:	f000 fbb4 	bl	8000cec <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058a:	4845      	ldr	r0, [pc, #276]	; (80006a0 <main+0x1d0>)
 800058c:	f000 fe68 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_Delay(800);
 8000590:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000594:	f000 fbaa 	bl	8000cec <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000598:	e7eb      	b.n	8000572 <main+0xa2>
		}
	}

	// config accel reg
	temp = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU_ARD, ACCEL_REG, sizeof(temp), &temp,
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	9302      	str	r3, [sp, #8]
 80005a2:	2301      	movs	r3, #1
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	1dbb      	adds	r3, r7, #6
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2301      	movs	r3, #1
 80005ac:	221c      	movs	r2, #28
 80005ae:	21d0      	movs	r1, #208	; 0xd0
 80005b0:	483a      	ldr	r0, [pc, #232]	; (800069c <main+0x1cc>)
 80005b2:	f000 ffb3 	bl	800151c <HAL_I2C_Mem_Write>
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
			sizeof(temp), 100);
	if (ret != HAL_OK) {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d013      	beq.n	80005e8 <main+0x118>
		while (1) {
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c6:	4836      	ldr	r0, [pc, #216]	; (80006a0 <main+0x1d0>)
 80005c8:	f000 fe4a 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_Delay(200);
 80005cc:	20c8      	movs	r0, #200	; 0xc8
 80005ce:	f000 fb8d 	bl	8000cec <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d8:	4831      	ldr	r0, [pc, #196]	; (80006a0 <main+0x1d0>)
 80005da:	f000 fe41 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_Delay(800);
 80005de:	f44f 7048 	mov.w	r0, #800	; 0x320
 80005e2:	f000 fb83 	bl	8000cec <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80005e6:	e7eb      	b.n	80005c0 <main+0xf0>
		}
	}
	TIM2->CCR1 = 1000;
 80005e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = 1000;
 80005f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005fa:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = 1000;
 80005fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000604:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = 1000;
 8000606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800060a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800060e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(2000);
 8000610:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000614:	f000 fb6a 	bl	8000cec <HAL_Delay>
	while (1) {
		// put here sampling
		temp = 10;
 8000618:	230a      	movs	r3, #10
 800061a:	71bb      	strb	r3, [r7, #6]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000622:	481f      	ldr	r0, [pc, #124]	; (80006a0 <main+0x1d0>)
 8000624:	f000 fe1c 	bl	8001260 <HAL_GPIO_WritePin>
		TIM2->CCR1 = 1000;
 8000628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800062c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 1000;
 8000632:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000636:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800063a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->CCR3 = 1000;
 800063c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000640:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000644:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = 1000;
 8000646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800064a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800064e:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(5000);
 8000650:	f241 3088 	movw	r0, #5000	; 0x1388
 8000654:	f000 fb4a 	bl	8000cec <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065e:	4810      	ldr	r0, [pc, #64]	; (80006a0 <main+0x1d0>)
 8000660:	f000 fdfe 	bl	8001260 <HAL_GPIO_WritePin>
		TIM2->CCR1 = 1050;
 8000664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000668:	f240 421a 	movw	r2, #1050	; 0x41a
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR2 = 1050;
 800066e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000672:	f240 421a 	movw	r2, #1050	; 0x41a
 8000676:	639a      	str	r2, [r3, #56]	; 0x38
		TIM2->CCR3 = 1050;
 8000678:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800067c:	f240 421a 	movw	r2, #1050	; 0x41a
 8000680:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM2->CCR4 = 1050;
 8000682:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000686:	f240 421a 	movw	r2, #1050	; 0x41a
 800068a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(5000);
 800068c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000690:	f000 fb2c 	bl	8000cec <HAL_Delay>
		temp = 10;
 8000694:	e7c0      	b.n	8000618 <main+0x148>
 8000696:	bf00      	nop
 8000698:	2000016c 	.word	0x2000016c
 800069c:	20000118 	.word	0x20000118
 80006a0:	40020800 	.word	0x40020800

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	; 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f007 ff54 	bl	8008560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b29      	ldr	r3, [pc, #164]	; (8000774 <SystemClock_Config+0xd0>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	4a28      	ldr	r2, [pc, #160]	; (8000774 <SystemClock_Config+0xd0>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	; 0x40
 80006d8:	4b26      	ldr	r3, [pc, #152]	; (8000774 <SystemClock_Config+0xd0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <SystemClock_Config+0xd4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <SystemClock_Config+0xd4>)
 80006f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <SystemClock_Config+0xd4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000704:	2301      	movs	r3, #1
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070e:	2302      	movs	r3, #2
 8000710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000718:	2319      	movs	r3, #25
 800071a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800071c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000722:	2304      	movs	r3, #4
 8000724:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000726:	2307      	movs	r3, #7
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fdb6 	bl	80032a0 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073a:	f000 f927 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2102      	movs	r1, #2
 800075a:	4618      	mov	r0, r3
 800075c:	f003 f818 	bl	8003790 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000766:	f000 f911 	bl	800098c <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	; 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2C1_Init+0x50>)
 8000782:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <MX_I2C1_Init+0x54>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_I2C1_Init+0x50>)
 8000788:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <MX_I2C1_Init+0x58>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_I2C1_Init+0x50>)
 800079a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_I2C1_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_I2C1_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_I2C1_Init+0x50>)
 80007ba:	f000 fd6b 	bl	8001294 <HAL_I2C_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c4:	f000 f8e2 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000118 	.word	0x20000118
 80007d0:	40005400 	.word	0x40005400
 80007d4:	00061a80 	.word	0x00061a80

080007d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <MX_TIM2_Init+0xf0>)
 80007fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000800:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <MX_TIM2_Init+0xf0>)
 8000804:	2253      	movs	r2, #83	; 0x53
 8000806:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <MX_TIM2_Init+0xf0>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800080e:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <MX_TIM2_Init+0xf0>)
 8000810:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000814:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b2c      	ldr	r3, [pc, #176]	; (80008c8 <MX_TIM2_Init+0xf0>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081c:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_TIM2_Init+0xf0>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000822:	4829      	ldr	r0, [pc, #164]	; (80008c8 <MX_TIM2_Init+0xf0>)
 8000824:	f003 f980 	bl	8003b28 <HAL_TIM_PWM_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800082e:	f000 f8ad 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	4619      	mov	r1, r3
 8000840:	4821      	ldr	r0, [pc, #132]	; (80008c8 <MX_TIM2_Init+0xf0>)
 8000842:	f003 fd65 	bl	8004310 <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800084c:	f000 f89e 	bl	800098c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000850:	2360      	movs	r3, #96	; 0x60
 8000852:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	4619      	mov	r1, r3
 8000866:	4818      	ldr	r0, [pc, #96]	; (80008c8 <MX_TIM2_Init+0xf0>)
 8000868:	f003 fa5e 	bl	8003d28 <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000872:	f000 f88b 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2204      	movs	r2, #4
 800087a:	4619      	mov	r1, r3
 800087c:	4812      	ldr	r0, [pc, #72]	; (80008c8 <MX_TIM2_Init+0xf0>)
 800087e:	f003 fa53 	bl	8003d28 <HAL_TIM_PWM_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000888:	f000 f880 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2208      	movs	r2, #8
 8000890:	4619      	mov	r1, r3
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_TIM2_Init+0xf0>)
 8000894:	f003 fa48 	bl	8003d28 <HAL_TIM_PWM_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800089e:	f000 f875 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	220c      	movs	r2, #12
 80008a6:	4619      	mov	r1, r3
 80008a8:	4807      	ldr	r0, [pc, #28]	; (80008c8 <MX_TIM2_Init+0xf0>)
 80008aa:	f003 fa3d 	bl	8003d28 <HAL_TIM_PWM_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80008b4:	f000 f86a 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008b8:	4803      	ldr	r0, [pc, #12]	; (80008c8 <MX_TIM2_Init+0xf0>)
 80008ba:	f000 f8fd 	bl	8000ab8 <HAL_TIM_MspPostInit>

}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000016c 	.word	0x2000016c

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b27      	ldr	r3, [pc, #156]	; (8000984 <MX_GPIO_Init+0xb8>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a26      	ldr	r2, [pc, #152]	; (8000984 <MX_GPIO_Init+0xb8>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b24      	ldr	r3, [pc, #144]	; (8000984 <MX_GPIO_Init+0xb8>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a1f      	ldr	r2, [pc, #124]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b19      	ldr	r3, [pc, #100]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a18      	ldr	r2, [pc, #96]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_GPIO_Init+0xb8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_GPIO_Init+0xb8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_GPIO_Init+0xb8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000958:	480b      	ldr	r0, [pc, #44]	; (8000988 <MX_GPIO_Init+0xbc>)
 800095a:	f000 fc81 	bl	8001260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800095e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_GPIO_Init+0xbc>)
 8000978:	f000 faee 	bl	8000f58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40020800 	.word	0x40020800

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a19      	ldr	r2, [pc, #100]	; (8000a6c <HAL_I2C_MspInit+0x84>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d12b      	bne.n	8000a62 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <HAL_I2C_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <HAL_I2C_MspInit+0x88>)
 8000a14:	f043 0302 	orr.w	r3, r3, #2
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <HAL_I2C_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a26:	23c0      	movs	r3, #192	; 0xc0
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2a:	2312      	movs	r3, #18
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a36:	2304      	movs	r3, #4
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <HAL_I2C_MspInit+0x8c>)
 8000a42:	f000 fa89 	bl	8000f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_I2C_MspInit+0x88>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_I2C_MspInit+0x88>)
 8000a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_I2C_MspInit+0x88>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40005400 	.word	0x40005400
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40020400 	.word	0x40020400

08000a78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a88:	d10d      	bne.n	8000aa6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad8:	d11d      	bne.n	8000b16 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_TIM_MspPostInit+0x68>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_TIM_MspPostInit+0x68>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_TIM_MspPostInit+0x68>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000af6:	230f      	movs	r3, #15
 8000af8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b06:	2301      	movs	r3, #1
 8000b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <HAL_TIM_MspPostInit+0x6c>)
 8000b12:	f000 fa21 	bl	8000f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <MemManage_Handler+0x4>

08000b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b74:	f000 f89a 	bl	8000cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <OTG_FS_IRQHandler+0x10>)
 8000b82:	f001 fa60 	bl	8002046 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000e98 	.word	0x20000e98

08000b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <SystemInit+0x20>)
 8000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <SystemInit+0x20>)
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	; (8000c00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bde:	f7ff ffd7 	bl	8000b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f007 fcc5 	bl	8008570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be6:	f7ff fc73 	bl	80004d0 <main>
  bx  lr    
 8000bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000bf8:	08008640 	.word	0x08008640
  ldr r2, =_sbss
 8000bfc:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000c00:	200015c4 	.word	0x200015c4

08000c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC_IRQHandler>
	...

08000c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <HAL_Init+0x40>)
 8000c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_Init+0x40>)
 8000c1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <HAL_Init+0x40>)
 8000c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 f94f 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	200f      	movs	r0, #15
 8000c38:	f000 f808 	bl	8000c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3c:	f7ff feac 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023c00 	.word	0x40023c00

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x54>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x58>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f967 	bl	8000f3e <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00e      	b.n	8000c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d80a      	bhi.n	8000c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c88:	f000 f92f 	bl	8000eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c8c:	4a06      	ldr	r2, [pc, #24]	; (8000ca8 <HAL_InitTick+0x5c>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e000      	b.n	8000c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000004 	.word	0x20000004

08000cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	200001b4 	.word	0x200001b4

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	200001b4 	.word	0x200001b4

08000cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf4:	f7ff ffee 	bl	8000cd4 <HAL_GetTick>
 8000cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d04:	d005      	beq.n	8000d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_Delay+0x44>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	4413      	add	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d12:	bf00      	nop
 8000d14:	f7ff ffde 	bl	8000cd4 <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d8f7      	bhi.n	8000d14 <HAL_Delay+0x28>
  {
  }
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008

08000d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d66:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <__NVIC_SetPriorityGrouping+0x44>)
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4907      	ldr	r1, [pc, #28]	; (8000dd0 <__NVIC_EnableIRQ+0x38>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea0:	d301      	bcc.n	8000ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00f      	b.n	8000ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <SysTick_Config+0x40>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eae:	210f      	movs	r1, #15
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb4:	f7ff ff8e 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SysTick_Config+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SysTick_Config+0x40>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff29 	bl	8000d34 <__NVIC_SetPriorityGrouping>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000efc:	f7ff ff3e 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	6978      	ldr	r0, [r7, #20]
 8000f08:	f7ff ff8e 	bl	8000e28 <NVIC_EncodePriority>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff5d 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff31 	bl	8000d98 <__NVIC_EnableIRQ>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffa2 	bl	8000e90 <SysTick_Config>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	e159      	b.n	8001228 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 8148 	bne.w	8001222 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d005      	beq.n	8000faa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d130      	bne.n	800100c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	091b      	lsrs	r3, r3, #4
 8000ff6:	f003 0201 	and.w	r2, r3, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b03      	cmp	r3, #3
 8001016:	d017      	beq.n	8001048 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d123      	bne.n	800109c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	69b9      	ldr	r1, [r7, #24]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80a2 	beq.w	8001222 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b57      	ldr	r3, [pc, #348]	; (8001240 <HAL_GPIO_Init+0x2e8>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a56      	ldr	r2, [pc, #344]	; (8001240 <HAL_GPIO_Init+0x2e8>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
 80010ee:	4b54      	ldr	r3, [pc, #336]	; (8001240 <HAL_GPIO_Init+0x2e8>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fa:	4a52      	ldr	r2, [pc, #328]	; (8001244 <HAL_GPIO_Init+0x2ec>)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a49      	ldr	r2, [pc, #292]	; (8001248 <HAL_GPIO_Init+0x2f0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d019      	beq.n	800115a <HAL_GPIO_Init+0x202>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a48      	ldr	r2, [pc, #288]	; (800124c <HAL_GPIO_Init+0x2f4>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d013      	beq.n	8001156 <HAL_GPIO_Init+0x1fe>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a47      	ldr	r2, [pc, #284]	; (8001250 <HAL_GPIO_Init+0x2f8>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d00d      	beq.n	8001152 <HAL_GPIO_Init+0x1fa>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a46      	ldr	r2, [pc, #280]	; (8001254 <HAL_GPIO_Init+0x2fc>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d007      	beq.n	800114e <HAL_GPIO_Init+0x1f6>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a45      	ldr	r2, [pc, #276]	; (8001258 <HAL_GPIO_Init+0x300>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_GPIO_Init+0x1f2>
 8001146:	2304      	movs	r3, #4
 8001148:	e008      	b.n	800115c <HAL_GPIO_Init+0x204>
 800114a:	2307      	movs	r3, #7
 800114c:	e006      	b.n	800115c <HAL_GPIO_Init+0x204>
 800114e:	2303      	movs	r3, #3
 8001150:	e004      	b.n	800115c <HAL_GPIO_Init+0x204>
 8001152:	2302      	movs	r3, #2
 8001154:	e002      	b.n	800115c <HAL_GPIO_Init+0x204>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <HAL_GPIO_Init+0x204>
 800115a:	2300      	movs	r3, #0
 800115c:	69fa      	ldr	r2, [r7, #28]
 800115e:	f002 0203 	and.w	r2, r2, #3
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	4093      	lsls	r3, r2
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800116c:	4935      	ldr	r1, [pc, #212]	; (8001244 <HAL_GPIO_Init+0x2ec>)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117a:	4b38      	ldr	r3, [pc, #224]	; (800125c <HAL_GPIO_Init+0x304>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119e:	4a2f      	ldr	r2, [pc, #188]	; (800125c <HAL_GPIO_Init+0x304>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_GPIO_Init+0x304>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c8:	4a24      	ldr	r2, [pc, #144]	; (800125c <HAL_GPIO_Init+0x304>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <HAL_GPIO_Init+0x304>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f2:	4a1a      	ldr	r2, [pc, #104]	; (800125c <HAL_GPIO_Init+0x304>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_GPIO_Init+0x304>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800121c:	4a0f      	ldr	r2, [pc, #60]	; (800125c <HAL_GPIO_Init+0x304>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3301      	adds	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	2b0f      	cmp	r3, #15
 800122c:	f67f aea2 	bls.w	8000f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800
 8001244:	40013800 	.word	0x40013800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	40020800 	.word	0x40020800
 8001254:	40020c00 	.word	0x40020c00
 8001258:	40021000 	.word	0x40021000
 800125c:	40013c00 	.word	0x40013c00

08001260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
 800126c:	4613      	mov	r3, r2
 800126e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800127c:	e003      	b.n	8001286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	041a      	lsls	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	619a      	str	r2, [r3, #24]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e12b      	b.n	80014fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d106      	bne.n	80012c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fb94 	bl	80009e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2224      	movs	r2, #36	; 0x24
 80012c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 0201 	bic.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012f8:	f002 fc02 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 80012fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4a81      	ldr	r2, [pc, #516]	; (8001508 <HAL_I2C_Init+0x274>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d807      	bhi.n	8001318 <HAL_I2C_Init+0x84>
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4a80      	ldr	r2, [pc, #512]	; (800150c <HAL_I2C_Init+0x278>)
 800130c:	4293      	cmp	r3, r2
 800130e:	bf94      	ite	ls
 8001310:	2301      	movls	r3, #1
 8001312:	2300      	movhi	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	e006      	b.n	8001326 <HAL_I2C_Init+0x92>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4a7d      	ldr	r2, [pc, #500]	; (8001510 <HAL_I2C_Init+0x27c>)
 800131c:	4293      	cmp	r3, r2
 800131e:	bf94      	ite	ls
 8001320:	2301      	movls	r3, #1
 8001322:	2300      	movhi	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e0e7      	b.n	80014fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4a78      	ldr	r2, [pc, #480]	; (8001514 <HAL_I2C_Init+0x280>)
 8001332:	fba2 2303 	umull	r2, r3, r2, r3
 8001336:	0c9b      	lsrs	r3, r3, #18
 8001338:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	430a      	orrs	r2, r1
 800134c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4a6a      	ldr	r2, [pc, #424]	; (8001508 <HAL_I2C_Init+0x274>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d802      	bhi.n	8001368 <HAL_I2C_Init+0xd4>
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3301      	adds	r3, #1
 8001366:	e009      	b.n	800137c <HAL_I2C_Init+0xe8>
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	4a69      	ldr	r2, [pc, #420]	; (8001518 <HAL_I2C_Init+0x284>)
 8001374:	fba2 2303 	umull	r2, r3, r2, r3
 8001378:	099b      	lsrs	r3, r3, #6
 800137a:	3301      	adds	r3, #1
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	430b      	orrs	r3, r1
 8001382:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800138e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	495c      	ldr	r1, [pc, #368]	; (8001508 <HAL_I2C_Init+0x274>)
 8001398:	428b      	cmp	r3, r1
 800139a:	d819      	bhi.n	80013d0 <HAL_I2C_Init+0x13c>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1e59      	subs	r1, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80013aa:	1c59      	adds	r1, r3, #1
 80013ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013b0:	400b      	ands	r3, r1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00a      	beq.n	80013cc <HAL_I2C_Init+0x138>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1e59      	subs	r1, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013c4:	3301      	adds	r3, #1
 80013c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ca:	e051      	b.n	8001470 <HAL_I2C_Init+0x1dc>
 80013cc:	2304      	movs	r3, #4
 80013ce:	e04f      	b.n	8001470 <HAL_I2C_Init+0x1dc>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d111      	bne.n	80013fc <HAL_I2C_Init+0x168>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1e58      	subs	r0, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6859      	ldr	r1, [r3, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	440b      	add	r3, r1
 80013e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ea:	3301      	adds	r3, #1
 80013ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bf0c      	ite	eq
 80013f4:	2301      	moveq	r3, #1
 80013f6:	2300      	movne	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	e012      	b.n	8001422 <HAL_I2C_Init+0x18e>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	1e58      	subs	r0, r3, #1
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6859      	ldr	r1, [r3, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	0099      	lsls	r1, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001412:	3301      	adds	r3, #1
 8001414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_I2C_Init+0x196>
 8001426:	2301      	movs	r3, #1
 8001428:	e022      	b.n	8001470 <HAL_I2C_Init+0x1dc>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10e      	bne.n	8001450 <HAL_I2C_Init+0x1bc>
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1e58      	subs	r0, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6859      	ldr	r1, [r3, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	440b      	add	r3, r1
 8001440:	fbb0 f3f3 	udiv	r3, r0, r3
 8001444:	3301      	adds	r3, #1
 8001446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800144a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800144e:	e00f      	b.n	8001470 <HAL_I2C_Init+0x1dc>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	1e58      	subs	r0, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6859      	ldr	r1, [r3, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	440b      	add	r3, r1
 800145e:	0099      	lsls	r1, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	fbb0 f3f3 	udiv	r3, r0, r3
 8001466:	3301      	adds	r3, #1
 8001468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	6809      	ldr	r1, [r1, #0]
 8001474:	4313      	orrs	r3, r2
 8001476:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69da      	ldr	r2, [r3, #28]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800149e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6911      	ldr	r1, [r2, #16]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68d2      	ldr	r2, [r2, #12]
 80014aa:	4311      	orrs	r1, r2
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	430b      	orrs	r3, r1
 80014b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695a      	ldr	r2, [r3, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0201 	orr.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2220      	movs	r2, #32
 80014ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	000186a0 	.word	0x000186a0
 800150c:	001e847f 	.word	0x001e847f
 8001510:	003d08ff 	.word	0x003d08ff
 8001514:	431bde83 	.word	0x431bde83
 8001518:	10624dd3 	.word	0x10624dd3

0800151c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af02      	add	r7, sp, #8
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	4608      	mov	r0, r1
 8001526:	4611      	mov	r1, r2
 8001528:	461a      	mov	r2, r3
 800152a:	4603      	mov	r3, r0
 800152c:	817b      	strh	r3, [r7, #10]
 800152e:	460b      	mov	r3, r1
 8001530:	813b      	strh	r3, [r7, #8]
 8001532:	4613      	mov	r3, r2
 8001534:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001536:	f7ff fbcd 	bl	8000cd4 <HAL_GetTick>
 800153a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b20      	cmp	r3, #32
 8001546:	f040 80d9 	bne.w	80016fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2319      	movs	r3, #25
 8001550:	2201      	movs	r2, #1
 8001552:	496d      	ldr	r1, [pc, #436]	; (8001708 <HAL_I2C_Mem_Write+0x1ec>)
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 fa9f 	bl	8001a98 <I2C_WaitOnFlagUntilTimeout>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001560:	2302      	movs	r3, #2
 8001562:	e0cc      	b.n	80016fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_I2C_Mem_Write+0x56>
 800156e:	2302      	movs	r3, #2
 8001570:	e0c5      	b.n	80016fe <HAL_I2C_Mem_Write+0x1e2>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d007      	beq.n	8001598 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2221      	movs	r2, #33	; 0x21
 80015ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2240      	movs	r2, #64	; 0x40
 80015b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a3a      	ldr	r2, [r7, #32]
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4a4d      	ldr	r2, [pc, #308]	; (800170c <HAL_I2C_Mem_Write+0x1f0>)
 80015d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015da:	88f8      	ldrh	r0, [r7, #6]
 80015dc:	893a      	ldrh	r2, [r7, #8]
 80015de:	8979      	ldrh	r1, [r7, #10]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	4603      	mov	r3, r0
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 f9be 	bl	800196c <I2C_RequestMemoryWrite>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d052      	beq.n	800169c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e081      	b.n	80016fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 fb20 	bl	8001c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00d      	beq.n	8001626 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	2b04      	cmp	r3, #4
 8001610:	d107      	bne.n	8001622 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001620:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e06b      	b.n	80016fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	781a      	ldrb	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001640:	3b01      	subs	r3, #1
 8001642:	b29a      	uxth	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164c:	b29b      	uxth	r3, r3
 800164e:	3b01      	subs	r3, #1
 8001650:	b29a      	uxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b04      	cmp	r3, #4
 8001662:	d11b      	bne.n	800169c <HAL_I2C_Mem_Write+0x180>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001668:	2b00      	cmp	r3, #0
 800166a:	d017      	beq.n	800169c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	781a      	ldrb	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001686:	3b01      	subs	r3, #1
 8001688:	b29a      	uxth	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001692:	b29b      	uxth	r3, r3
 8001694:	3b01      	subs	r3, #1
 8001696:	b29a      	uxth	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1aa      	bne.n	80015fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f000 fb0c 	bl	8001cc6 <I2C_WaitOnBTFFlagUntilTimeout>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00d      	beq.n	80016d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d107      	bne.n	80016cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e016      	b.n	80016fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2220      	movs	r2, #32
 80016e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e000      	b.n	80016fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80016fc:	2302      	movs	r3, #2
  }
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	00100002 	.word	0x00100002
 800170c:	ffff0000 	.word	0xffff0000

08001710 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af02      	add	r7, sp, #8
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	460b      	mov	r3, r1
 800171e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff fad8 	bl	8000cd4 <HAL_GetTick>
 8001724:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b20      	cmp	r3, #32
 8001734:	f040 8111 	bne.w	800195a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2319      	movs	r3, #25
 800173e:	2201      	movs	r2, #1
 8001740:	4988      	ldr	r1, [pc, #544]	; (8001964 <HAL_I2C_IsDeviceReady+0x254>)
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f9a8 	bl	8001a98 <I2C_WaitOnFlagUntilTimeout>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800174e:	2302      	movs	r3, #2
 8001750:	e104      	b.n	800195c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_I2C_IsDeviceReady+0x50>
 800175c:	2302      	movs	r3, #2
 800175e:	e0fd      	b.n	800195c <HAL_I2C_IsDeviceReady+0x24c>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b01      	cmp	r3, #1
 8001774:	d007      	beq.n	8001786 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001794:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2224      	movs	r2, #36	; 0x24
 800179a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4a70      	ldr	r2, [pc, #448]	; (8001968 <HAL_I2C_IsDeviceReady+0x258>)
 80017a8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f966 	bl	8001a98 <I2C_WaitOnFlagUntilTimeout>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00d      	beq.n	80017ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e0:	d103      	bne.n	80017ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e0b6      	b.n	800195c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017ee:	897b      	ldrh	r3, [r7, #10]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fa69 	bl	8000cd4 <HAL_GetTick>
 8001802:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b02      	cmp	r3, #2
 8001810:	bf0c      	ite	eq
 8001812:	2301      	moveq	r3, #1
 8001814:	2300      	movne	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001828:	bf0c      	ite	eq
 800182a:	2301      	moveq	r3, #1
 800182c:	2300      	movne	r3, #0
 800182e:	b2db      	uxtb	r3, r3
 8001830:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001832:	e025      	b.n	8001880 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001834:	f7ff fa4e 	bl	8000cd4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d302      	bcc.n	800184a <HAL_I2C_IsDeviceReady+0x13a>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d103      	bne.n	8001852 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	22a0      	movs	r2, #160	; 0xa0
 800184e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b02      	cmp	r3, #2
 800185e:	bf0c      	ite	eq
 8001860:	2301      	moveq	r3, #1
 8001862:	2300      	movne	r3, #0
 8001864:	b2db      	uxtb	r3, r3
 8001866:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2ba0      	cmp	r3, #160	; 0xa0
 800188a:	d005      	beq.n	8001898 <HAL_I2C_IsDeviceReady+0x188>
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <HAL_I2C_IsDeviceReady+0x188>
 8001892:	7dbb      	ldrb	r3, [r7, #22]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0cd      	beq.n	8001834 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2220      	movs	r2, #32
 800189c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d129      	bne.n	8001902 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2319      	movs	r3, #25
 80018da:	2201      	movs	r2, #1
 80018dc:	4921      	ldr	r1, [pc, #132]	; (8001964 <HAL_I2C_IsDeviceReady+0x254>)
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 f8da 	bl	8001a98 <I2C_WaitOnFlagUntilTimeout>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e036      	b.n	800195c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2220      	movs	r2, #32
 80018f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	e02c      	b.n	800195c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001910:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800191a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2319      	movs	r3, #25
 8001922:	2201      	movs	r2, #1
 8001924:	490f      	ldr	r1, [pc, #60]	; (8001964 <HAL_I2C_IsDeviceReady+0x254>)
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f8b6 	bl	8001a98 <I2C_WaitOnFlagUntilTimeout>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e012      	b.n	800195c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	3301      	adds	r3, #1
 800193a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	429a      	cmp	r2, r3
 8001942:	f4ff af32 	bcc.w	80017aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2220      	movs	r2, #32
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800195a:	2302      	movs	r3, #2
  }
}
 800195c:	4618      	mov	r0, r3
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	00100002 	.word	0x00100002
 8001968:	ffff0000 	.word	0xffff0000

0800196c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af02      	add	r7, sp, #8
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	4608      	mov	r0, r1
 8001976:	4611      	mov	r1, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4603      	mov	r3, r0
 800197c:	817b      	strh	r3, [r7, #10]
 800197e:	460b      	mov	r3, r1
 8001980:	813b      	strh	r3, [r7, #8]
 8001982:	4613      	mov	r3, r2
 8001984:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001994:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	2200      	movs	r2, #0
 800199e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 f878 	bl	8001a98 <I2C_WaitOnFlagUntilTimeout>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00d      	beq.n	80019ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019bc:	d103      	bne.n	80019c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e05f      	b.n	8001a8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019ca:	897b      	ldrh	r3, [r7, #10]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	6a3a      	ldr	r2, [r7, #32]
 80019de:	492d      	ldr	r1, [pc, #180]	; (8001a94 <I2C_RequestMemoryWrite+0x128>)
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 f8b0 	bl	8001b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e04c      	b.n	8001a8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a08:	6a39      	ldr	r1, [r7, #32]
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 f91a 	bl	8001c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00d      	beq.n	8001a32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d107      	bne.n	8001a2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e02b      	b.n	8001a8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d105      	bne.n	8001a44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a38:	893b      	ldrh	r3, [r7, #8]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	611a      	str	r2, [r3, #16]
 8001a42:	e021      	b.n	8001a88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a44:	893b      	ldrh	r3, [r7, #8]
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a54:	6a39      	ldr	r1, [r7, #32]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 f8f4 	bl	8001c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00d      	beq.n	8001a7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d107      	bne.n	8001a7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e005      	b.n	8001a8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a7e:	893b      	ldrh	r3, [r7, #8]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	00010002 	.word	0x00010002

08001a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aa8:	e025      	b.n	8001af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ab0:	d021      	beq.n	8001af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab2:	f7ff f90f 	bl	8000cd4 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d302      	bcc.n	8001ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d116      	bne.n	8001af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f043 0220 	orr.w	r2, r3, #32
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e023      	b.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d10d      	bne.n	8001b1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bf0c      	ite	eq
 8001b12:	2301      	moveq	r3, #1
 8001b14:	2300      	movne	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	e00c      	b.n	8001b36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4013      	ands	r3, r2
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf0c      	ite	eq
 8001b2e:	2301      	moveq	r3, #1
 8001b30:	2300      	movne	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	461a      	mov	r2, r3
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d0b6      	beq.n	8001aaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b54:	e051      	b.n	8001bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b64:	d123      	bne.n	8001bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f043 0204 	orr.w	r2, r3, #4
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e046      	b.n	8001c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bb4:	d021      	beq.n	8001bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb6:	f7ff f88d 	bl	8000cd4 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d302      	bcc.n	8001bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d116      	bne.n	8001bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f043 0220 	orr.w	r2, r3, #32
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e020      	b.n	8001c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	0c1b      	lsrs	r3, r3, #16
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d10c      	bne.n	8001c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	bf14      	ite	ne
 8001c16:	2301      	movne	r3, #1
 8001c18:	2300      	moveq	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	e00b      	b.n	8001c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	43da      	mvns	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf14      	ite	ne
 8001c30:	2301      	movne	r3, #1
 8001c32:	2300      	moveq	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d18d      	bne.n	8001b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c50:	e02d      	b.n	8001cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 f878 	bl	8001d48 <I2C_IsAcknowledgeFailed>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e02d      	b.n	8001cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c68:	d021      	beq.n	8001cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c6a:	f7ff f833 	bl	8000cd4 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d302      	bcc.n	8001c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d116      	bne.n	8001cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f043 0220 	orr.w	r2, r3, #32
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e007      	b.n	8001cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	2b80      	cmp	r3, #128	; 0x80
 8001cba:	d1ca      	bne.n	8001c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cd2:	e02d      	b.n	8001d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f837 	bl	8001d48 <I2C_IsAcknowledgeFailed>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e02d      	b.n	8001d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cea:	d021      	beq.n	8001d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cec:	f7fe fff2 	bl	8000cd4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d302      	bcc.n	8001d02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d116      	bne.n	8001d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f043 0220 	orr.w	r2, r3, #32
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e007      	b.n	8001d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d1ca      	bne.n	8001cd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5e:	d11b      	bne.n	8001d98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f043 0204 	orr.w	r2, r3, #4
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001da6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da8:	b08f      	sub	sp, #60	; 0x3c
 8001daa:	af0a      	add	r7, sp, #40	; 0x28
 8001dac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e10f      	b.n	8001fd8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f006 f8ba 	bl	8007f4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2203      	movs	r2, #3
 8001ddc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fc0d 	bl	8004616 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	687e      	ldr	r6, [r7, #4]
 8001e04:	466d      	mov	r5, sp
 8001e06:	f106 0410 	add.w	r4, r6, #16
 8001e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e16:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e1a:	1d33      	adds	r3, r6, #4
 8001e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e1e:	6838      	ldr	r0, [r7, #0]
 8001e20:	f002 fae4 	bl	80043ec <USB_CoreInit>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0d0      	b.n	8001fd8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 fbfb 	bl	8004638 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	73fb      	strb	r3, [r7, #15]
 8001e46:	e04a      	b.n	8001ede <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	333d      	adds	r3, #61	; 0x3d
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	333c      	adds	r3, #60	; 0x3c
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	b298      	uxth	r0, r3
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3344      	adds	r3, #68	; 0x44
 8001e84:	4602      	mov	r2, r0
 8001e86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	3340      	adds	r3, #64	; 0x40
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3348      	adds	r3, #72	; 0x48
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	334c      	adds	r3, #76	; 0x4c
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3354      	adds	r3, #84	; 0x54
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	3301      	adds	r3, #1
 8001edc:	73fb      	strb	r3, [r7, #15]
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d3af      	bcc.n	8001e48 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e044      	b.n	8001f78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	3301      	adds	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d3b5      	bcc.n	8001eee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	687e      	ldr	r6, [r7, #4]
 8001f8a:	466d      	mov	r5, sp
 8001f8c:	f106 0410 	add.w	r4, r6, #16
 8001f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fa0:	1d33      	adds	r3, r6, #4
 8001fa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa4:	6838      	ldr	r0, [r7, #0]
 8001fa6:	f002 fb93 	bl	80046d0 <USB_DevInit>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e00d      	b.n	8001fd8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 fce2 	bl	800599a <USB_DevDisconnect>

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fe0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_PCD_Start+0x1c>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e020      	b.n	800203e <HAL_PCD_Start+0x5e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	2b01      	cmp	r3, #1
 800200a:	d109      	bne.n	8002020 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002010:	2b01      	cmp	r3, #1
 8002012:	d005      	beq.n	8002020 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002018:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f002 fae5 	bl	80045f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fc92 	bl	8005958 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002046:	b590      	push	{r4, r7, lr}
 8002048:	b08d      	sub	sp, #52	; 0x34
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fd50 	bl	8005b02 <USB_GetMode>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	f040 848a 	bne.w	800297e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f003 fcb4 	bl	80059dc <USB_ReadInterrupts>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8480 	beq.w	800297c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f003 fca1 	bl	80059dc <USB_ReadInterrupts>
 800209a:	4603      	mov	r3, r0
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d107      	bne.n	80020b4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f002 0202 	and.w	r2, r2, #2
 80020b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f003 fc8f 	bl	80059dc <USB_ReadInterrupts>
 80020be:	4603      	mov	r3, r0
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b10      	cmp	r3, #16
 80020c6:	d161      	bne.n	800218c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699a      	ldr	r2, [r3, #24]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0210 	bic.w	r2, r2, #16
 80020d6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	f003 020f 	and.w	r2, r3, #15
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	3304      	adds	r3, #4
 80020f6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	0c5b      	lsrs	r3, r3, #17
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	2b02      	cmp	r3, #2
 8002102:	d124      	bne.n	800214e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800210a:	4013      	ands	r3, r2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d035      	beq.n	800217c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	091b      	lsrs	r3, r3, #4
 8002118:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800211a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211e:	b29b      	uxth	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	6a38      	ldr	r0, [r7, #32]
 8002124:	f003 fac6 	bl	80056b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002134:	441a      	add	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	6a1a      	ldr	r2, [r3, #32]
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002146:	441a      	add	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	621a      	str	r2, [r3, #32]
 800214c:	e016      	b.n	800217c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	0c5b      	lsrs	r3, r3, #17
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	2b06      	cmp	r3, #6
 8002158:	d110      	bne.n	800217c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002160:	2208      	movs	r2, #8
 8002162:	4619      	mov	r1, r3
 8002164:	6a38      	ldr	r0, [r7, #32]
 8002166:	f003 faa5 	bl	80056b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	6a1a      	ldr	r2, [r3, #32]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002176:	441a      	add	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0210 	orr.w	r2, r2, #16
 800218a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f003 fc23 	bl	80059dc <USB_ReadInterrupts>
 8002196:	4603      	mov	r3, r0
 8002198:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800219c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021a0:	f040 80a7 	bne.w	80022f2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f003 fc28 	bl	8005a02 <USB_ReadDevAllOutEpInterrupt>
 80021b2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021b4:	e099      	b.n	80022ea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 808e 	beq.w	80022de <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f003 fc4c 	bl	8005a6a <USB_ReadDevOutEPInterrupt>
 80021d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00c      	beq.n	80021f8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ea:	461a      	mov	r2, r3
 80021ec:	2301      	movs	r3, #1
 80021ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80021f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fec2 	bl	8002f7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00c      	beq.n	800221c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220e:	461a      	mov	r2, r3
 8002210:	2308      	movs	r3, #8
 8002212:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 ff98 	bl	800314c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	4413      	add	r3, r2
 800222e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002232:	461a      	mov	r2, r3
 8002234:	2310      	movs	r3, #16
 8002236:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d030      	beq.n	80022a4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224a:	2b80      	cmp	r3, #128	; 0x80
 800224c:	d109      	bne.n	8002262 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800225c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002260:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	3304      	adds	r3, #4
 8002276:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	78db      	ldrb	r3, [r3, #3]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d108      	bne.n	8002292 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2200      	movs	r2, #0
 8002284:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	b2db      	uxtb	r3, r3
 800228a:	4619      	mov	r1, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f005 ff59 	bl	8008144 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229e:	461a      	mov	r2, r3
 80022a0:	2302      	movs	r3, #2
 80022a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ba:	461a      	mov	r2, r3
 80022bc:	2320      	movs	r3, #32
 80022be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d6:	461a      	mov	r2, r3
 80022d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	3301      	adds	r3, #1
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e6:	085b      	lsrs	r3, r3, #1
 80022e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f47f af62 	bne.w	80021b6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 fb70 	bl	80059dc <USB_ReadInterrupts>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002302:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002306:	f040 80db 	bne.w	80024c0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f003 fb91 	bl	8005a36 <USB_ReadDevAllInEpInterrupt>
 8002314:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800231a:	e0cd      	b.n	80024b8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80c2 	beq.w	80024ac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f003 fbb7 	bl	8005aa6 <USB_ReadDevInEPInterrupt>
 8002338:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d057      	beq.n	80023f4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	2201      	movs	r2, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	43db      	mvns	r3, r3
 800235e:	69f9      	ldr	r1, [r7, #28]
 8002360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002364:	4013      	ands	r3, r2
 8002366:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	4413      	add	r3, r2
 8002370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002374:	461a      	mov	r2, r3
 8002376:	2301      	movs	r3, #1
 8002378:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d132      	bne.n	80023e8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	334c      	adds	r3, #76	; 0x4c
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4403      	add	r3, r0
 80023a2:	3348      	adds	r3, #72	; 0x48
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4419      	add	r1, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4403      	add	r3, r0
 80023b6:	334c      	adds	r3, #76	; 0x4c
 80023b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d113      	bne.n	80023e8 <HAL_PCD_IRQHandler+0x3a2>
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	3354      	adds	r3, #84	; 0x54
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d108      	bne.n	80023e8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023e0:	461a      	mov	r2, r3
 80023e2:	2101      	movs	r1, #1
 80023e4:	f003 fbbe 	bl	8005b64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f005 fe2d 	bl	800804e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d008      	beq.n	8002410 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	015a      	lsls	r2, r3, #5
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	4413      	add	r3, r2
 8002406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800240a:	461a      	mov	r2, r3
 800240c:	2308      	movs	r3, #8
 800240e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	4413      	add	r3, r2
 8002422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002426:	461a      	mov	r2, r3
 8002428:	2310      	movs	r3, #16
 800242a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	4413      	add	r3, r2
 800243e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002442:	461a      	mov	r2, r3
 8002444:	2340      	movs	r3, #64	; 0x40
 8002446:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d023      	beq.n	800249a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002452:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002454:	6a38      	ldr	r0, [r7, #32]
 8002456:	f002 fa9f 	bl	8004998 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800245a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	3338      	adds	r3, #56	; 0x38
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	3304      	adds	r3, #4
 800246c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	78db      	ldrb	r3, [r3, #3]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d108      	bne.n	8002488 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2200      	movs	r2, #0
 800247a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	b2db      	uxtb	r3, r3
 8002480:	4619      	mov	r1, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f005 fe70 	bl	8008168 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	4413      	add	r3, r2
 8002490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002494:	461a      	mov	r2, r3
 8002496:	2302      	movs	r3, #2
 8002498:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fcdb 	bl	8002e62 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	3301      	adds	r3, #1
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f47f af2e 	bne.w	800231c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f003 fa89 	bl	80059dc <USB_ReadInterrupts>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024d4:	d122      	bne.n	800251c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d108      	bne.n	8002506 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024fc:	2100      	movs	r1, #0
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fec2 	bl	8003288 <HAL_PCDEx_LPM_Callback>
 8002504:	e002      	b.n	800250c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f005 fe0e 	bl	8008128 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800251a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f003 fa5b 	bl	80059dc <USB_ReadInterrupts>
 8002526:	4603      	mov	r3, r0
 8002528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800252c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002530:	d112      	bne.n	8002558 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b01      	cmp	r3, #1
 8002540:	d102      	bne.n	8002548 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f005 fdca 	bl	80080dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002556:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f003 fa3d 	bl	80059dc <USB_ReadInterrupts>
 8002562:	4603      	mov	r3, r0
 8002564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256c:	f040 80b7 	bne.w	80026de <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2110      	movs	r1, #16
 800258a:	4618      	mov	r0, r3
 800258c:	f002 fa04 	bl	8004998 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002590:	2300      	movs	r3, #0
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002594:	e046      	b.n	8002624 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a2:	461a      	mov	r2, r3
 80025a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80025aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ba:	0151      	lsls	r1, r2, #5
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	440a      	add	r2, r1
 80025c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d6:	461a      	mov	r2, r3
 80025d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ee:	0151      	lsls	r1, r2, #5
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	440a      	add	r2, r1
 80025f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4413      	add	r3, r2
 8002606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800260e:	0151      	lsls	r1, r2, #5
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	440a      	add	r2, r1
 8002614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002618:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800261c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	3301      	adds	r3, #1
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262a:	429a      	cmp	r2, r3
 800262c:	d3b3      	bcc.n	8002596 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800263c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002640:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	2b00      	cmp	r3, #0
 8002648:	d016      	beq.n	8002678 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800265a:	f043 030b 	orr.w	r3, r3, #11
 800265e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002670:	f043 030b 	orr.w	r3, r3, #11
 8002674:	6453      	str	r3, [r2, #68]	; 0x44
 8002676:	e015      	b.n	80026a4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002686:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800268a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800268e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800269e:	f043 030b 	orr.w	r3, r3, #11
 80026a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80026b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026c8:	461a      	mov	r2, r3
 80026ca:	f003 fa4b 	bl	8005b64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80026dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 f97a 	bl	80059dc <USB_ReadInterrupts>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f2:	d124      	bne.n	800273e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f003 fa10 	bl	8005b1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f002 f9c5 	bl	8004a92 <USB_GetDevSpeed>
 8002708:	4603      	mov	r3, r0
 800270a:	461a      	mov	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681c      	ldr	r4, [r3, #0]
 8002714:	f001 f9e8 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8002718:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	4620      	mov	r0, r4
 8002724:	f001 fec4 	bl	80044b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f005 fcb8 	bl	800809e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800273c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f003 f94a 	bl	80059dc <USB_ReadInterrupts>
 8002748:	4603      	mov	r3, r0
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b08      	cmp	r3, #8
 8002750:	d10a      	bne.n	8002768 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f005 fc95 	bl	8008082 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695a      	ldr	r2, [r3, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f002 0208 	and.w	r2, r2, #8
 8002766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f003 f935 	bl	80059dc <USB_ReadInterrupts>
 8002772:	4603      	mov	r3, r0
 8002774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002778:	2b80      	cmp	r3, #128	; 0x80
 800277a:	d122      	bne.n	80027c2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002788:	2301      	movs	r3, #1
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
 800278c:	e014      	b.n	80027b8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d105      	bne.n	80027b2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	4619      	mov	r1, r3
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fb27 	bl	8002e00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	3301      	adds	r3, #1
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027be:	429a      	cmp	r2, r3
 80027c0:	d3e5      	bcc.n	800278e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f003 f908 	bl	80059dc <USB_ReadInterrupts>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027d6:	d13b      	bne.n	8002850 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027d8:	2301      	movs	r3, #1
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
 80027dc:	e02b      	b.n	8002836 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3340      	adds	r3, #64	; 0x40
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d115      	bne.n	8002830 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002804:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002806:	2b00      	cmp	r3, #0
 8002808:	da12      	bge.n	8002830 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	333f      	adds	r3, #63	; 0x3f
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4619      	mov	r1, r3
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fae8 	bl	8002e00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	3301      	adds	r3, #1
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283c:	429a      	cmp	r2, r3
 800283e:	d3ce      	bcc.n	80027de <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800284e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f003 f8c1 	bl	80059dc <USB_ReadInterrupts>
 800285a:	4603      	mov	r3, r0
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002864:	d155      	bne.n	8002912 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002866:	2301      	movs	r3, #1
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
 800286a:	e045      	b.n	80028f8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	4413      	add	r3, r2
 8002874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d12e      	bne.n	80028f2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002894:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002896:	2b00      	cmp	r3, #0
 8002898:	da2b      	bge.n	80028f2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80028a6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d121      	bne.n	80028f2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028ee:	6053      	str	r3, [r2, #4]
            break;
 80028f0:	e007      	b.n	8002902 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	3301      	adds	r3, #1
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fe:	429a      	cmp	r2, r3
 8002900:	d3b4      	bcc.n	800286c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002910:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f003 f860 	bl	80059dc <USB_ReadInterrupts>
 800291c:	4603      	mov	r3, r0
 800291e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002926:	d10a      	bne.n	800293e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f005 fc2f 	bl	800818c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800293c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f003 f84a 	bl	80059dc <USB_ReadInterrupts>
 8002948:	4603      	mov	r3, r0
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b04      	cmp	r3, #4
 8002950:	d115      	bne.n	800297e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d002      	beq.n	800296a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f005 fc1f 	bl	80081a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	e000      	b.n	800297e <HAL_PCD_IRQHandler+0x938>
      return;
 800297c:	bf00      	nop
    }
  }
}
 800297e:	3734      	adds	r7, #52	; 0x34
 8002980:	46bd      	mov	sp, r7
 8002982:	bd90      	pop	{r4, r7, pc}

08002984 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_PCD_SetAddress+0x1a>
 800299a:	2302      	movs	r3, #2
 800299c:	e013      	b.n	80029c6 <HAL_PCD_SetAddress+0x42>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f002 ffa8 	bl	800590c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	4608      	mov	r0, r1
 80029d8:	4611      	mov	r1, r2
 80029da:	461a      	mov	r2, r3
 80029dc:	4603      	mov	r3, r0
 80029de:	70fb      	strb	r3, [r7, #3]
 80029e0:	460b      	mov	r3, r1
 80029e2:	803b      	strh	r3, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	da0f      	bge.n	8002a14 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f4:	78fb      	ldrb	r3, [r7, #3]
 80029f6:	f003 020f 	and.w	r2, r3, #15
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	3338      	adds	r3, #56	; 0x38
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	4413      	add	r3, r2
 8002a08:	3304      	adds	r3, #4
 8002a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	705a      	strb	r2, [r3, #1]
 8002a12:	e00f      	b.n	8002a34 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a14:	78fb      	ldrb	r3, [r7, #3]
 8002a16:	f003 020f 	and.w	r2, r3, #15
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a34:	78fb      	ldrb	r3, [r7, #3]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a40:	883a      	ldrh	r2, [r7, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	78ba      	ldrb	r2, [r7, #2]
 8002a4a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	785b      	ldrb	r3, [r3, #1]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d004      	beq.n	8002a5e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a5e:	78bb      	ldrb	r3, [r7, #2]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d102      	bne.n	8002a6a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_PCD_EP_Open+0xaa>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e00e      	b.n	8002a96 <HAL_PCD_EP_Open+0xc8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68f9      	ldr	r1, [r7, #12]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f002 f828 	bl	8004adc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002a94:	7afb      	ldrb	r3, [r7, #11]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	da0f      	bge.n	8002ad2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab2:	78fb      	ldrb	r3, [r7, #3]
 8002ab4:	f003 020f 	and.w	r2, r3, #15
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	3338      	adds	r3, #56	; 0x38
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	705a      	strb	r2, [r3, #1]
 8002ad0:	e00f      	b.n	8002af2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	f003 020f 	and.w	r2, r3, #15
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3304      	adds	r3, #4
 8002aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_PCD_EP_Close+0x6e>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e00e      	b.n	8002b2a <HAL_PCD_EP_Close+0x8c>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68f9      	ldr	r1, [r7, #12]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f002 f866 	bl	8004bec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b42:	7afb      	ldrb	r3, [r7, #11]
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	3304      	adds	r3, #4
 8002b5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2200      	movs	r2, #0
 8002b72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b74:	7afb      	ldrb	r3, [r7, #11]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d102      	bne.n	8002b8e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
 8002b90:	f003 030f 	and.w	r3, r3, #15
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d109      	bne.n	8002bac <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	6979      	ldr	r1, [r7, #20]
 8002ba6:	f002 fb45 	bl	8005234 <USB_EP0StartXfer>
 8002baa:	e008      	b.n	8002bbe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	6979      	ldr	r1, [r7, #20]
 8002bba:	f002 f8f3 	bl	8004da4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	f003 020f 	and.w	r2, r3, #15
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	460b      	mov	r3, r1
 8002c06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c08:	7afb      	ldrb	r3, [r7, #11]
 8002c0a:	f003 020f 	and.w	r2, r3, #15
 8002c0e:	4613      	mov	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	3338      	adds	r3, #56	; 0x38
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2201      	movs	r2, #1
 8002c36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c38:	7afb      	ldrb	r3, [r7, #11]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d102      	bne.n	8002c52 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c52:	7afb      	ldrb	r3, [r7, #11]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d109      	bne.n	8002c70 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	6979      	ldr	r1, [r7, #20]
 8002c6a:	f002 fae3 	bl	8005234 <USB_EP0StartXfer>
 8002c6e:	e008      	b.n	8002c82 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	6979      	ldr	r1, [r7, #20]
 8002c7e:	f002 f891 	bl	8004da4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	f003 020f 	and.w	r2, r3, #15
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d901      	bls.n	8002caa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e050      	b.n	8002d4c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002caa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	da0f      	bge.n	8002cd2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	f003 020f 	and.w	r2, r3, #15
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	3338      	adds	r3, #56	; 0x38
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	705a      	strb	r2, [r3, #1]
 8002cd0:	e00d      	b.n	8002cee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_PCD_EP_SetStall+0x82>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e01e      	b.n	8002d4c <HAL_PCD_EP_SetStall+0xc0>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68f9      	ldr	r1, [r7, #12]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f002 fd21 	bl	8005764 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	b2d9      	uxtb	r1, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f002 ff11 	bl	8005b64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	f003 020f 	and.w	r2, r3, #15
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d901      	bls.n	8002d72 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e042      	b.n	8002df8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	da0f      	bge.n	8002d9a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	f003 020f 	and.w	r2, r3, #15
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	3338      	adds	r3, #56	; 0x38
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3304      	adds	r3, #4
 8002d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	705a      	strb	r2, [r3, #1]
 8002d98:	e00f      	b.n	8002dba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	f003 020f 	and.w	r2, r3, #15
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4413      	add	r3, r2
 8002db0:	3304      	adds	r3, #4
 8002db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_PCD_EP_ClrStall+0x86>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e00e      	b.n	8002df8 <HAL_PCD_EP_ClrStall+0xa4>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68f9      	ldr	r1, [r7, #12]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f002 fd29 	bl	8005840 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	da0c      	bge.n	8002e2e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	f003 020f 	and.w	r2, r3, #15
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	3338      	adds	r3, #56	; 0x38
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4413      	add	r3, r2
 8002e28:	3304      	adds	r3, #4
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	e00c      	b.n	8002e48 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	f003 020f 	and.w	r2, r3, #15
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	4413      	add	r3, r2
 8002e44:	3304      	adds	r3, #4
 8002e46:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68f9      	ldr	r1, [r7, #12]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f002 fb48 	bl	80054e4 <USB_EPStopXfer>
 8002e54:	4603      	mov	r3, r0
 8002e56:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e58:	7afb      	ldrb	r3, [r7, #11]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b08a      	sub	sp, #40	; 0x28
 8002e66:	af02      	add	r7, sp, #8
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	3338      	adds	r3, #56	; 0x38
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	3304      	adds	r3, #4
 8002e88:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a1a      	ldr	r2, [r3, #32]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d901      	bls.n	8002e9a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e06c      	b.n	8002f74 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	699a      	ldr	r2, [r3, #24]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d902      	bls.n	8002eb6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3303      	adds	r3, #3
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ebe:	e02b      	b.n	8002f18 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	699a      	ldr	r2, [r3, #24]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d902      	bls.n	8002edc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	3303      	adds	r3, #3
 8002ee0:	089b      	lsrs	r3, r3, #2
 8002ee2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6919      	ldr	r1, [r3, #16]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	4603      	mov	r3, r0
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f002 fb9c 	bl	8005638 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	441a      	add	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a1a      	ldr	r2, [r3, #32]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	441a      	add	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d809      	bhi.n	8002f42 <PCD_WriteEmptyTxFifo+0xe0>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a1a      	ldr	r2, [r3, #32]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d203      	bcs.n	8002f42 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1be      	bne.n	8002ec0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	699a      	ldr	r2, [r3, #24]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d811      	bhi.n	8002f72 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	2201      	movs	r2, #1
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	43db      	mvns	r3, r3
 8002f68:	6939      	ldr	r1, [r7, #16]
 8002f6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f6e:	4013      	ands	r3, r2
 8002f70:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3720      	adds	r7, #32
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	333c      	adds	r3, #60	; 0x3c
 8002f94:	3304      	adds	r3, #4
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d17b      	bne.n	80030aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d015      	beq.n	8002fe8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	4a61      	ldr	r2, [pc, #388]	; (8003144 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	f240 80b9 	bls.w	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80b3 	beq.w	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fe4:	6093      	str	r3, [r2, #8]
 8002fe6:	e0a7      	b.n	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffe:	461a      	mov	r2, r3
 8003000:	2320      	movs	r3, #32
 8003002:	6093      	str	r3, [r2, #8]
 8003004:	e098      	b.n	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 8093 	bne.w	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	4a4b      	ldr	r2, [pc, #300]	; (8003144 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d90f      	bls.n	800303a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	4413      	add	r3, r2
 800302c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003030:	461a      	mov	r2, r3
 8003032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003036:	6093      	str	r3, [r2, #8]
 8003038:	e07e      	b.n	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	4413      	add	r3, r2
 800304c:	3304      	adds	r3, #4
 800304e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	0159      	lsls	r1, r3, #5
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	440b      	add	r3, r1
 800305c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003066:	1ad2      	subs	r2, r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d114      	bne.n	800309c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003084:	461a      	mov	r2, r3
 8003086:	2101      	movs	r1, #1
 8003088:	f002 fd6c 	bl	8005b64 <USB_EP0_OutStart>
 800308c:	e006      	b.n	800309c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	441a      	add	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	4619      	mov	r1, r3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f004 ffb8 	bl	8008018 <HAL_PCD_DataOutStageCallback>
 80030a8:	e046      	b.n	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	4a26      	ldr	r2, [pc, #152]	; (8003148 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d124      	bne.n	80030fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c8:	461a      	mov	r2, r3
 80030ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ce:	6093      	str	r3, [r2, #8]
 80030d0:	e032      	b.n	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d008      	beq.n	80030ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e8:	461a      	mov	r2, r3
 80030ea:	2320      	movs	r3, #32
 80030ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	4619      	mov	r1, r3
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f004 ff8f 	bl	8008018 <HAL_PCD_DataOutStageCallback>
 80030fa:	e01d      	b.n	8003138 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d114      	bne.n	800312c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d108      	bne.n	800312c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003124:	461a      	mov	r2, r3
 8003126:	2100      	movs	r1, #0
 8003128:	f002 fd1c 	bl	8005b64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	4619      	mov	r1, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f004 ff70 	bl	8008018 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	4f54300a 	.word	0x4f54300a
 8003148:	4f54310a 	.word	0x4f54310a

0800314c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	333c      	adds	r3, #60	; 0x3c
 8003164:	3304      	adds	r3, #4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d90e      	bls.n	80031a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003198:	461a      	mov	r2, r3
 800319a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f004 ff27 	bl	8007ff4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d90c      	bls.n	80031c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d108      	bne.n	80031c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031c0:	461a      	mov	r2, r3
 80031c2:	2101      	movs	r1, #1
 80031c4:	f002 fcce 	bl	8005b64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	4f54300a 	.word	0x4f54300a

080031d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
 80031e4:	4613      	mov	r3, r2
 80031e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d107      	bne.n	8003206 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031f6:	883b      	ldrh	r3, [r7, #0]
 80031f8:	0419      	lsls	r1, r3, #16
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	430a      	orrs	r2, r1
 8003202:	629a      	str	r2, [r3, #40]	; 0x28
 8003204:	e028      	b.n	8003258 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	4413      	add	r3, r2
 8003212:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003214:	2300      	movs	r3, #0
 8003216:	73fb      	strb	r3, [r7, #15]
 8003218:	e00d      	b.n	8003236 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	3340      	adds	r3, #64	; 0x40
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	0c1b      	lsrs	r3, r3, #16
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	4413      	add	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	3301      	adds	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	3b01      	subs	r3, #1
 800323c:	429a      	cmp	r2, r3
 800323e:	d3ec      	bcc.n	800321a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003240:	883b      	ldrh	r3, [r7, #0]
 8003242:	0418      	lsls	r0, r3, #16
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	3b01      	subs	r3, #1
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	4302      	orrs	r2, r0
 8003250:	3340      	adds	r3, #64	; 0x40
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	887a      	ldrh	r2, [r7, #2]
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e267      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d075      	beq.n	80033aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032be:	4b88      	ldr	r3, [pc, #544]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d00c      	beq.n	80032e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ca:	4b85      	ldr	r3, [pc, #532]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d112      	bne.n	80032fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d6:	4b82      	ldr	r3, [pc, #520]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e2:	d10b      	bne.n	80032fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e4:	4b7e      	ldr	r3, [pc, #504]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d05b      	beq.n	80033a8 <HAL_RCC_OscConfig+0x108>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d157      	bne.n	80033a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e242      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d106      	bne.n	8003314 <HAL_RCC_OscConfig+0x74>
 8003306:	4b76      	ldr	r3, [pc, #472]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a75      	ldr	r2, [pc, #468]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800330c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e01d      	b.n	8003350 <HAL_RCC_OscConfig+0xb0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0x98>
 800331e:	4b70      	ldr	r3, [pc, #448]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a6f      	ldr	r2, [pc, #444]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b6d      	ldr	r3, [pc, #436]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6c      	ldr	r2, [pc, #432]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e00b      	b.n	8003350 <HAL_RCC_OscConfig+0xb0>
 8003338:	4b69      	ldr	r3, [pc, #420]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a68      	ldr	r2, [pc, #416]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800333e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b66      	ldr	r3, [pc, #408]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a65      	ldr	r2, [pc, #404]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800334a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7fd fcbc 	bl	8000cd4 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003360:	f7fd fcb8 	bl	8000cd4 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	; 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e207      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0xc0>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fd fca8 	bl	8000cd4 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003388:	f7fd fca4 	bl	8000cd4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	; 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1f3      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	4b51      	ldr	r3, [pc, #324]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0xe8>
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d063      	beq.n	800347e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b6:	4b4a      	ldr	r3, [pc, #296]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c2:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d11c      	bne.n	8003408 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ce:	4b44      	ldr	r3, [pc, #272]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	4b41      	ldr	r3, [pc, #260]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_OscConfig+0x152>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e1c7      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4937      	ldr	r1, [pc, #220]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	e03a      	b.n	800347e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d020      	beq.n	8003452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003410:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <HAL_RCC_OscConfig+0x244>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003416:	f7fd fc5d 	bl	8000cd4 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341e:	f7fd fc59 	bl	8000cd4 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e1a8      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003430:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343c:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4925      	ldr	r1, [pc, #148]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
 8003450:	e015      	b.n	800347e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003452:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <HAL_RCC_OscConfig+0x244>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fd fc3c 	bl	8000cd4 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003460:	f7fd fc38 	bl	8000cd4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e187      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d036      	beq.n	80034f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d016      	beq.n	80034c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <HAL_RCC_OscConfig+0x248>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003498:	f7fd fc1c 	bl	8000cd4 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a0:	f7fd fc18 	bl	8000cd4 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e167      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b2:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_OscConfig+0x240>)
 80034b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x200>
 80034be:	e01b      	b.n	80034f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_RCC_OscConfig+0x248>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c6:	f7fd fc05 	bl	8000cd4 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034cc:	e00e      	b.n	80034ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ce:	f7fd fc01 	bl	8000cd4 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d907      	bls.n	80034ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e150      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
 80034e0:	40023800 	.word	0x40023800
 80034e4:	42470000 	.word	0x42470000
 80034e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ec:	4b88      	ldr	r3, [pc, #544]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80034ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ea      	bne.n	80034ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8097 	beq.w	8003634 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003506:	2300      	movs	r3, #0
 8003508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800350a:	4b81      	ldr	r3, [pc, #516]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10f      	bne.n	8003536 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	4b7d      	ldr	r3, [pc, #500]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	4a7c      	ldr	r2, [pc, #496]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003524:	6413      	str	r3, [r2, #64]	; 0x40
 8003526:	4b7a      	ldr	r3, [pc, #488]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003536:	4b77      	ldr	r3, [pc, #476]	; (8003714 <HAL_RCC_OscConfig+0x474>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d118      	bne.n	8003574 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003542:	4b74      	ldr	r3, [pc, #464]	; (8003714 <HAL_RCC_OscConfig+0x474>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a73      	ldr	r2, [pc, #460]	; (8003714 <HAL_RCC_OscConfig+0x474>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354e:	f7fd fbc1 	bl	8000cd4 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003556:	f7fd fbbd 	bl	8000cd4 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e10c      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <HAL_RCC_OscConfig+0x474>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d106      	bne.n	800358a <HAL_RCC_OscConfig+0x2ea>
 800357c:	4b64      	ldr	r3, [pc, #400]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	4a63      	ldr	r2, [pc, #396]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6713      	str	r3, [r2, #112]	; 0x70
 8003588:	e01c      	b.n	80035c4 <HAL_RCC_OscConfig+0x324>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b05      	cmp	r3, #5
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0x30c>
 8003592:	4b5f      	ldr	r3, [pc, #380]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	4a5e      	ldr	r2, [pc, #376]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003598:	f043 0304 	orr.w	r3, r3, #4
 800359c:	6713      	str	r3, [r2, #112]	; 0x70
 800359e:	4b5c      	ldr	r3, [pc, #368]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4a5b      	ldr	r2, [pc, #364]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6713      	str	r3, [r2, #112]	; 0x70
 80035aa:	e00b      	b.n	80035c4 <HAL_RCC_OscConfig+0x324>
 80035ac:	4b58      	ldr	r3, [pc, #352]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	4a57      	ldr	r2, [pc, #348]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70
 80035b8:	4b55      	ldr	r3, [pc, #340]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	4a54      	ldr	r2, [pc, #336]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035be:	f023 0304 	bic.w	r3, r3, #4
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d015      	beq.n	80035f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035cc:	f7fd fb82 	bl	8000cd4 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fd fb7e 	bl	8000cd4 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e0cb      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ea:	4b49      	ldr	r3, [pc, #292]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0ee      	beq.n	80035d4 <HAL_RCC_OscConfig+0x334>
 80035f6:	e014      	b.n	8003622 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f8:	f7fd fb6c 	bl	8000cd4 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fe:	e00a      	b.n	8003616 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003600:	f7fd fb68 	bl	8000cd4 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	f241 3288 	movw	r2, #5000	; 0x1388
 800360e:	4293      	cmp	r3, r2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e0b5      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003616:	4b3e      	ldr	r3, [pc, #248]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1ee      	bne.n	8003600 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003622:	7dfb      	ldrb	r3, [r7, #23]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d105      	bne.n	8003634 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003628:	4b39      	ldr	r3, [pc, #228]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	4a38      	ldr	r2, [pc, #224]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 800362e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003632:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80a1 	beq.w	8003780 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800363e:	4b34      	ldr	r3, [pc, #208]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b08      	cmp	r3, #8
 8003648:	d05c      	beq.n	8003704 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d141      	bne.n	80036d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003652:	4b31      	ldr	r3, [pc, #196]	; (8003718 <HAL_RCC_OscConfig+0x478>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fd fb3c 	bl	8000cd4 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003660:	f7fd fb38 	bl	8000cd4 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e087      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003672:	4b27      	ldr	r3, [pc, #156]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69da      	ldr	r2, [r3, #28]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	019b      	lsls	r3, r3, #6
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	085b      	lsrs	r3, r3, #1
 8003696:	3b01      	subs	r3, #1
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	491b      	ldr	r1, [pc, #108]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a8:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <HAL_RCC_OscConfig+0x478>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7fd fb11 	bl	8000cd4 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b6:	f7fd fb0d 	bl	8000cd4 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e05c      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c8:	4b11      	ldr	r3, [pc, #68]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x416>
 80036d4:	e054      	b.n	8003780 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <HAL_RCC_OscConfig+0x478>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fd fafa 	bl	8000cd4 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fd faf6 	bl	8000cd4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e045      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f6:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_RCC_OscConfig+0x470>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x444>
 8003702:	e03d      	b.n	8003780 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d107      	bne.n	800371c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e038      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
 8003710:	40023800 	.word	0x40023800
 8003714:	40007000 	.word	0x40007000
 8003718:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800371c:	4b1b      	ldr	r3, [pc, #108]	; (800378c <HAL_RCC_OscConfig+0x4ec>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d028      	beq.n	800377c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d121      	bne.n	800377c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003742:	429a      	cmp	r2, r3
 8003744:	d11a      	bne.n	800377c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800374c:	4013      	ands	r3, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003752:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003754:	4293      	cmp	r3, r2
 8003756:	d111      	bne.n	800377c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	3b01      	subs	r3, #1
 8003766:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d107      	bne.n	800377c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800

08003790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0cc      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037a4:	4b68      	ldr	r3, [pc, #416]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d90c      	bls.n	80037cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b65      	ldr	r3, [pc, #404]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b63      	ldr	r3, [pc, #396]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0b8      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e4:	4b59      	ldr	r3, [pc, #356]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037fc:	4b53      	ldr	r3, [pc, #332]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4a52      	ldr	r2, [pc, #328]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003808:	4b50      	ldr	r3, [pc, #320]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	494d      	ldr	r1, [pc, #308]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d044      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d119      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e07f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d003      	beq.n	800384e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384a:	2b03      	cmp	r3, #3
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384e:	4b3f      	ldr	r3, [pc, #252]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e06f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385e:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e067      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386e:	4b37      	ldr	r3, [pc, #220]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f023 0203 	bic.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4934      	ldr	r1, [pc, #208]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	4313      	orrs	r3, r2
 800387e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003880:	f7fd fa28 	bl	8000cd4 <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	e00a      	b.n	800389e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003888:	f7fd fa24 	bl	8000cd4 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	; 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e04f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	4b2b      	ldr	r3, [pc, #172]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 020c 	and.w	r2, r3, #12
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d1eb      	bne.n	8003888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b0:	4b25      	ldr	r3, [pc, #148]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d20c      	bcs.n	80038d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b22      	ldr	r3, [pc, #136]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e032      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4916      	ldr	r1, [pc, #88]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	490e      	ldr	r1, [pc, #56]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003916:	f000 f821 	bl	800395c <HAL_RCC_GetSysClockFreq>
 800391a:	4602      	mov	r2, r0
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	490a      	ldr	r1, [pc, #40]	; (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	5ccb      	ldrb	r3, [r1, r3]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fd f988 	bl	8000c4c <HAL_InitTick>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40023c00 	.word	0x40023c00
 800394c:	40023800 	.word	0x40023800
 8003950:	08008618 	.word	0x08008618
 8003954:	20000000 	.word	0x20000000
 8003958:	20000004 	.word	0x20000004

0800395c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800395c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003960:	b090      	sub	sp, #64	; 0x40
 8003962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	637b      	str	r3, [r7, #52]	; 0x34
 8003968:	2300      	movs	r3, #0
 800396a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800396c:	2300      	movs	r3, #0
 800396e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003974:	4b59      	ldr	r3, [pc, #356]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 030c 	and.w	r3, r3, #12
 800397c:	2b08      	cmp	r3, #8
 800397e:	d00d      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x40>
 8003980:	2b08      	cmp	r3, #8
 8003982:	f200 80a1 	bhi.w	8003ac8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x34>
 800398a:	2b04      	cmp	r3, #4
 800398c:	d003      	beq.n	8003996 <HAL_RCC_GetSysClockFreq+0x3a>
 800398e:	e09b      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003990:	4b53      	ldr	r3, [pc, #332]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003992:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003994:	e09b      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003996:	4b53      	ldr	r3, [pc, #332]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003998:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800399a:	e098      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800399c:	4b4f      	ldr	r3, [pc, #316]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a6:	4b4d      	ldr	r3, [pc, #308]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d028      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b2:	4b4a      	ldr	r3, [pc, #296]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	099b      	lsrs	r3, r3, #6
 80039b8:	2200      	movs	r2, #0
 80039ba:	623b      	str	r3, [r7, #32]
 80039bc:	627a      	str	r2, [r7, #36]	; 0x24
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039c4:	2100      	movs	r1, #0
 80039c6:	4b47      	ldr	r3, [pc, #284]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 80039c8:	fb03 f201 	mul.w	r2, r3, r1
 80039cc:	2300      	movs	r3, #0
 80039ce:	fb00 f303 	mul.w	r3, r0, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	4a43      	ldr	r2, [pc, #268]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 80039d6:	fba0 1202 	umull	r1, r2, r0, r2
 80039da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039dc:	460a      	mov	r2, r1
 80039de:	62ba      	str	r2, [r7, #40]	; 0x28
 80039e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039e2:	4413      	add	r3, r2
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e8:	2200      	movs	r2, #0
 80039ea:	61bb      	str	r3, [r7, #24]
 80039ec:	61fa      	str	r2, [r7, #28]
 80039ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039f6:	f7fc fbed 	bl	80001d4 <__aeabi_uldivmod>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4613      	mov	r3, r2
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a02:	e053      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a04:	4b35      	ldr	r3, [pc, #212]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	099b      	lsrs	r3, r3, #6
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	617a      	str	r2, [r7, #20]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a16:	f04f 0b00 	mov.w	fp, #0
 8003a1a:	4652      	mov	r2, sl
 8003a1c:	465b      	mov	r3, fp
 8003a1e:	f04f 0000 	mov.w	r0, #0
 8003a22:	f04f 0100 	mov.w	r1, #0
 8003a26:	0159      	lsls	r1, r3, #5
 8003a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a2c:	0150      	lsls	r0, r2, #5
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	ebb2 080a 	subs.w	r8, r2, sl
 8003a36:	eb63 090b 	sbc.w	r9, r3, fp
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a4e:	ebb2 0408 	subs.w	r4, r2, r8
 8003a52:	eb63 0509 	sbc.w	r5, r3, r9
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	00eb      	lsls	r3, r5, #3
 8003a60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a64:	00e2      	lsls	r2, r4, #3
 8003a66:	4614      	mov	r4, r2
 8003a68:	461d      	mov	r5, r3
 8003a6a:	eb14 030a 	adds.w	r3, r4, sl
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	eb45 030b 	adc.w	r3, r5, fp
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a82:	4629      	mov	r1, r5
 8003a84:	028b      	lsls	r3, r1, #10
 8003a86:	4621      	mov	r1, r4
 8003a88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	028a      	lsls	r2, r1, #10
 8003a90:	4610      	mov	r0, r2
 8003a92:	4619      	mov	r1, r3
 8003a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a96:	2200      	movs	r2, #0
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	60fa      	str	r2, [r7, #12]
 8003a9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aa0:	f7fc fb98 	bl	80001d4 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_RCC_GetSysClockFreq+0x180>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003abc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ac6:	e002      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003aca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3740      	adds	r7, #64	; 0x40
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ada:	bf00      	nop
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	00f42400 	.word	0x00f42400
 8003ae4:	017d7840 	.word	0x017d7840

08003ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aec:	4b03      	ldr	r3, [pc, #12]	; (8003afc <HAL_RCC_GetHCLKFreq+0x14>)
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20000000 	.word	0x20000000

08003b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b04:	f7ff fff0 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	0a9b      	lsrs	r3, r3, #10
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40023800 	.word	0x40023800
 8003b24:	08008628 	.word	0x08008628

08003b28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e041      	b.n	8003bbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fc ff92 	bl	8000a78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	4619      	mov	r1, r3
 8003b66:	4610      	mov	r0, r2
 8003b68:	f000 f9a0 	bl	8003eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d109      	bne.n	8003bec <HAL_TIM_PWM_Start+0x24>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	bf14      	ite	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	2300      	moveq	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	e022      	b.n	8003c32 <HAL_TIM_PWM_Start+0x6a>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d109      	bne.n	8003c06 <HAL_TIM_PWM_Start+0x3e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	bf14      	ite	ne
 8003bfe:	2301      	movne	r3, #1
 8003c00:	2300      	moveq	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	e015      	b.n	8003c32 <HAL_TIM_PWM_Start+0x6a>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d109      	bne.n	8003c20 <HAL_TIM_PWM_Start+0x58>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	bf14      	ite	ne
 8003c18:	2301      	movne	r3, #1
 8003c1a:	2300      	moveq	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	e008      	b.n	8003c32 <HAL_TIM_PWM_Start+0x6a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	bf14      	ite	ne
 8003c2c:	2301      	movne	r3, #1
 8003c2e:	2300      	moveq	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e068      	b.n	8003d0c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d104      	bne.n	8003c4a <HAL_TIM_PWM_Start+0x82>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c48:	e013      	b.n	8003c72 <HAL_TIM_PWM_Start+0xaa>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d104      	bne.n	8003c5a <HAL_TIM_PWM_Start+0x92>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c58:	e00b      	b.n	8003c72 <HAL_TIM_PWM_Start+0xaa>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_PWM_Start+0xa2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c68:	e003      	b.n	8003c72 <HAL_TIM_PWM_Start+0xaa>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2201      	movs	r2, #1
 8003c78:	6839      	ldr	r1, [r7, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fb22 	bl	80042c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a23      	ldr	r2, [pc, #140]	; (8003d14 <HAL_TIM_PWM_Start+0x14c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d107      	bne.n	8003c9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1d      	ldr	r2, [pc, #116]	; (8003d14 <HAL_TIM_PWM_Start+0x14c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d018      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x10e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cac:	d013      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x10e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a19      	ldr	r2, [pc, #100]	; (8003d18 <HAL_TIM_PWM_Start+0x150>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00e      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x10e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a17      	ldr	r2, [pc, #92]	; (8003d1c <HAL_TIM_PWM_Start+0x154>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d009      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x10e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a16      	ldr	r2, [pc, #88]	; (8003d20 <HAL_TIM_PWM_Start+0x158>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d004      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0x10e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a14      	ldr	r2, [pc, #80]	; (8003d24 <HAL_TIM_PWM_Start+0x15c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d111      	bne.n	8003cfa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b06      	cmp	r3, #6
 8003ce6:	d010      	beq.n	8003d0a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf8:	e007      	b.n	8003d0a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0201 	orr.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40010000 	.word	0x40010000
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40000800 	.word	0x40000800
 8003d20:	40000c00 	.word	0x40000c00
 8003d24:	40014000 	.word	0x40014000

08003d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e0ae      	b.n	8003ea4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b0c      	cmp	r3, #12
 8003d52:	f200 809f 	bhi.w	8003e94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d56:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003d91 	.word	0x08003d91
 8003d60:	08003e95 	.word	0x08003e95
 8003d64:	08003e95 	.word	0x08003e95
 8003d68:	08003e95 	.word	0x08003e95
 8003d6c:	08003dd1 	.word	0x08003dd1
 8003d70:	08003e95 	.word	0x08003e95
 8003d74:	08003e95 	.word	0x08003e95
 8003d78:	08003e95 	.word	0x08003e95
 8003d7c:	08003e13 	.word	0x08003e13
 8003d80:	08003e95 	.word	0x08003e95
 8003d84:	08003e95 	.word	0x08003e95
 8003d88:	08003e95 	.word	0x08003e95
 8003d8c:	08003e53 	.word	0x08003e53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f908 	bl	8003fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0208 	orr.w	r2, r2, #8
 8003daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0204 	bic.w	r2, r2, #4
 8003dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6999      	ldr	r1, [r3, #24]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	619a      	str	r2, [r3, #24]
      break;
 8003dce:	e064      	b.n	8003e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 f94e 	bl	8004078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6999      	ldr	r1, [r3, #24]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	021a      	lsls	r2, r3, #8
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	619a      	str	r2, [r3, #24]
      break;
 8003e10:	e043      	b.n	8003e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 f999 	bl	8004150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0208 	orr.w	r2, r2, #8
 8003e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0204 	bic.w	r2, r2, #4
 8003e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69d9      	ldr	r1, [r3, #28]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	61da      	str	r2, [r3, #28]
      break;
 8003e50:	e023      	b.n	8003e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 f9e3 	bl	8004224 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69da      	ldr	r2, [r3, #28]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69d9      	ldr	r1, [r3, #28]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	021a      	lsls	r2, r3, #8
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	61da      	str	r2, [r3, #28]
      break;
 8003e92:	e002      	b.n	8003e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	75fb      	strb	r3, [r7, #23]
      break;
 8003e98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a34      	ldr	r2, [pc, #208]	; (8003f90 <TIM_Base_SetConfig+0xe4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00f      	beq.n	8003ee4 <TIM_Base_SetConfig+0x38>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eca:	d00b      	beq.n	8003ee4 <TIM_Base_SetConfig+0x38>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a31      	ldr	r2, [pc, #196]	; (8003f94 <TIM_Base_SetConfig+0xe8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d007      	beq.n	8003ee4 <TIM_Base_SetConfig+0x38>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a30      	ldr	r2, [pc, #192]	; (8003f98 <TIM_Base_SetConfig+0xec>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d003      	beq.n	8003ee4 <TIM_Base_SetConfig+0x38>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a2f      	ldr	r2, [pc, #188]	; (8003f9c <TIM_Base_SetConfig+0xf0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d108      	bne.n	8003ef6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a25      	ldr	r2, [pc, #148]	; (8003f90 <TIM_Base_SetConfig+0xe4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01b      	beq.n	8003f36 <TIM_Base_SetConfig+0x8a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f04:	d017      	beq.n	8003f36 <TIM_Base_SetConfig+0x8a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a22      	ldr	r2, [pc, #136]	; (8003f94 <TIM_Base_SetConfig+0xe8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <TIM_Base_SetConfig+0x8a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a21      	ldr	r2, [pc, #132]	; (8003f98 <TIM_Base_SetConfig+0xec>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00f      	beq.n	8003f36 <TIM_Base_SetConfig+0x8a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a20      	ldr	r2, [pc, #128]	; (8003f9c <TIM_Base_SetConfig+0xf0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00b      	beq.n	8003f36 <TIM_Base_SetConfig+0x8a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a1f      	ldr	r2, [pc, #124]	; (8003fa0 <TIM_Base_SetConfig+0xf4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d007      	beq.n	8003f36 <TIM_Base_SetConfig+0x8a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a1e      	ldr	r2, [pc, #120]	; (8003fa4 <TIM_Base_SetConfig+0xf8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <TIM_Base_SetConfig+0x8a>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1d      	ldr	r2, [pc, #116]	; (8003fa8 <TIM_Base_SetConfig+0xfc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d108      	bne.n	8003f48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a08      	ldr	r2, [pc, #32]	; (8003f90 <TIM_Base_SetConfig+0xe4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d103      	bne.n	8003f7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	615a      	str	r2, [r3, #20]
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40010000 	.word	0x40010000
 8003f94:	40000400 	.word	0x40000400
 8003f98:	40000800 	.word	0x40000800
 8003f9c:	40000c00 	.word	0x40000c00
 8003fa0:	40014000 	.word	0x40014000
 8003fa4:	40014400 	.word	0x40014400
 8003fa8:	40014800 	.word	0x40014800

08003fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f023 0201 	bic.w	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0303 	bic.w	r3, r3, #3
 8003fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f023 0302 	bic.w	r3, r3, #2
 8003ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a1c      	ldr	r2, [pc, #112]	; (8004074 <TIM_OC1_SetConfig+0xc8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d10c      	bne.n	8004022 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f023 0308 	bic.w	r3, r3, #8
 800400e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a13      	ldr	r2, [pc, #76]	; (8004074 <TIM_OC1_SetConfig+0xc8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d111      	bne.n	800404e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	621a      	str	r2, [r3, #32]
}
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	40010000 	.word	0x40010000

08004078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	f023 0210 	bic.w	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0320 	bic.w	r3, r3, #32
 80040c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a1e      	ldr	r2, [pc, #120]	; (800414c <TIM_OC2_SetConfig+0xd4>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d10d      	bne.n	80040f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a15      	ldr	r2, [pc, #84]	; (800414c <TIM_OC2_SetConfig+0xd4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d113      	bne.n	8004124 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800410a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40010000 	.word	0x40010000

08004150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <TIM_OC3_SetConfig+0xd0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10d      	bne.n	80041ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	021b      	lsls	r3, r3, #8
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a14      	ldr	r2, [pc, #80]	; (8004220 <TIM_OC3_SetConfig+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d113      	bne.n	80041fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	621a      	str	r2, [r3, #32]
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	40010000 	.word	0x40010000

08004224 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800426e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	031b      	lsls	r3, r3, #12
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a10      	ldr	r2, [pc, #64]	; (80042c0 <TIM_OC4_SetConfig+0x9c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d109      	bne.n	8004298 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800428a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	019b      	lsls	r3, r3, #6
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40010000 	.word	0x40010000

080042c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	2201      	movs	r2, #1
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1a      	ldr	r2, [r3, #32]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	43db      	mvns	r3, r3
 80042e6:	401a      	ands	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a1a      	ldr	r2, [r3, #32]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	431a      	orrs	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004324:	2302      	movs	r3, #2
 8004326:	e050      	b.n	80043ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d018      	beq.n	800439e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d013      	beq.n	800439e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a18      	ldr	r2, [pc, #96]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00e      	beq.n	800439e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a16      	ldr	r2, [pc, #88]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d009      	beq.n	800439e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d004      	beq.n	800439e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d10c      	bne.n	80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40000400 	.word	0x40000400
 80043e0:	40000800 	.word	0x40000800
 80043e4:	40000c00 	.word	0x40000c00
 80043e8:	40014000 	.word	0x40014000

080043ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043ec:	b084      	sub	sp, #16
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	f107 001c 	add.w	r0, r7, #28
 80043fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	2b01      	cmp	r3, #1
 8004402:	d122      	bne.n	800444a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800442c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d105      	bne.n	800443e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f001 fbee 	bl	8005c20 <USB_CoreReset>
 8004444:	4603      	mov	r3, r0
 8004446:	73fb      	strb	r3, [r7, #15]
 8004448:	e01a      	b.n	8004480 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f001 fbe2 	bl	8005c20 <USB_CoreReset>
 800445c:	4603      	mov	r3, r0
 800445e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
 8004472:	e005      	b.n	8004480 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	2b01      	cmp	r3, #1
 8004484:	d10b      	bne.n	800449e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f043 0206 	orr.w	r2, r3, #6
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f043 0220 	orr.w	r2, r3, #32
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800449e:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044aa:	b004      	add	sp, #16
 80044ac:	4770      	bx	lr
	...

080044b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d165      	bne.n	8004590 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4a41      	ldr	r2, [pc, #260]	; (80045cc <USB_SetTurnaroundTime+0x11c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d906      	bls.n	80044da <USB_SetTurnaroundTime+0x2a>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4a40      	ldr	r2, [pc, #256]	; (80045d0 <USB_SetTurnaroundTime+0x120>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d202      	bcs.n	80044da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80044d4:	230f      	movs	r3, #15
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	e062      	b.n	80045a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4a3c      	ldr	r2, [pc, #240]	; (80045d0 <USB_SetTurnaroundTime+0x120>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d306      	bcc.n	80044f0 <USB_SetTurnaroundTime+0x40>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4a3b      	ldr	r2, [pc, #236]	; (80045d4 <USB_SetTurnaroundTime+0x124>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d202      	bcs.n	80044f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80044ea:	230e      	movs	r3, #14
 80044ec:	617b      	str	r3, [r7, #20]
 80044ee:	e057      	b.n	80045a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4a38      	ldr	r2, [pc, #224]	; (80045d4 <USB_SetTurnaroundTime+0x124>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d306      	bcc.n	8004506 <USB_SetTurnaroundTime+0x56>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4a37      	ldr	r2, [pc, #220]	; (80045d8 <USB_SetTurnaroundTime+0x128>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d202      	bcs.n	8004506 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004500:	230d      	movs	r3, #13
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	e04c      	b.n	80045a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	4a33      	ldr	r2, [pc, #204]	; (80045d8 <USB_SetTurnaroundTime+0x128>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d306      	bcc.n	800451c <USB_SetTurnaroundTime+0x6c>
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4a32      	ldr	r2, [pc, #200]	; (80045dc <USB_SetTurnaroundTime+0x12c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d802      	bhi.n	800451c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004516:	230c      	movs	r3, #12
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	e041      	b.n	80045a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4a2f      	ldr	r2, [pc, #188]	; (80045dc <USB_SetTurnaroundTime+0x12c>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d906      	bls.n	8004532 <USB_SetTurnaroundTime+0x82>
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4a2e      	ldr	r2, [pc, #184]	; (80045e0 <USB_SetTurnaroundTime+0x130>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d802      	bhi.n	8004532 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800452c:	230b      	movs	r3, #11
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	e036      	b.n	80045a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4a2a      	ldr	r2, [pc, #168]	; (80045e0 <USB_SetTurnaroundTime+0x130>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d906      	bls.n	8004548 <USB_SetTurnaroundTime+0x98>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	4a29      	ldr	r2, [pc, #164]	; (80045e4 <USB_SetTurnaroundTime+0x134>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d802      	bhi.n	8004548 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004542:	230a      	movs	r3, #10
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	e02b      	b.n	80045a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4a26      	ldr	r2, [pc, #152]	; (80045e4 <USB_SetTurnaroundTime+0x134>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d906      	bls.n	800455e <USB_SetTurnaroundTime+0xae>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4a25      	ldr	r2, [pc, #148]	; (80045e8 <USB_SetTurnaroundTime+0x138>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d202      	bcs.n	800455e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004558:	2309      	movs	r3, #9
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	e020      	b.n	80045a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4a21      	ldr	r2, [pc, #132]	; (80045e8 <USB_SetTurnaroundTime+0x138>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d306      	bcc.n	8004574 <USB_SetTurnaroundTime+0xc4>
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	4a20      	ldr	r2, [pc, #128]	; (80045ec <USB_SetTurnaroundTime+0x13c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d802      	bhi.n	8004574 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800456e:	2308      	movs	r3, #8
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	e015      	b.n	80045a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	4a1d      	ldr	r2, [pc, #116]	; (80045ec <USB_SetTurnaroundTime+0x13c>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d906      	bls.n	800458a <USB_SetTurnaroundTime+0xda>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	4a1c      	ldr	r2, [pc, #112]	; (80045f0 <USB_SetTurnaroundTime+0x140>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d202      	bcs.n	800458a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004584:	2307      	movs	r3, #7
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	e00a      	b.n	80045a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800458a:	2306      	movs	r3, #6
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	e007      	b.n	80045a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d102      	bne.n	800459c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004596:	2309      	movs	r3, #9
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	e001      	b.n	80045a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800459c:	2309      	movs	r3, #9
 800459e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	029b      	lsls	r3, r3, #10
 80045b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80045b8:	431a      	orrs	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	00d8acbf 	.word	0x00d8acbf
 80045d0:	00e4e1c0 	.word	0x00e4e1c0
 80045d4:	00f42400 	.word	0x00f42400
 80045d8:	01067380 	.word	0x01067380
 80045dc:	011a499f 	.word	0x011a499f
 80045e0:	01312cff 	.word	0x01312cff
 80045e4:	014ca43f 	.word	0x014ca43f
 80045e8:	016e3600 	.word	0x016e3600
 80045ec:	01a6ab1f 	.word	0x01a6ab1f
 80045f0:	01e84800 	.word	0x01e84800

080045f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f043 0201 	orr.w	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f023 0201 	bic.w	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d115      	bne.n	8004686 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004666:	2001      	movs	r0, #1
 8004668:	f7fc fb40 	bl	8000cec <HAL_Delay>
      ms++;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3301      	adds	r3, #1
 8004670:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f001 fa45 	bl	8005b02 <USB_GetMode>
 8004678:	4603      	mov	r3, r0
 800467a:	2b01      	cmp	r3, #1
 800467c:	d01e      	beq.n	80046bc <USB_SetCurrentMode+0x84>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b31      	cmp	r3, #49	; 0x31
 8004682:	d9f0      	bls.n	8004666 <USB_SetCurrentMode+0x2e>
 8004684:	e01a      	b.n	80046bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d115      	bne.n	80046b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004698:	2001      	movs	r0, #1
 800469a:	f7fc fb27 	bl	8000cec <HAL_Delay>
      ms++;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f001 fa2c 	bl	8005b02 <USB_GetMode>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <USB_SetCurrentMode+0x84>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b31      	cmp	r3, #49	; 0x31
 80046b4:	d9f0      	bls.n	8004698 <USB_SetCurrentMode+0x60>
 80046b6:	e001      	b.n	80046bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e005      	b.n	80046c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b32      	cmp	r3, #50	; 0x32
 80046c0:	d101      	bne.n	80046c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046d0:	b084      	sub	sp, #16
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b086      	sub	sp, #24
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80046de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046ea:	2300      	movs	r3, #0
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	e009      	b.n	8004704 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	3340      	adds	r3, #64	; 0x40
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	2200      	movs	r2, #0
 80046fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	3301      	adds	r3, #1
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2b0e      	cmp	r3, #14
 8004708:	d9f2      	bls.n	80046f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800470a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470c:	2b00      	cmp	r3, #0
 800470e:	d11c      	bne.n	800474a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800471e:	f043 0302 	orr.w	r3, r3, #2
 8004722:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	639a      	str	r2, [r3, #56]	; 0x38
 8004748:	e00b      	b.n	8004762 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004768:	461a      	mov	r2, r3
 800476a:	2300      	movs	r3, #0
 800476c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004774:	4619      	mov	r1, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477c:	461a      	mov	r2, r3
 800477e:	680b      	ldr	r3, [r1, #0]
 8004780:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004784:	2b01      	cmp	r3, #1
 8004786:	d10c      	bne.n	80047a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d104      	bne.n	8004798 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800478e:	2100      	movs	r1, #0
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f965 	bl	8004a60 <USB_SetDevSpeed>
 8004796:	e008      	b.n	80047aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004798:	2101      	movs	r1, #1
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f960 	bl	8004a60 <USB_SetDevSpeed>
 80047a0:	e003      	b.n	80047aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047a2:	2103      	movs	r1, #3
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f95b 	bl	8004a60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047aa:	2110      	movs	r1, #16
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f8f3 	bl	8004998 <USB_FlushTxFifo>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f91f 	bl	8004a00 <USB_FlushRxFifo>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d2:	461a      	mov	r2, r3
 80047d4:	2300      	movs	r3, #0
 80047d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047de:	461a      	mov	r2, r3
 80047e0:	2300      	movs	r3, #0
 80047e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ea:	461a      	mov	r2, r3
 80047ec:	2300      	movs	r3, #0
 80047ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	e043      	b.n	800487e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800480c:	d118      	bne.n	8004840 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004820:	461a      	mov	r2, r3
 8004822:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	e013      	b.n	8004852 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004836:	461a      	mov	r2, r3
 8004838:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	e008      	b.n	8004852 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484c:	461a      	mov	r2, r3
 800484e:	2300      	movs	r3, #0
 8004850:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485e:	461a      	mov	r2, r3
 8004860:	2300      	movs	r3, #0
 8004862:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004870:	461a      	mov	r2, r3
 8004872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004876:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	3301      	adds	r3, #1
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	429a      	cmp	r2, r3
 8004884:	d3b7      	bcc.n	80047f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	e043      	b.n	8004914 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800489e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048a2:	d118      	bne.n	80048d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b6:	461a      	mov	r2, r3
 80048b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	e013      	b.n	80048e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048cc:	461a      	mov	r2, r3
 80048ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	e008      	b.n	80048e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e2:	461a      	mov	r2, r3
 80048e4:	2300      	movs	r3, #0
 80048e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f4:	461a      	mov	r2, r3
 80048f6:	2300      	movs	r3, #0
 80048f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004906:	461a      	mov	r2, r3
 8004908:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800490c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	3301      	adds	r3, #1
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	429a      	cmp	r2, r3
 800491a:	d3b7      	bcc.n	800488c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800492a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800492e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800493c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	2b00      	cmp	r3, #0
 8004942:	d105      	bne.n	8004950 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f043 0210 	orr.w	r2, r3, #16
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699a      	ldr	r2, [r3, #24]
 8004954:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <USB_DevInit+0x2c4>)
 8004956:	4313      	orrs	r3, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800495c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f043 0208 	orr.w	r2, r3, #8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800496e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004970:	2b01      	cmp	r3, #1
 8004972:	d107      	bne.n	8004984 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800497c:	f043 0304 	orr.w	r3, r3, #4
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004984:	7dfb      	ldrb	r3, [r7, #23]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004990:	b004      	add	sp, #16
 8004992:	4770      	bx	lr
 8004994:	803c3800 	.word	0x803c3800

08004998 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3301      	adds	r3, #1
 80049aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4a13      	ldr	r2, [pc, #76]	; (80049fc <USB_FlushTxFifo+0x64>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d901      	bls.n	80049b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e01b      	b.n	80049f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	daf2      	bge.n	80049a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	019b      	lsls	r3, r3, #6
 80049c8:	f043 0220 	orr.w	r2, r3, #32
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3301      	adds	r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4a08      	ldr	r2, [pc, #32]	; (80049fc <USB_FlushTxFifo+0x64>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d901      	bls.n	80049e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e006      	b.n	80049f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d0f0      	beq.n	80049d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	00030d40 	.word	0x00030d40

08004a00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4a11      	ldr	r2, [pc, #68]	; (8004a5c <USB_FlushRxFifo+0x5c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e018      	b.n	8004a50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	daf2      	bge.n	8004a0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2210      	movs	r2, #16
 8004a2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3301      	adds	r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4a08      	ldr	r2, [pc, #32]	; (8004a5c <USB_FlushRxFifo+0x5c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e006      	b.n	8004a50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f003 0310 	and.w	r3, r3, #16
 8004a4a:	2b10      	cmp	r3, #16
 8004a4c:	d0f0      	beq.n	8004a30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	00030d40 	.word	0x00030d40

08004a60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a80:	4313      	orrs	r3, r2
 8004a82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b087      	sub	sp, #28
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 0306 	and.w	r3, r3, #6
 8004aaa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d102      	bne.n	8004ab8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	75fb      	strb	r3, [r7, #23]
 8004ab6:	e00a      	b.n	8004ace <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d002      	beq.n	8004ac4 <USB_GetDevSpeed+0x32>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b06      	cmp	r3, #6
 8004ac2:	d102      	bne.n	8004aca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	75fb      	strb	r3, [r7, #23]
 8004ac8:	e001      	b.n	8004ace <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004aca:	230f      	movs	r3, #15
 8004acc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	371c      	adds	r7, #28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d13a      	bne.n	8004b6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	2101      	movs	r1, #1
 8004b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	68f9      	ldr	r1, [r7, #12]
 8004b12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b16:	4313      	orrs	r3, r2
 8004b18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d155      	bne.n	8004bdc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	791b      	ldrb	r3, [r3, #4]
 8004b4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	059b      	lsls	r3, r3, #22
 8004b52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b54:	4313      	orrs	r3, r2
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	e036      	b.n	8004bdc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b74:	69da      	ldr	r2, [r3, #28]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	2101      	movs	r1, #1
 8004b80:	fa01 f303 	lsl.w	r3, r1, r3
 8004b84:	041b      	lsls	r3, r3, #16
 8004b86:	68f9      	ldr	r1, [r7, #12]
 8004b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d11a      	bne.n	8004bdc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	791b      	ldrb	r3, [r3, #4]
 8004bc0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bc2:	430b      	orrs	r3, r1
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	0151      	lsls	r1, r2, #5
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	440a      	add	r2, r1
 8004bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	785b      	ldrb	r3, [r3, #1]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d161      	bne.n	8004ccc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c1e:	d11f      	bne.n	8004c60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	0151      	lsls	r1, r2, #5
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	440a      	add	r2, r1
 8004c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	0151      	lsls	r1, r2, #5
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	440a      	add	r2, r1
 8004c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	2101      	movs	r1, #1
 8004c72:	fa01 f303 	lsl.w	r3, r1, r3
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c80:	4013      	ands	r3, r2
 8004c82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	2101      	movs	r1, #1
 8004c96:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	68f9      	ldr	r1, [r7, #12]
 8004ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	0159      	lsls	r1, r3, #5
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	440b      	add	r3, r1
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4b35      	ldr	r3, [pc, #212]	; (8004d9c <USB_DeactivateEndpoint+0x1b0>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	600b      	str	r3, [r1, #0]
 8004cca:	e060      	b.n	8004d8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ce2:	d11f      	bne.n	8004d24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	0151      	lsls	r1, r2, #5
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	440a      	add	r2, r1
 8004cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	0151      	lsls	r1, r2, #5
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	440a      	add	r2, r1
 8004d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	f003 030f 	and.w	r3, r3, #15
 8004d34:	2101      	movs	r1, #1
 8004d36:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	68f9      	ldr	r1, [r7, #12]
 8004d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d44:	4013      	ands	r3, r2
 8004d46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	2101      	movs	r1, #1
 8004d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5e:	041b      	lsls	r3, r3, #16
 8004d60:	43db      	mvns	r3, r3
 8004d62:	68f9      	ldr	r1, [r7, #12]
 8004d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	0159      	lsls	r1, r3, #5
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	440b      	add	r3, r1
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	4619      	mov	r1, r3
 8004d88:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <USB_DeactivateEndpoint+0x1b4>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	ec337800 	.word	0xec337800
 8004da0:	eff37800 	.word	0xeff37800

08004da4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	; 0x28
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	4613      	mov	r3, r2
 8004db0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	785b      	ldrb	r3, [r3, #1]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	f040 815c 	bne.w	800507e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d132      	bne.n	8004e34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004df0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	0151      	lsls	r1, r2, #5
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	440a      	add	r2, r1
 8004e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2c:	0cdb      	lsrs	r3, r3, #19
 8004e2e:	04db      	lsls	r3, r3, #19
 8004e30:	6113      	str	r3, [r2, #16]
 8004e32:	e074      	b.n	8004f1e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	0151      	lsls	r1, r2, #5
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	440a      	add	r2, r1
 8004e4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4e:	0cdb      	lsrs	r3, r3, #19
 8004e50:	04db      	lsls	r3, r3, #19
 8004e52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e84:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	6999      	ldr	r1, [r3, #24]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	440b      	add	r3, r1
 8004e90:	1e59      	subs	r1, r3, #1
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e9a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e9c:	4b9d      	ldr	r3, [pc, #628]	; (8005114 <USB_EPStartXfer+0x370>)
 8004e9e:	400b      	ands	r3, r1
 8004ea0:	69b9      	ldr	r1, [r7, #24]
 8004ea2:	0148      	lsls	r0, r1, #5
 8004ea4:	69f9      	ldr	r1, [r7, #28]
 8004ea6:	4401      	add	r1, r0
 8004ea8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004eac:	4313      	orrs	r3, r2
 8004eae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec6:	69b9      	ldr	r1, [r7, #24]
 8004ec8:	0148      	lsls	r0, r1, #5
 8004eca:	69f9      	ldr	r1, [r7, #28]
 8004ecc:	4401      	add	r1, r0
 8004ece:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	791b      	ldrb	r3, [r3, #4]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d11f      	bne.n	8004f1e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	0151      	lsls	r1, r2, #5
 8004ef0:	69fa      	ldr	r2, [r7, #28]
 8004ef2:	440a      	add	r2, r1
 8004ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004efc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f1c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f1e:	79fb      	ldrb	r3, [r7, #7]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d14b      	bne.n	8004fbc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d009      	beq.n	8004f40 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f38:	461a      	mov	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	791b      	ldrb	r3, [r3, #4]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d128      	bne.n	8004f9a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d110      	bne.n	8004f7a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	0151      	lsls	r1, r2, #5
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	e00f      	b.n	8004f9a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	0151      	lsls	r1, r2, #5
 8004f8c:	69fa      	ldr	r2, [r7, #28]
 8004f8e:	440a      	add	r2, r1
 8004f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f98:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	e133      	b.n	8005224 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	0151      	lsls	r1, r2, #5
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	440a      	add	r2, r1
 8004fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fda:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	791b      	ldrb	r3, [r3, #4]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d015      	beq.n	8005010 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 811b 	beq.w	8005224 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	2101      	movs	r1, #1
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	69f9      	ldr	r1, [r7, #28]
 8005006:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800500a:	4313      	orrs	r3, r2
 800500c:	634b      	str	r3, [r1, #52]	; 0x34
 800500e:	e109      	b.n	8005224 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501c:	2b00      	cmp	r3, #0
 800501e:	d110      	bne.n	8005042 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	0151      	lsls	r1, r2, #5
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	440a      	add	r2, r1
 8005036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	e00f      	b.n	8005062 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	0151      	lsls	r1, r2, #5
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	440a      	add	r2, r1
 8005058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005060:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	6919      	ldr	r1, [r3, #16]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	781a      	ldrb	r2, [r3, #0]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	b298      	uxth	r0, r3
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	4603      	mov	r3, r0
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fade 	bl	8005638 <USB_WritePacket>
 800507c:	e0d2      	b.n	8005224 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	0151      	lsls	r1, r2, #5
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	440a      	add	r2, r1
 8005094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005098:	0cdb      	lsrs	r3, r3, #19
 800509a:	04db      	lsls	r3, r3, #19
 800509c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	0151      	lsls	r1, r2, #5
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	440a      	add	r2, r1
 80050b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d126      	bne.n	8005118 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e0:	69b9      	ldr	r1, [r7, #24]
 80050e2:	0148      	lsls	r0, r1, #5
 80050e4:	69f9      	ldr	r1, [r7, #28]
 80050e6:	4401      	add	r1, r0
 80050e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050ec:	4313      	orrs	r3, r2
 80050ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	0151      	lsls	r1, r2, #5
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	440a      	add	r2, r1
 8005106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800510e:	6113      	str	r3, [r2, #16]
 8005110:	e03a      	b.n	8005188 <USB_EPStartXfer+0x3e4>
 8005112:	bf00      	nop
 8005114:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	699a      	ldr	r2, [r3, #24]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	4413      	add	r3, r2
 8005122:	1e5a      	subs	r2, r3, #1
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	8afa      	ldrh	r2, [r7, #22]
 8005134:	fb03 f202 	mul.w	r2, r3, r2
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	8afb      	ldrh	r3, [r7, #22]
 800514c:	04d9      	lsls	r1, r3, #19
 800514e:	4b38      	ldr	r3, [pc, #224]	; (8005230 <USB_EPStartXfer+0x48c>)
 8005150:	400b      	ands	r3, r1
 8005152:	69b9      	ldr	r1, [r7, #24]
 8005154:	0148      	lsls	r0, r1, #5
 8005156:	69f9      	ldr	r1, [r7, #28]
 8005158:	4401      	add	r1, r0
 800515a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800515e:	4313      	orrs	r3, r2
 8005160:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005178:	69b9      	ldr	r1, [r7, #24]
 800517a:	0148      	lsls	r0, r1, #5
 800517c:	69f9      	ldr	r1, [r7, #28]
 800517e:	4401      	add	r1, r0
 8005180:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005184:	4313      	orrs	r3, r2
 8005186:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d10d      	bne.n	80051aa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d009      	beq.n	80051aa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	6919      	ldr	r1, [r3, #16]
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a6:	460a      	mov	r2, r1
 80051a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	791b      	ldrb	r3, [r3, #4]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d128      	bne.n	8005204 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d110      	bne.n	80051e4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e00f      	b.n	8005204 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005202:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	440a      	add	r2, r1
 800521a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800521e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005222:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	1ff80000 	.word	0x1ff80000

08005234 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	4613      	mov	r3, r2
 8005240:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	785b      	ldrb	r3, [r3, #1]
 8005250:	2b01      	cmp	r3, #1
 8005252:	f040 80ce 	bne.w	80053f2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d132      	bne.n	80052c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005278:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800527c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005280:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	0151      	lsls	r1, r2, #5
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	440a      	add	r2, r1
 8005298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052bc:	0cdb      	lsrs	r3, r3, #19
 80052be:	04db      	lsls	r3, r3, #19
 80052c0:	6113      	str	r3, [r2, #16]
 80052c2:	e04e      	b.n	8005362 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	0151      	lsls	r1, r2, #5
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	440a      	add	r2, r1
 80052da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052de:	0cdb      	lsrs	r3, r3, #19
 80052e0:	04db      	lsls	r3, r3, #19
 80052e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005302:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005306:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	699a      	ldr	r2, [r3, #24]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	429a      	cmp	r2, r3
 8005312:	d903      	bls.n	800531c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	440a      	add	r2, r1
 8005332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800533a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005352:	6939      	ldr	r1, [r7, #16]
 8005354:	0148      	lsls	r0, r1, #5
 8005356:	6979      	ldr	r1, [r7, #20]
 8005358:	4401      	add	r1, r0
 800535a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800535e:	4313      	orrs	r3, r2
 8005360:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d11e      	bne.n	80053a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d009      	beq.n	8005384 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537c:	461a      	mov	r2, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	e097      	b.n	80054d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	0151      	lsls	r1, r2, #5
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	440a      	add	r2, r1
 80053bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 8083 	beq.w	80054d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	2101      	movs	r1, #1
 80053e2:	fa01 f303 	lsl.w	r3, r1, r3
 80053e6:	6979      	ldr	r1, [r7, #20]
 80053e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053ec:	4313      	orrs	r3, r2
 80053ee:	634b      	str	r3, [r1, #52]	; 0x34
 80053f0:	e071      	b.n	80054d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	440a      	add	r2, r1
 8005408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540c:	0cdb      	lsrs	r3, r3, #19
 800540e:	04db      	lsls	r3, r3, #19
 8005410:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	440a      	add	r2, r1
 8005428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800542c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005430:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005434:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	015a      	lsls	r2, r3, #5
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	4413      	add	r3, r2
 8005456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	0151      	lsls	r1, r2, #5
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	440a      	add	r2, r1
 8005464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005468:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800546c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547a:	691a      	ldr	r2, [r3, #16]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005484:	6939      	ldr	r1, [r7, #16]
 8005486:	0148      	lsls	r0, r1, #5
 8005488:	6979      	ldr	r1, [r7, #20]
 800548a:	4401      	add	r1, r0
 800548c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005490:	4313      	orrs	r3, r2
 8005492:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005494:	79fb      	ldrb	r3, [r7, #7]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d10d      	bne.n	80054b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6919      	ldr	r1, [r3, #16]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b2:	460a      	mov	r2, r1
 80054b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	0151      	lsls	r1, r2, #5
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	440a      	add	r2, r1
 80054cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	785b      	ldrb	r3, [r3, #1]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d14a      	bne.n	8005598 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005516:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800551a:	f040 8086 	bne.w	800562a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	7812      	ldrb	r2, [r2, #0]
 8005532:	0151      	lsls	r1, r2, #5
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	440a      	add	r2, r1
 8005538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005540:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	7812      	ldrb	r2, [r2, #0]
 8005556:	0151      	lsls	r1, r2, #5
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	440a      	add	r2, r1
 800555c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005560:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005564:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3301      	adds	r3, #1
 800556a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005572:	4293      	cmp	r3, r2
 8005574:	d902      	bls.n	800557c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	75fb      	strb	r3, [r7, #23]
          break;
 800557a:	e056      	b.n	800562a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005590:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005594:	d0e7      	beq.n	8005566 <USB_EPStopXfer+0x82>
 8005596:	e048      	b.n	800562a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055b0:	d13b      	bne.n	800562a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	7812      	ldrb	r2, [r2, #0]
 80055c6:	0151      	lsls	r1, r2, #5
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	440a      	add	r2, r1
 80055cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	7812      	ldrb	r2, [r2, #0]
 80055ea:	0151      	lsls	r1, r2, #5
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	440a      	add	r2, r1
 80055f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3301      	adds	r3, #1
 80055fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f242 7210 	movw	r2, #10000	; 0x2710
 8005606:	4293      	cmp	r3, r2
 8005608:	d902      	bls.n	8005610 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	75fb      	strb	r3, [r7, #23]
          break;
 800560e:	e00c      	b.n	800562a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005628:	d0e7      	beq.n	80055fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800562a:	7dfb      	ldrb	r3, [r7, #23]
}
 800562c:	4618      	mov	r0, r3
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005638:	b480      	push	{r7}
 800563a:	b089      	sub	sp, #36	; 0x24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	4611      	mov	r1, r2
 8005644:	461a      	mov	r2, r3
 8005646:	460b      	mov	r3, r1
 8005648:	71fb      	strb	r3, [r7, #7]
 800564a:	4613      	mov	r3, r2
 800564c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005656:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800565a:	2b00      	cmp	r3, #0
 800565c:	d123      	bne.n	80056a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800565e:	88bb      	ldrh	r3, [r7, #4]
 8005660:	3303      	adds	r3, #3
 8005662:	089b      	lsrs	r3, r3, #2
 8005664:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005666:	2300      	movs	r3, #0
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	e018      	b.n	800569e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800566c:	79fb      	ldrb	r3, [r7, #7]
 800566e:	031a      	lsls	r2, r3, #12
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	4413      	add	r3, r2
 8005674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005678:	461a      	mov	r2, r3
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	3301      	adds	r3, #1
 8005684:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	3301      	adds	r3, #1
 800568a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	3301      	adds	r3, #1
 8005690:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	3301      	adds	r3, #1
 8005696:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	3301      	adds	r3, #1
 800569c:	61bb      	str	r3, [r7, #24]
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d3e2      	bcc.n	800566c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3724      	adds	r7, #36	; 0x24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b08b      	sub	sp, #44	; 0x2c
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	4613      	mov	r3, r2
 80056c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	089b      	lsrs	r3, r3, #2
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056d2:	88fb      	ldrh	r3, [r7, #6]
 80056d4:	f003 0303 	and.w	r3, r3, #3
 80056d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80056da:	2300      	movs	r3, #0
 80056dc:	623b      	str	r3, [r7, #32]
 80056de:	e014      	b.n	800570a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	3301      	adds	r3, #1
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	3301      	adds	r3, #1
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	3301      	adds	r3, #1
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	3301      	adds	r3, #1
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	3301      	adds	r3, #1
 8005708:	623b      	str	r3, [r7, #32]
 800570a:	6a3a      	ldr	r2, [r7, #32]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	429a      	cmp	r2, r3
 8005710:	d3e6      	bcc.n	80056e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005712:	8bfb      	ldrh	r3, [r7, #30]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d01e      	beq.n	8005756 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005722:	461a      	mov	r2, r3
 8005724:	f107 0310 	add.w	r3, r7, #16
 8005728:	6812      	ldr	r2, [r2, #0]
 800572a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	fa22 f303 	lsr.w	r3, r2, r3
 8005738:	b2da      	uxtb	r2, r3
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	701a      	strb	r2, [r3, #0]
      i++;
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	3301      	adds	r3, #1
 8005742:	623b      	str	r3, [r7, #32]
      pDest++;
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	3301      	adds	r3, #1
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800574a:	8bfb      	ldrh	r3, [r7, #30]
 800574c:	3b01      	subs	r3, #1
 800574e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005750:	8bfb      	ldrh	r3, [r7, #30]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1ea      	bne.n	800572c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005758:	4618      	mov	r0, r3
 800575a:	372c      	adds	r7, #44	; 0x2c
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	785b      	ldrb	r3, [r3, #1]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d12c      	bne.n	80057da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	db12      	blt.n	80057b8 <USB_EPSetStall+0x54>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00f      	beq.n	80057b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	0151      	lsls	r1, r2, #5
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	440a      	add	r2, r1
 80057ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	e02b      	b.n	8005832 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	db12      	blt.n	8005812 <USB_EPSetStall+0xae>
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00f      	beq.n	8005812 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	015a      	lsls	r2, r3, #5
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	0151      	lsls	r1, r2, #5
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	440a      	add	r2, r1
 8005808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800580c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005810:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	0151      	lsls	r1, r2, #5
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	440a      	add	r2, r1
 8005828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800582c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005830:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	785b      	ldrb	r3, [r3, #1]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d128      	bne.n	80058ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	0151      	lsls	r1, r2, #5
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	440a      	add	r2, r1
 8005872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005876:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800587a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	791b      	ldrb	r3, [r3, #4]
 8005880:	2b03      	cmp	r3, #3
 8005882:	d003      	beq.n	800588c <USB_EPClearStall+0x4c>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	791b      	ldrb	r3, [r3, #4]
 8005888:	2b02      	cmp	r3, #2
 800588a:	d138      	bne.n	80058fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	e027      	b.n	80058fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	791b      	ldrb	r3, [r3, #4]
 80058d2:	2b03      	cmp	r3, #3
 80058d4:	d003      	beq.n	80058de <USB_EPClearStall+0x9e>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	791b      	ldrb	r3, [r3, #4]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d10f      	bne.n	80058fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	0151      	lsls	r1, r2, #5
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	440a      	add	r2, r1
 80058f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800592a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800592e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005940:	68f9      	ldr	r1, [r7, #12]
 8005942:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005946:	4313      	orrs	r3, r2
 8005948:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005972:	f023 0303 	bic.w	r3, r3, #3
 8005976:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005986:	f023 0302 	bic.w	r3, r3, #2
 800598a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800599a:	b480      	push	{r7}
 800599c:	b085      	sub	sp, #20
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059b4:	f023 0303 	bic.w	r3, r3, #3
 80059b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059c8:	f043 0302 	orr.w	r3, r3, #2
 80059cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4013      	ands	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059f4:	68fb      	ldr	r3, [r7, #12]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	4013      	ands	r3, r2
 8005a24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	0c1b      	lsrs	r3, r3, #16
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	4013      	ands	r3, r2
 8005a58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	b29b      	uxth	r3, r3
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	460b      	mov	r3, r1
 8005a74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	4013      	ands	r3, r2
 8005a96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a98:	68bb      	ldr	r3, [r7, #8]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b087      	sub	sp, #28
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	f003 030f 	and.w	r3, r3, #15
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad6:	01db      	lsls	r3, r3, #7
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4013      	ands	r3, r2
 8005af2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005af4:	68bb      	ldr	r3, [r7, #8]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b085      	sub	sp, #20
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b3c:	f023 0307 	bic.w	r3, r3, #7
 8005b40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	333c      	adds	r3, #60	; 0x3c
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	4a26      	ldr	r2, [pc, #152]	; (8005c1c <USB_EP0_OutStart+0xb8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d90a      	bls.n	8005b9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b98:	d101      	bne.n	8005b9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e037      	b.n	8005c0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bcc:	f043 0318 	orr.w	r3, r3, #24
 8005bd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005be4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005be6:	7afb      	ldrb	r3, [r7, #11]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d10f      	bne.n	8005c0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005c0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	4f54300a 	.word	0x4f54300a

08005c20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <USB_CoreReset+0x64>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d901      	bls.n	8005c3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e01b      	b.n	8005c76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	daf2      	bge.n	8005c2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f043 0201 	orr.w	r2, r3, #1
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4a09      	ldr	r2, [pc, #36]	; (8005c84 <USB_CoreReset+0x64>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d901      	bls.n	8005c68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e006      	b.n	8005c76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d0f0      	beq.n	8005c56 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	00030d40 	.word	0x00030d40

08005c88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c98:	f002 fc1e 	bl	80084d8 <USBD_static_malloc>
 8005c9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d109      	bne.n	8005cb8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	32b0      	adds	r2, #176	; 0xb0
 8005cae:	2100      	movs	r1, #0
 8005cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e0d4      	b.n	8005e62 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005cb8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f002 fc4e 	bl	8008560 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	32b0      	adds	r2, #176	; 0xb0
 8005cce:	68f9      	ldr	r1, [r7, #12]
 8005cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	32b0      	adds	r2, #176	; 0xb0
 8005cde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	7c1b      	ldrb	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d138      	bne.n	8005d62 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005cf0:	4b5e      	ldr	r3, [pc, #376]	; (8005e6c <USBD_CDC_Init+0x1e4>)
 8005cf2:	7819      	ldrb	r1, [r3, #0]
 8005cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f002 fac9 	bl	8008292 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d00:	4b5a      	ldr	r3, [pc, #360]	; (8005e6c <USBD_CDC_Init+0x1e4>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	f003 020f 	and.w	r2, r3, #15
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	440b      	add	r3, r1
 8005d14:	3324      	adds	r3, #36	; 0x24
 8005d16:	2201      	movs	r2, #1
 8005d18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d1a:	4b55      	ldr	r3, [pc, #340]	; (8005e70 <USBD_CDC_Init+0x1e8>)
 8005d1c:	7819      	ldrb	r1, [r3, #0]
 8005d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d22:	2202      	movs	r2, #2
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f002 fab4 	bl	8008292 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d2a:	4b51      	ldr	r3, [pc, #324]	; (8005e70 <USBD_CDC_Init+0x1e8>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	f003 020f 	and.w	r2, r3, #15
 8005d32:	6879      	ldr	r1, [r7, #4]
 8005d34:	4613      	mov	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4413      	add	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	440b      	add	r3, r1
 8005d3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d42:	2201      	movs	r2, #1
 8005d44:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d46:	4b4b      	ldr	r3, [pc, #300]	; (8005e74 <USBD_CDC_Init+0x1ec>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	f003 020f 	and.w	r2, r3, #15
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	440b      	add	r3, r1
 8005d5a:	3326      	adds	r3, #38	; 0x26
 8005d5c:	2210      	movs	r2, #16
 8005d5e:	801a      	strh	r2, [r3, #0]
 8005d60:	e035      	b.n	8005dce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d62:	4b42      	ldr	r3, [pc, #264]	; (8005e6c <USBD_CDC_Init+0x1e4>)
 8005d64:	7819      	ldrb	r1, [r3, #0]
 8005d66:	2340      	movs	r3, #64	; 0x40
 8005d68:	2202      	movs	r2, #2
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f002 fa91 	bl	8008292 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d70:	4b3e      	ldr	r3, [pc, #248]	; (8005e6c <USBD_CDC_Init+0x1e4>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	440b      	add	r3, r1
 8005d84:	3324      	adds	r3, #36	; 0x24
 8005d86:	2201      	movs	r2, #1
 8005d88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d8a:	4b39      	ldr	r3, [pc, #228]	; (8005e70 <USBD_CDC_Init+0x1e8>)
 8005d8c:	7819      	ldrb	r1, [r3, #0]
 8005d8e:	2340      	movs	r3, #64	; 0x40
 8005d90:	2202      	movs	r2, #2
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f002 fa7d 	bl	8008292 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d98:	4b35      	ldr	r3, [pc, #212]	; (8005e70 <USBD_CDC_Init+0x1e8>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	f003 020f 	and.w	r2, r3, #15
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005db0:	2201      	movs	r2, #1
 8005db2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005db4:	4b2f      	ldr	r3, [pc, #188]	; (8005e74 <USBD_CDC_Init+0x1ec>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	f003 020f 	and.w	r2, r3, #15
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	440b      	add	r3, r1
 8005dc8:	3326      	adds	r3, #38	; 0x26
 8005dca:	2210      	movs	r2, #16
 8005dcc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dce:	4b29      	ldr	r3, [pc, #164]	; (8005e74 <USBD_CDC_Init+0x1ec>)
 8005dd0:	7819      	ldrb	r1, [r3, #0]
 8005dd2:	2308      	movs	r3, #8
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f002 fa5b 	bl	8008292 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ddc:	4b25      	ldr	r3, [pc, #148]	; (8005e74 <USBD_CDC_Init+0x1ec>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	f003 020f 	and.w	r2, r3, #15
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	3324      	adds	r3, #36	; 0x24
 8005df2:	2201      	movs	r2, #1
 8005df4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	33b0      	adds	r3, #176	; 0xb0
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e018      	b.n	8005e62 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	7c1b      	ldrb	r3, [r3, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e38:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <USBD_CDC_Init+0x1e8>)
 8005e3a:	7819      	ldrb	r1, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f002 fb12 	bl	8008470 <USBD_LL_PrepareReceive>
 8005e4c:	e008      	b.n	8005e60 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e4e:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <USBD_CDC_Init+0x1e8>)
 8005e50:	7819      	ldrb	r1, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e58:	2340      	movs	r3, #64	; 0x40
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f002 fb08 	bl	8008470 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000093 	.word	0x20000093
 8005e70:	20000094 	.word	0x20000094
 8005e74:	20000095 	.word	0x20000095

08005e78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005e84:	4b3a      	ldr	r3, [pc, #232]	; (8005f70 <USBD_CDC_DeInit+0xf8>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f002 fa27 	bl	80082de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005e90:	4b37      	ldr	r3, [pc, #220]	; (8005f70 <USBD_CDC_DeInit+0xf8>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	f003 020f 	and.w	r2, r3, #15
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	3324      	adds	r3, #36	; 0x24
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005eaa:	4b32      	ldr	r3, [pc, #200]	; (8005f74 <USBD_CDC_DeInit+0xfc>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f002 fa14 	bl	80082de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005eb6:	4b2f      	ldr	r3, [pc, #188]	; (8005f74 <USBD_CDC_DeInit+0xfc>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	f003 020f 	and.w	r2, r3, #15
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ece:	2200      	movs	r2, #0
 8005ed0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005ed2:	4b29      	ldr	r3, [pc, #164]	; (8005f78 <USBD_CDC_DeInit+0x100>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f002 fa00 	bl	80082de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005ede:	4b26      	ldr	r3, [pc, #152]	; (8005f78 <USBD_CDC_DeInit+0x100>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	f003 020f 	and.w	r2, r3, #15
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	3324      	adds	r3, #36	; 0x24
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005ef8:	4b1f      	ldr	r3, [pc, #124]	; (8005f78 <USBD_CDC_DeInit+0x100>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	f003 020f 	and.w	r2, r3, #15
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3326      	adds	r3, #38	; 0x26
 8005f0e:	2200      	movs	r2, #0
 8005f10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	32b0      	adds	r2, #176	; 0xb0
 8005f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01f      	beq.n	8005f64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	33b0      	adds	r3, #176	; 0xb0
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	32b0      	adds	r2, #176	; 0xb0
 8005f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f002 fad4 	bl	80084f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	32b0      	adds	r2, #176	; 0xb0
 8005f56:	2100      	movs	r1, #0
 8005f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000093 	.word	0x20000093
 8005f74:	20000094 	.word	0x20000094
 8005f78:	20000095 	.word	0x20000095

08005f7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	32b0      	adds	r2, #176	; 0xb0
 8005f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e0bf      	b.n	800612c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d050      	beq.n	800605a <USBD_CDC_Setup+0xde>
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	f040 80af 	bne.w	800611c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	88db      	ldrh	r3, [r3, #6]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d03a      	beq.n	800603c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	b25b      	sxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	da1b      	bge.n	8006008 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	33b0      	adds	r3, #176	; 0xb0
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005fe6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	88d2      	ldrh	r2, [r2, #6]
 8005fec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	88db      	ldrh	r3, [r3, #6]
 8005ff2:	2b07      	cmp	r3, #7
 8005ff4:	bf28      	it	cs
 8005ff6:	2307      	movcs	r3, #7
 8005ff8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	89fa      	ldrh	r2, [r7, #14]
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 fd43 	bl	8007a8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006006:	e090      	b.n	800612a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	785a      	ldrb	r2, [r3, #1]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	88db      	ldrh	r3, [r3, #6]
 8006016:	2b3f      	cmp	r3, #63	; 0x3f
 8006018:	d803      	bhi.n	8006022 <USBD_CDC_Setup+0xa6>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	88db      	ldrh	r3, [r3, #6]
 800601e:	b2da      	uxtb	r2, r3
 8006020:	e000      	b.n	8006024 <USBD_CDC_Setup+0xa8>
 8006022:	2240      	movs	r2, #64	; 0x40
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800602a:	6939      	ldr	r1, [r7, #16]
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006032:	461a      	mov	r2, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f001 fd55 	bl	8007ae4 <USBD_CtlPrepareRx>
      break;
 800603a:	e076      	b.n	800612a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	33b0      	adds	r3, #176	; 0xb0
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	7850      	ldrb	r0, [r2, #1]
 8006052:	2200      	movs	r2, #0
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	4798      	blx	r3
      break;
 8006058:	e067      	b.n	800612a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	2b0b      	cmp	r3, #11
 8006060:	d851      	bhi.n	8006106 <USBD_CDC_Setup+0x18a>
 8006062:	a201      	add	r2, pc, #4	; (adr r2, 8006068 <USBD_CDC_Setup+0xec>)
 8006064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006068:	08006099 	.word	0x08006099
 800606c:	08006115 	.word	0x08006115
 8006070:	08006107 	.word	0x08006107
 8006074:	08006107 	.word	0x08006107
 8006078:	08006107 	.word	0x08006107
 800607c:	08006107 	.word	0x08006107
 8006080:	08006107 	.word	0x08006107
 8006084:	08006107 	.word	0x08006107
 8006088:	08006107 	.word	0x08006107
 800608c:	08006107 	.word	0x08006107
 8006090:	080060c3 	.word	0x080060c3
 8006094:	080060ed 	.word	0x080060ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d107      	bne.n	80060b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80060a4:	f107 030a 	add.w	r3, r7, #10
 80060a8:	2202      	movs	r2, #2
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f001 fced 	bl	8007a8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060b2:	e032      	b.n	800611a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060b4:	6839      	ldr	r1, [r7, #0]
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 fc77 	bl	80079aa <USBD_CtlError>
            ret = USBD_FAIL;
 80060bc:	2303      	movs	r3, #3
 80060be:	75fb      	strb	r3, [r7, #23]
          break;
 80060c0:	e02b      	b.n	800611a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d107      	bne.n	80060de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060ce:	f107 030d 	add.w	r3, r7, #13
 80060d2:	2201      	movs	r2, #1
 80060d4:	4619      	mov	r1, r3
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 fcd8 	bl	8007a8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060dc:	e01d      	b.n	800611a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 fc62 	bl	80079aa <USBD_CtlError>
            ret = USBD_FAIL;
 80060e6:	2303      	movs	r3, #3
 80060e8:	75fb      	strb	r3, [r7, #23]
          break;
 80060ea:	e016      	b.n	800611a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d00f      	beq.n	8006118 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 fc55 	bl	80079aa <USBD_CtlError>
            ret = USBD_FAIL;
 8006100:	2303      	movs	r3, #3
 8006102:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006104:	e008      	b.n	8006118 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f001 fc4e 	bl	80079aa <USBD_CtlError>
          ret = USBD_FAIL;
 800610e:	2303      	movs	r3, #3
 8006110:	75fb      	strb	r3, [r7, #23]
          break;
 8006112:	e002      	b.n	800611a <USBD_CDC_Setup+0x19e>
          break;
 8006114:	bf00      	nop
 8006116:	e008      	b.n	800612a <USBD_CDC_Setup+0x1ae>
          break;
 8006118:	bf00      	nop
      }
      break;
 800611a:	e006      	b.n	800612a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800611c:	6839      	ldr	r1, [r7, #0]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 fc43 	bl	80079aa <USBD_CtlError>
      ret = USBD_FAIL;
 8006124:	2303      	movs	r3, #3
 8006126:	75fb      	strb	r3, [r7, #23]
      break;
 8006128:	bf00      	nop
  }

  return (uint8_t)ret;
 800612a:	7dfb      	ldrb	r3, [r7, #23]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	460b      	mov	r3, r1
 800613e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006146:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	32b0      	adds	r2, #176	; 0xb0
 8006152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800615a:	2303      	movs	r3, #3
 800615c:	e065      	b.n	800622a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	32b0      	adds	r2, #176	; 0xb0
 8006168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	f003 020f 	and.w	r2, r3, #15
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	3318      	adds	r3, #24
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d02f      	beq.n	80061e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	f003 020f 	and.w	r2, r3, #15
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	3318      	adds	r3, #24
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	78fb      	ldrb	r3, [r7, #3]
 80061a0:	f003 010f 	and.w	r1, r3, #15
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	460b      	mov	r3, r1
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	440b      	add	r3, r1
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4403      	add	r3, r0
 80061b0:	3348      	adds	r3, #72	; 0x48
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80061b8:	fb01 f303 	mul.w	r3, r1, r3
 80061bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d112      	bne.n	80061e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80061c2:	78fb      	ldrb	r3, [r7, #3]
 80061c4:	f003 020f 	and.w	r2, r3, #15
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	3318      	adds	r3, #24
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061da:	78f9      	ldrb	r1, [r7, #3]
 80061dc:	2300      	movs	r3, #0
 80061de:	2200      	movs	r2, #0
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f002 f924 	bl	800842e <USBD_LL_Transmit>
 80061e6:	e01f      	b.n	8006228 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	33b0      	adds	r3, #176	; 0xb0
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d010      	beq.n	8006228 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	33b0      	adds	r3, #176	; 0xb0
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006224:	78fa      	ldrb	r2, [r7, #3]
 8006226:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	460b      	mov	r3, r1
 800623c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	32b0      	adds	r2, #176	; 0xb0
 8006248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	32b0      	adds	r2, #176	; 0xb0
 8006258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006260:	2303      	movs	r3, #3
 8006262:	e01a      	b.n	800629a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f002 f922 	bl	80084b2 <USBD_LL_GetRxDataSize>
 800626e:	4602      	mov	r2, r0
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	33b0      	adds	r3, #176	; 0xb0
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006294:	4611      	mov	r1, r2
 8006296:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	32b0      	adds	r2, #176	; 0xb0
 80062b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e025      	b.n	8006310 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	33b0      	adds	r3, #176	; 0xb0
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01a      	beq.n	800630e <USBD_CDC_EP0_RxReady+0x6c>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80062de:	2bff      	cmp	r3, #255	; 0xff
 80062e0:	d015      	beq.n	800630e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	33b0      	adds	r3, #176	; 0xb0
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80062fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006302:	b292      	uxth	r2, r2
 8006304:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	22ff      	movs	r2, #255	; 0xff
 800630a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006320:	2182      	movs	r1, #130	; 0x82
 8006322:	4818      	ldr	r0, [pc, #96]	; (8006384 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006324:	f000 fd09 	bl	8006d3a <USBD_GetEpDesc>
 8006328:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800632a:	2101      	movs	r1, #1
 800632c:	4815      	ldr	r0, [pc, #84]	; (8006384 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800632e:	f000 fd04 	bl	8006d3a <USBD_GetEpDesc>
 8006332:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006334:	2181      	movs	r1, #129	; 0x81
 8006336:	4813      	ldr	r0, [pc, #76]	; (8006384 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006338:	f000 fcff 	bl	8006d3a <USBD_GetEpDesc>
 800633c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	2210      	movs	r2, #16
 8006348:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d006      	beq.n	800635e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	2200      	movs	r2, #0
 8006354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006358:	711a      	strb	r2, [r3, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d006      	beq.n	8006372 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800636c:	711a      	strb	r2, [r3, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2243      	movs	r2, #67	; 0x43
 8006376:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006378:	4b02      	ldr	r3, [pc, #8]	; (8006384 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20000050 	.word	0x20000050

08006388 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006390:	2182      	movs	r1, #130	; 0x82
 8006392:	4818      	ldr	r0, [pc, #96]	; (80063f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006394:	f000 fcd1 	bl	8006d3a <USBD_GetEpDesc>
 8006398:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800639a:	2101      	movs	r1, #1
 800639c:	4815      	ldr	r0, [pc, #84]	; (80063f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800639e:	f000 fccc 	bl	8006d3a <USBD_GetEpDesc>
 80063a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063a4:	2181      	movs	r1, #129	; 0x81
 80063a6:	4813      	ldr	r0, [pc, #76]	; (80063f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063a8:	f000 fcc7 	bl	8006d3a <USBD_GetEpDesc>
 80063ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2210      	movs	r2, #16
 80063b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d006      	beq.n	80063ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	2200      	movs	r2, #0
 80063c4:	711a      	strb	r2, [r3, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f042 0202 	orr.w	r2, r2, #2
 80063cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d006      	beq.n	80063e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	711a      	strb	r2, [r3, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f042 0202 	orr.w	r2, r2, #2
 80063e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2243      	movs	r2, #67	; 0x43
 80063e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063e8:	4b02      	ldr	r3, [pc, #8]	; (80063f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20000050 	.word	0x20000050

080063f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006400:	2182      	movs	r1, #130	; 0x82
 8006402:	4818      	ldr	r0, [pc, #96]	; (8006464 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006404:	f000 fc99 	bl	8006d3a <USBD_GetEpDesc>
 8006408:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800640a:	2101      	movs	r1, #1
 800640c:	4815      	ldr	r0, [pc, #84]	; (8006464 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800640e:	f000 fc94 	bl	8006d3a <USBD_GetEpDesc>
 8006412:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006414:	2181      	movs	r1, #129	; 0x81
 8006416:	4813      	ldr	r0, [pc, #76]	; (8006464 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006418:	f000 fc8f 	bl	8006d3a <USBD_GetEpDesc>
 800641c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	2210      	movs	r2, #16
 8006428:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d006      	beq.n	800643e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	2200      	movs	r2, #0
 8006434:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006438:	711a      	strb	r2, [r3, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d006      	beq.n	8006452 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800644c:	711a      	strb	r2, [r3, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2243      	movs	r2, #67	; 0x43
 8006456:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006458:	4b02      	ldr	r3, [pc, #8]	; (8006464 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000050 	.word	0x20000050

08006468 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	220a      	movs	r2, #10
 8006474:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006476:	4b03      	ldr	r3, [pc, #12]	; (8006484 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	2000000c 	.word	0x2000000c

08006488 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006498:	2303      	movs	r3, #3
 800649a:	e009      	b.n	80064b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	33b0      	adds	r3, #176	; 0xb0
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	32b0      	adds	r2, #176	; 0xb0
 80064d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80064de:	2303      	movs	r3, #3
 80064e0:	e008      	b.n	80064f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	371c      	adds	r7, #28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	32b0      	adds	r2, #176	; 0xb0
 8006514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006518:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006520:	2303      	movs	r3, #3
 8006522:	e004      	b.n	800652e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr
	...

0800653c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	32b0      	adds	r2, #176	; 0xb0
 800654e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006552:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	32b0      	adds	r2, #176	; 0xb0
 800655e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006566:	2303      	movs	r3, #3
 8006568:	e018      	b.n	800659c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	7c1b      	ldrb	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10a      	bne.n	8006588 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006572:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <USBD_CDC_ReceivePacket+0x68>)
 8006574:	7819      	ldrb	r1, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800657c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f001 ff75 	bl	8008470 <USBD_LL_PrepareReceive>
 8006586:	e008      	b.n	800659a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006588:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <USBD_CDC_ReceivePacket+0x68>)
 800658a:	7819      	ldrb	r1, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006592:	2340      	movs	r3, #64	; 0x40
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 ff6b 	bl	8008470 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20000094 	.word	0x20000094

080065a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	4613      	mov	r3, r2
 80065b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80065bc:	2303      	movs	r3, #3
 80065be:	e01f      	b.n	8006600 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	79fa      	ldrb	r2, [r7, #7]
 80065f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f001 fde5 	bl	80081c4 <USBD_LL_Init>
 80065fa:	4603      	mov	r3, r0
 80065fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800661c:	2303      	movs	r3, #3
 800661e:	e025      	b.n	800666c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	32ae      	adds	r2, #174	; 0xae
 8006632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00f      	beq.n	800665c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	32ae      	adds	r2, #174	; 0xae
 8006646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	f107 020e 	add.w	r2, r7, #14
 8006650:	4610      	mov	r0, r2
 8006652:	4798      	blx	r3
 8006654:	4602      	mov	r2, r0
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 fded 	bl	800825c <USBD_LL_Start>
 8006682:	4603      	mov	r3, r0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006694:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006696:	4618      	mov	r0, r3
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d009      	beq.n	80066d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	78fa      	ldrb	r2, [r7, #3]
 80066c6:	4611      	mov	r1, r2
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	4798      	blx	r3
 80066cc:	4603      	mov	r3, r0
 80066ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	460b      	mov	r3, r1
 80066e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	78fa      	ldrb	r2, [r7, #3]
 80066f4:	4611      	mov	r1, r2
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006700:	2303      	movs	r3, #3
 8006702:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006704:	7bfb      	ldrb	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	4618      	mov	r0, r3
 8006722:	f001 f908 	bl	8007936 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006734:	461a      	mov	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	2b02      	cmp	r3, #2
 8006748:	d01a      	beq.n	8006780 <USBD_LL_SetupStage+0x72>
 800674a:	2b02      	cmp	r3, #2
 800674c:	d822      	bhi.n	8006794 <USBD_LL_SetupStage+0x86>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <USBD_LL_SetupStage+0x4a>
 8006752:	2b01      	cmp	r3, #1
 8006754:	d00a      	beq.n	800676c <USBD_LL_SetupStage+0x5e>
 8006756:	e01d      	b.n	8006794 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fb5f 	bl	8006e24 <USBD_StdDevReq>
 8006766:	4603      	mov	r3, r0
 8006768:	73fb      	strb	r3, [r7, #15]
      break;
 800676a:	e020      	b.n	80067ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fbc7 	bl	8006f08 <USBD_StdItfReq>
 800677a:	4603      	mov	r3, r0
 800677c:	73fb      	strb	r3, [r7, #15]
      break;
 800677e:	e016      	b.n	80067ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fc29 	bl	8006fe0 <USBD_StdEPReq>
 800678e:	4603      	mov	r3, r0
 8006790:	73fb      	strb	r3, [r7, #15]
      break;
 8006792:	e00c      	b.n	80067ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800679a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 fdba 	bl	800831c <USBD_LL_StallEP>
 80067a8:	4603      	mov	r3, r0
 80067aa:	73fb      	strb	r3, [r7, #15]
      break;
 80067ac:	bf00      	nop
  }

  return ret;
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	460b      	mov	r3, r1
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80067ca:	7afb      	ldrb	r3, [r7, #11]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d16e      	bne.n	80068ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80067d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067de:	2b03      	cmp	r3, #3
 80067e0:	f040 8098 	bne.w	8006914 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d913      	bls.n	8006818 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	689a      	ldr	r2, [r3, #8]
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	1ad2      	subs	r2, r2, r3
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	4293      	cmp	r3, r2
 8006808:	bf28      	it	cs
 800680a:	4613      	movcs	r3, r2
 800680c:	461a      	mov	r2, r3
 800680e:	6879      	ldr	r1, [r7, #4]
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f001 f984 	bl	8007b1e <USBD_CtlContinueRx>
 8006816:	e07d      	b.n	8006914 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	2b02      	cmp	r3, #2
 8006824:	d014      	beq.n	8006850 <USBD_LL_DataOutStage+0x98>
 8006826:	2b02      	cmp	r3, #2
 8006828:	d81d      	bhi.n	8006866 <USBD_LL_DataOutStage+0xae>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <USBD_LL_DataOutStage+0x7c>
 800682e:	2b01      	cmp	r3, #1
 8006830:	d003      	beq.n	800683a <USBD_LL_DataOutStage+0x82>
 8006832:	e018      	b.n	8006866 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	75bb      	strb	r3, [r7, #22]
            break;
 8006838:	e018      	b.n	800686c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006840:	b2db      	uxtb	r3, r3
 8006842:	4619      	mov	r1, r3
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 fa5e 	bl	8006d06 <USBD_CoreFindIF>
 800684a:	4603      	mov	r3, r0
 800684c:	75bb      	strb	r3, [r7, #22]
            break;
 800684e:	e00d      	b.n	800686c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006856:	b2db      	uxtb	r3, r3
 8006858:	4619      	mov	r1, r3
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 fa60 	bl	8006d20 <USBD_CoreFindEP>
 8006860:	4603      	mov	r3, r0
 8006862:	75bb      	strb	r3, [r7, #22]
            break;
 8006864:	e002      	b.n	800686c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	75bb      	strb	r3, [r7, #22]
            break;
 800686a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800686c:	7dbb      	ldrb	r3, [r7, #22]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d119      	bne.n	80068a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b03      	cmp	r3, #3
 800687c:	d113      	bne.n	80068a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800687e:	7dba      	ldrb	r2, [r7, #22]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	32ae      	adds	r2, #174	; 0xae
 8006884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800688e:	7dba      	ldrb	r2, [r7, #22]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006896:	7dba      	ldrb	r2, [r7, #22]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	32ae      	adds	r2, #174	; 0xae
 800689c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f001 f94a 	bl	8007b40 <USBD_CtlSendStatus>
 80068ac:	e032      	b.n	8006914 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80068ae:	7afb      	ldrb	r3, [r7, #11]
 80068b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	4619      	mov	r1, r3
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 fa31 	bl	8006d20 <USBD_CoreFindEP>
 80068be:	4603      	mov	r3, r0
 80068c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068c2:	7dbb      	ldrb	r3, [r7, #22]
 80068c4:	2bff      	cmp	r3, #255	; 0xff
 80068c6:	d025      	beq.n	8006914 <USBD_LL_DataOutStage+0x15c>
 80068c8:	7dbb      	ldrb	r3, [r7, #22]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d122      	bne.n	8006914 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d117      	bne.n	800690a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80068da:	7dba      	ldrb	r2, [r7, #22]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	32ae      	adds	r2, #174	; 0xae
 80068e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00f      	beq.n	800690a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80068ea:	7dba      	ldrb	r2, [r7, #22]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80068f2:	7dba      	ldrb	r2, [r7, #22]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	32ae      	adds	r2, #174	; 0xae
 80068f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	7afa      	ldrb	r2, [r7, #11]
 8006900:	4611      	mov	r1, r2
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	4798      	blx	r3
 8006906:	4603      	mov	r3, r0
 8006908:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800690a:	7dfb      	ldrb	r3, [r7, #23]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	e000      	b.n	8006916 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b086      	sub	sp, #24
 8006922:	af00      	add	r7, sp, #0
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	460b      	mov	r3, r1
 8006928:	607a      	str	r2, [r7, #4]
 800692a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800692c:	7afb      	ldrb	r3, [r7, #11]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d16f      	bne.n	8006a12 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3314      	adds	r3, #20
 8006936:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800693e:	2b02      	cmp	r3, #2
 8006940:	d15a      	bne.n	80069f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	689a      	ldr	r2, [r3, #8]
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	429a      	cmp	r2, r3
 800694c:	d914      	bls.n	8006978 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	1ad2      	subs	r2, r2, r3
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	461a      	mov	r2, r3
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f001 f8ac 	bl	8007ac2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800696a:	2300      	movs	r3, #0
 800696c:	2200      	movs	r2, #0
 800696e:	2100      	movs	r1, #0
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f001 fd7d 	bl	8008470 <USBD_LL_PrepareReceive>
 8006976:	e03f      	b.n	80069f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	68da      	ldr	r2, [r3, #12]
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	429a      	cmp	r2, r3
 8006982:	d11c      	bne.n	80069be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800698c:	429a      	cmp	r2, r3
 800698e:	d316      	bcc.n	80069be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800699a:	429a      	cmp	r2, r3
 800699c:	d20f      	bcs.n	80069be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800699e:	2200      	movs	r2, #0
 80069a0:	2100      	movs	r1, #0
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f001 f88d 	bl	8007ac2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069b0:	2300      	movs	r3, #0
 80069b2:	2200      	movs	r2, #0
 80069b4:	2100      	movs	r1, #0
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f001 fd5a 	bl	8008470 <USBD_LL_PrepareReceive>
 80069bc:	e01c      	b.n	80069f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d10f      	bne.n	80069ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d009      	beq.n	80069ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80069ea:	2180      	movs	r1, #128	; 0x80
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f001 fc95 	bl	800831c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f001 f8b7 	bl	8007b66 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d03a      	beq.n	8006a78 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff fe42 	bl	800668c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a10:	e032      	b.n	8006a78 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006a12:	7afb      	ldrb	r3, [r7, #11]
 8006a14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 f97f 	bl	8006d20 <USBD_CoreFindEP>
 8006a22:	4603      	mov	r3, r0
 8006a24:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	2bff      	cmp	r3, #255	; 0xff
 8006a2a:	d025      	beq.n	8006a78 <USBD_LL_DataInStage+0x15a>
 8006a2c:	7dfb      	ldrb	r3, [r7, #23]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d122      	bne.n	8006a78 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d11c      	bne.n	8006a78 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006a3e:	7dfa      	ldrb	r2, [r7, #23]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	32ae      	adds	r2, #174	; 0xae
 8006a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d014      	beq.n	8006a78 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006a4e:	7dfa      	ldrb	r2, [r7, #23]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006a56:	7dfa      	ldrb	r2, [r7, #23]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	32ae      	adds	r2, #174	; 0xae
 8006a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	7afa      	ldrb	r2, [r7, #11]
 8006a64:	4611      	mov	r1, r2
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	4798      	blx	r3
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006a6e:	7dbb      	ldrb	r3, [r7, #22]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006a74:	7dbb      	ldrb	r3, [r7, #22]
 8006a76:	e000      	b.n	8006a7a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d014      	beq.n	8006ae8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00e      	beq.n	8006ae8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	6852      	ldr	r2, [r2, #4]
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	4611      	mov	r1, r2
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	4798      	blx	r3
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ae8:	2340      	movs	r3, #64	; 0x40
 8006aea:	2200      	movs	r2, #0
 8006aec:	2100      	movs	r1, #0
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 fbcf 	bl	8008292 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2240      	movs	r2, #64	; 0x40
 8006b00:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b04:	2340      	movs	r3, #64	; 0x40
 8006b06:	2200      	movs	r2, #0
 8006b08:	2180      	movs	r1, #128	; 0x80
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 fbc1 	bl	8008292 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2240      	movs	r2, #64	; 0x40
 8006b1a:	621a      	str	r2, [r3, #32]

  return ret;
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	78fa      	ldrb	r2, [r7, #3]
 8006b36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2204      	movs	r2, #4
 8006b60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	d106      	bne.n	8006b94 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d110      	bne.n	8006bd8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	460b      	mov	r3, r1
 8006bec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	32ae      	adds	r2, #174	; 0xae
 8006bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e01c      	b.n	8006c3e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d115      	bne.n	8006c3c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	32ae      	adds	r2, #174	; 0xae
 8006c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00b      	beq.n	8006c3c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	32ae      	adds	r2, #174	; 0xae
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	78fa      	ldrb	r2, [r7, #3]
 8006c36:	4611      	mov	r1, r2
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	460b      	mov	r3, r1
 8006c50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	32ae      	adds	r2, #174	; 0xae
 8006c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e01c      	b.n	8006ca2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b03      	cmp	r3, #3
 8006c72:	d115      	bne.n	8006ca0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	32ae      	adds	r2, #174	; 0xae
 8006c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	32ae      	adds	r2, #174	; 0xae
 8006c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	78fa      	ldrb	r2, [r7, #3]
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00e      	beq.n	8006cfc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	6852      	ldr	r2, [r2, #4]
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	4611      	mov	r1, r2
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	4798      	blx	r3
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d12:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d2c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b086      	sub	sp, #24
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	460b      	mov	r3, r1
 8006d44:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	885b      	ldrh	r3, [r3, #2]
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d920      	bls.n	8006da4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006d6a:	e013      	b.n	8006d94 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006d6c:	f107 030a 	add.w	r3, r7, #10
 8006d70:	4619      	mov	r1, r3
 8006d72:	6978      	ldr	r0, [r7, #20]
 8006d74:	f000 f81b 	bl	8006dae <USBD_GetNextDesc>
 8006d78:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	785b      	ldrb	r3, [r3, #1]
 8006d7e:	2b05      	cmp	r3, #5
 8006d80:	d108      	bne.n	8006d94 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	789b      	ldrb	r3, [r3, #2]
 8006d8a:	78fa      	ldrb	r2, [r7, #3]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d008      	beq.n	8006da2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	885b      	ldrh	r3, [r3, #2]
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	897b      	ldrh	r3, [r7, #10]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d8e5      	bhi.n	8006d6c <USBD_GetEpDesc+0x32>
 8006da0:	e000      	b.n	8006da4 <USBD_GetEpDesc+0x6a>
          break;
 8006da2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006da4:	693b      	ldr	r3, [r7, #16]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b085      	sub	sp, #20
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	881a      	ldrh	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	4413      	add	r3, r2
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006dda:	68fb      	ldr	r3, [r7, #12]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e06:	8a3b      	ldrh	r3, [r7, #16]
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	b21a      	sxth	r2, r3
 8006e0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	b21b      	sxth	r3, r3
 8006e14:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006e16:	89fb      	ldrh	r3, [r7, #14]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	371c      	adds	r7, #28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e3a:	2b40      	cmp	r3, #64	; 0x40
 8006e3c:	d005      	beq.n	8006e4a <USBD_StdDevReq+0x26>
 8006e3e:	2b40      	cmp	r3, #64	; 0x40
 8006e40:	d857      	bhi.n	8006ef2 <USBD_StdDevReq+0xce>
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00f      	beq.n	8006e66 <USBD_StdDevReq+0x42>
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	d153      	bne.n	8006ef2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	32ae      	adds	r2, #174	; 0xae
 8006e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	4798      	blx	r3
 8006e60:	4603      	mov	r3, r0
 8006e62:	73fb      	strb	r3, [r7, #15]
      break;
 8006e64:	e04a      	b.n	8006efc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	785b      	ldrb	r3, [r3, #1]
 8006e6a:	2b09      	cmp	r3, #9
 8006e6c:	d83b      	bhi.n	8006ee6 <USBD_StdDevReq+0xc2>
 8006e6e:	a201      	add	r2, pc, #4	; (adr r2, 8006e74 <USBD_StdDevReq+0x50>)
 8006e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e74:	08006ec9 	.word	0x08006ec9
 8006e78:	08006edd 	.word	0x08006edd
 8006e7c:	08006ee7 	.word	0x08006ee7
 8006e80:	08006ed3 	.word	0x08006ed3
 8006e84:	08006ee7 	.word	0x08006ee7
 8006e88:	08006ea7 	.word	0x08006ea7
 8006e8c:	08006e9d 	.word	0x08006e9d
 8006e90:	08006ee7 	.word	0x08006ee7
 8006e94:	08006ebf 	.word	0x08006ebf
 8006e98:	08006eb1 	.word	0x08006eb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa3c 	bl	800731c <USBD_GetDescriptor>
          break;
 8006ea4:	e024      	b.n	8006ef0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006ea6:	6839      	ldr	r1, [r7, #0]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fba1 	bl	80075f0 <USBD_SetAddress>
          break;
 8006eae:	e01f      	b.n	8006ef0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fbe0 	bl	8007678 <USBD_SetConfig>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73fb      	strb	r3, [r7, #15]
          break;
 8006ebc:	e018      	b.n	8006ef0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fc83 	bl	80077cc <USBD_GetConfig>
          break;
 8006ec6:	e013      	b.n	8006ef0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fcb4 	bl	8007838 <USBD_GetStatus>
          break;
 8006ed0:	e00e      	b.n	8006ef0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fce3 	bl	80078a0 <USBD_SetFeature>
          break;
 8006eda:	e009      	b.n	8006ef0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fd07 	bl	80078f2 <USBD_ClrFeature>
          break;
 8006ee4:	e004      	b.n	8006ef0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fd5e 	bl	80079aa <USBD_CtlError>
          break;
 8006eee:	bf00      	nop
      }
      break;
 8006ef0:	e004      	b.n	8006efc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fd58 	bl	80079aa <USBD_CtlError>
      break;
 8006efa:	bf00      	nop
  }

  return ret;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop

08006f08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f1e:	2b40      	cmp	r3, #64	; 0x40
 8006f20:	d005      	beq.n	8006f2e <USBD_StdItfReq+0x26>
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	d852      	bhi.n	8006fcc <USBD_StdItfReq+0xc4>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <USBD_StdItfReq+0x26>
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	d14e      	bne.n	8006fcc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d840      	bhi.n	8006fbe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	889b      	ldrh	r3, [r3, #4]
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d836      	bhi.n	8006fb4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	889b      	ldrh	r3, [r3, #4]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff fed9 	bl	8006d06 <USBD_CoreFindIF>
 8006f54:	4603      	mov	r3, r0
 8006f56:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	2bff      	cmp	r3, #255	; 0xff
 8006f5c:	d01d      	beq.n	8006f9a <USBD_StdItfReq+0x92>
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d11a      	bne.n	8006f9a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006f64:	7bba      	ldrb	r2, [r7, #14]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	32ae      	adds	r2, #174	; 0xae
 8006f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00f      	beq.n	8006f94 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006f74:	7bba      	ldrb	r2, [r7, #14]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f7c:	7bba      	ldrb	r2, [r7, #14]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	32ae      	adds	r2, #174	; 0xae
 8006f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	4798      	blx	r3
 8006f8e:	4603      	mov	r3, r0
 8006f90:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f92:	e004      	b.n	8006f9e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006f94:	2303      	movs	r3, #3
 8006f96:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f98:	e001      	b.n	8006f9e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	88db      	ldrh	r3, [r3, #6]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d110      	bne.n	8006fc8 <USBD_StdItfReq+0xc0>
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10d      	bne.n	8006fc8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fdc7 	bl	8007b40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006fb2:	e009      	b.n	8006fc8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fcf7 	bl	80079aa <USBD_CtlError>
          break;
 8006fbc:	e004      	b.n	8006fc8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fcf2 	bl	80079aa <USBD_CtlError>
          break;
 8006fc6:	e000      	b.n	8006fca <USBD_StdItfReq+0xc2>
          break;
 8006fc8:	bf00      	nop
      }
      break;
 8006fca:	e004      	b.n	8006fd6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fceb 	bl	80079aa <USBD_CtlError>
      break;
 8006fd4:	bf00      	nop
  }

  return ret;
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	889b      	ldrh	r3, [r3, #4]
 8006ff2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ffc:	2b40      	cmp	r3, #64	; 0x40
 8006ffe:	d007      	beq.n	8007010 <USBD_StdEPReq+0x30>
 8007000:	2b40      	cmp	r3, #64	; 0x40
 8007002:	f200 817f 	bhi.w	8007304 <USBD_StdEPReq+0x324>
 8007006:	2b00      	cmp	r3, #0
 8007008:	d02a      	beq.n	8007060 <USBD_StdEPReq+0x80>
 800700a:	2b20      	cmp	r3, #32
 800700c:	f040 817a 	bne.w	8007304 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007010:	7bbb      	ldrb	r3, [r7, #14]
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff fe83 	bl	8006d20 <USBD_CoreFindEP>
 800701a:	4603      	mov	r3, r0
 800701c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800701e:	7b7b      	ldrb	r3, [r7, #13]
 8007020:	2bff      	cmp	r3, #255	; 0xff
 8007022:	f000 8174 	beq.w	800730e <USBD_StdEPReq+0x32e>
 8007026:	7b7b      	ldrb	r3, [r7, #13]
 8007028:	2b00      	cmp	r3, #0
 800702a:	f040 8170 	bne.w	800730e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800702e:	7b7a      	ldrb	r2, [r7, #13]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007036:	7b7a      	ldrb	r2, [r7, #13]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	32ae      	adds	r2, #174	; 0xae
 800703c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 8163 	beq.w	800730e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007048:	7b7a      	ldrb	r2, [r7, #13]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	32ae      	adds	r2, #174	; 0xae
 800704e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	4798      	blx	r3
 800705a:	4603      	mov	r3, r0
 800705c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800705e:	e156      	b.n	800730e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	785b      	ldrb	r3, [r3, #1]
 8007064:	2b03      	cmp	r3, #3
 8007066:	d008      	beq.n	800707a <USBD_StdEPReq+0x9a>
 8007068:	2b03      	cmp	r3, #3
 800706a:	f300 8145 	bgt.w	80072f8 <USBD_StdEPReq+0x318>
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 809b 	beq.w	80071aa <USBD_StdEPReq+0x1ca>
 8007074:	2b01      	cmp	r3, #1
 8007076:	d03c      	beq.n	80070f2 <USBD_StdEPReq+0x112>
 8007078:	e13e      	b.n	80072f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d002      	beq.n	800708c <USBD_StdEPReq+0xac>
 8007086:	2b03      	cmp	r3, #3
 8007088:	d016      	beq.n	80070b8 <USBD_StdEPReq+0xd8>
 800708a:	e02c      	b.n	80070e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800708c:	7bbb      	ldrb	r3, [r7, #14]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00d      	beq.n	80070ae <USBD_StdEPReq+0xce>
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	2b80      	cmp	r3, #128	; 0x80
 8007096:	d00a      	beq.n	80070ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007098:	7bbb      	ldrb	r3, [r7, #14]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 f93d 	bl	800831c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80070a2:	2180      	movs	r1, #128	; 0x80
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 f939 	bl	800831c <USBD_LL_StallEP>
 80070aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070ac:	e020      	b.n	80070f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fc7a 	bl	80079aa <USBD_CtlError>
              break;
 80070b6:	e01b      	b.n	80070f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	885b      	ldrh	r3, [r3, #2]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10e      	bne.n	80070de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80070c0:	7bbb      	ldrb	r3, [r7, #14]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00b      	beq.n	80070de <USBD_StdEPReq+0xfe>
 80070c6:	7bbb      	ldrb	r3, [r7, #14]
 80070c8:	2b80      	cmp	r3, #128	; 0x80
 80070ca:	d008      	beq.n	80070de <USBD_StdEPReq+0xfe>
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	88db      	ldrh	r3, [r3, #6]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d104      	bne.n	80070de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 f91f 	bl	800831c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fd2e 	bl	8007b40 <USBD_CtlSendStatus>

              break;
 80070e4:	e004      	b.n	80070f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fc5e 	bl	80079aa <USBD_CtlError>
              break;
 80070ee:	bf00      	nop
          }
          break;
 80070f0:	e107      	b.n	8007302 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d002      	beq.n	8007104 <USBD_StdEPReq+0x124>
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d016      	beq.n	8007130 <USBD_StdEPReq+0x150>
 8007102:	e04b      	b.n	800719c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007104:	7bbb      	ldrb	r3, [r7, #14]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00d      	beq.n	8007126 <USBD_StdEPReq+0x146>
 800710a:	7bbb      	ldrb	r3, [r7, #14]
 800710c:	2b80      	cmp	r3, #128	; 0x80
 800710e:	d00a      	beq.n	8007126 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	4619      	mov	r1, r3
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 f901 	bl	800831c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800711a:	2180      	movs	r1, #128	; 0x80
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f001 f8fd 	bl	800831c <USBD_LL_StallEP>
 8007122:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007124:	e040      	b.n	80071a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fc3e 	bl	80079aa <USBD_CtlError>
              break;
 800712e:	e03b      	b.n	80071a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	885b      	ldrh	r3, [r3, #2]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d136      	bne.n	80071a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800713e:	2b00      	cmp	r3, #0
 8007140:	d004      	beq.n	800714c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007142:	7bbb      	ldrb	r3, [r7, #14]
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 f907 	bl	800835a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fcf7 	bl	8007b40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007152:	7bbb      	ldrb	r3, [r7, #14]
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff fde2 	bl	8006d20 <USBD_CoreFindEP>
 800715c:	4603      	mov	r3, r0
 800715e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007160:	7b7b      	ldrb	r3, [r7, #13]
 8007162:	2bff      	cmp	r3, #255	; 0xff
 8007164:	d01f      	beq.n	80071a6 <USBD_StdEPReq+0x1c6>
 8007166:	7b7b      	ldrb	r3, [r7, #13]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d11c      	bne.n	80071a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800716c:	7b7a      	ldrb	r2, [r7, #13]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007174:	7b7a      	ldrb	r2, [r7, #13]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	32ae      	adds	r2, #174	; 0xae
 800717a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d010      	beq.n	80071a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007184:	7b7a      	ldrb	r2, [r7, #13]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	32ae      	adds	r2, #174	; 0xae
 800718a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	4798      	blx	r3
 8007196:	4603      	mov	r3, r0
 8007198:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800719a:	e004      	b.n	80071a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fc03 	bl	80079aa <USBD_CtlError>
              break;
 80071a4:	e000      	b.n	80071a8 <USBD_StdEPReq+0x1c8>
              break;
 80071a6:	bf00      	nop
          }
          break;
 80071a8:	e0ab      	b.n	8007302 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d002      	beq.n	80071bc <USBD_StdEPReq+0x1dc>
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d032      	beq.n	8007220 <USBD_StdEPReq+0x240>
 80071ba:	e097      	b.n	80072ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <USBD_StdEPReq+0x1f2>
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	2b80      	cmp	r3, #128	; 0x80
 80071c6:	d004      	beq.n	80071d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 fbed 	bl	80079aa <USBD_CtlError>
                break;
 80071d0:	e091      	b.n	80072f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	da0b      	bge.n	80071f2 <USBD_StdEPReq+0x212>
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	3310      	adds	r3, #16
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	4413      	add	r3, r2
 80071ee:	3304      	adds	r3, #4
 80071f0:	e00b      	b.n	800720a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071f2:	7bbb      	ldrb	r3, [r7, #14]
 80071f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071f8:	4613      	mov	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	4413      	add	r3, r2
 8007208:	3304      	adds	r3, #4
 800720a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	2202      	movs	r2, #2
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fc37 	bl	8007a8c <USBD_CtlSendData>
              break;
 800721e:	e06a      	b.n	80072f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007224:	2b00      	cmp	r3, #0
 8007226:	da11      	bge.n	800724c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	f003 020f 	and.w	r2, r3, #15
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	4613      	mov	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	440b      	add	r3, r1
 800723a:	3324      	adds	r3, #36	; 0x24
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d117      	bne.n	8007272 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fbb0 	bl	80079aa <USBD_CtlError>
                  break;
 800724a:	e054      	b.n	80072f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	f003 020f 	and.w	r2, r3, #15
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	4613      	mov	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	440b      	add	r3, r1
 800725e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d104      	bne.n	8007272 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fb9d 	bl	80079aa <USBD_CtlError>
                  break;
 8007270:	e041      	b.n	80072f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007272:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007276:	2b00      	cmp	r3, #0
 8007278:	da0b      	bge.n	8007292 <USBD_StdEPReq+0x2b2>
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007280:	4613      	mov	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	3310      	adds	r3, #16
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	4413      	add	r3, r2
 800728e:	3304      	adds	r3, #4
 8007290:	e00b      	b.n	80072aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	4413      	add	r3, r2
 80072a8:	3304      	adds	r3, #4
 80072aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <USBD_StdEPReq+0x2d8>
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	2b80      	cmp	r3, #128	; 0x80
 80072b6:	d103      	bne.n	80072c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	e00e      	b.n	80072de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 f867 	bl	8008398 <USBD_LL_IsStallEP>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d003      	beq.n	80072d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2201      	movs	r2, #1
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	e002      	b.n	80072de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	2202      	movs	r2, #2
 80072e2:	4619      	mov	r1, r3
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fbd1 	bl	8007a8c <USBD_CtlSendData>
              break;
 80072ea:	e004      	b.n	80072f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fb5b 	bl	80079aa <USBD_CtlError>
              break;
 80072f4:	bf00      	nop
          }
          break;
 80072f6:	e004      	b.n	8007302 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fb55 	bl	80079aa <USBD_CtlError>
          break;
 8007300:	bf00      	nop
      }
      break;
 8007302:	e005      	b.n	8007310 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fb4f 	bl	80079aa <USBD_CtlError>
      break;
 800730c:	e000      	b.n	8007310 <USBD_StdEPReq+0x330>
      break;
 800730e:	bf00      	nop
  }

  return ret;
 8007310:	7bfb      	ldrb	r3, [r7, #15]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	885b      	ldrh	r3, [r3, #2]
 8007336:	0a1b      	lsrs	r3, r3, #8
 8007338:	b29b      	uxth	r3, r3
 800733a:	3b01      	subs	r3, #1
 800733c:	2b06      	cmp	r3, #6
 800733e:	f200 8128 	bhi.w	8007592 <USBD_GetDescriptor+0x276>
 8007342:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <USBD_GetDescriptor+0x2c>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	08007365 	.word	0x08007365
 800734c:	0800737d 	.word	0x0800737d
 8007350:	080073bd 	.word	0x080073bd
 8007354:	08007593 	.word	0x08007593
 8007358:	08007593 	.word	0x08007593
 800735c:	08007533 	.word	0x08007533
 8007360:	0800755f 	.word	0x0800755f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	7c12      	ldrb	r2, [r2, #16]
 8007370:	f107 0108 	add.w	r1, r7, #8
 8007374:	4610      	mov	r0, r2
 8007376:	4798      	blx	r3
 8007378:	60f8      	str	r0, [r7, #12]
      break;
 800737a:	e112      	b.n	80075a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	7c1b      	ldrb	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10d      	bne.n	80073a0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800738a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738c:	f107 0208 	add.w	r2, r7, #8
 8007390:	4610      	mov	r0, r2
 8007392:	4798      	blx	r3
 8007394:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3301      	adds	r3, #1
 800739a:	2202      	movs	r2, #2
 800739c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800739e:	e100      	b.n	80075a2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	f107 0208 	add.w	r2, r7, #8
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
 80073b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3301      	adds	r3, #1
 80073b6:	2202      	movs	r2, #2
 80073b8:	701a      	strb	r2, [r3, #0]
      break;
 80073ba:	e0f2      	b.n	80075a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	885b      	ldrh	r3, [r3, #2]
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b05      	cmp	r3, #5
 80073c4:	f200 80ac 	bhi.w	8007520 <USBD_GetDescriptor+0x204>
 80073c8:	a201      	add	r2, pc, #4	; (adr r2, 80073d0 <USBD_GetDescriptor+0xb4>)
 80073ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ce:	bf00      	nop
 80073d0:	080073e9 	.word	0x080073e9
 80073d4:	0800741d 	.word	0x0800741d
 80073d8:	08007451 	.word	0x08007451
 80073dc:	08007485 	.word	0x08007485
 80073e0:	080074b9 	.word	0x080074b9
 80073e4:	080074ed 	.word	0x080074ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	7c12      	ldrb	r2, [r2, #16]
 8007400:	f107 0108 	add.w	r1, r7, #8
 8007404:	4610      	mov	r0, r2
 8007406:	4798      	blx	r3
 8007408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800740a:	e091      	b.n	8007530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 facb 	bl	80079aa <USBD_CtlError>
            err++;
 8007414:	7afb      	ldrb	r3, [r7, #11]
 8007416:	3301      	adds	r3, #1
 8007418:	72fb      	strb	r3, [r7, #11]
          break;
 800741a:	e089      	b.n	8007530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00b      	beq.n	8007440 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	7c12      	ldrb	r2, [r2, #16]
 8007434:	f107 0108 	add.w	r1, r7, #8
 8007438:	4610      	mov	r0, r2
 800743a:	4798      	blx	r3
 800743c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800743e:	e077      	b.n	8007530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fab1 	bl	80079aa <USBD_CtlError>
            err++;
 8007448:	7afb      	ldrb	r3, [r7, #11]
 800744a:	3301      	adds	r3, #1
 800744c:	72fb      	strb	r3, [r7, #11]
          break;
 800744e:	e06f      	b.n	8007530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00b      	beq.n	8007474 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	7c12      	ldrb	r2, [r2, #16]
 8007468:	f107 0108 	add.w	r1, r7, #8
 800746c:	4610      	mov	r0, r2
 800746e:	4798      	blx	r3
 8007470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007472:	e05d      	b.n	8007530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fa97 	bl	80079aa <USBD_CtlError>
            err++;
 800747c:	7afb      	ldrb	r3, [r7, #11]
 800747e:	3301      	adds	r3, #1
 8007480:	72fb      	strb	r3, [r7, #11]
          break;
 8007482:	e055      	b.n	8007530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00b      	beq.n	80074a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	7c12      	ldrb	r2, [r2, #16]
 800749c:	f107 0108 	add.w	r1, r7, #8
 80074a0:	4610      	mov	r0, r2
 80074a2:	4798      	blx	r3
 80074a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074a6:	e043      	b.n	8007530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fa7d 	bl	80079aa <USBD_CtlError>
            err++;
 80074b0:	7afb      	ldrb	r3, [r7, #11]
 80074b2:	3301      	adds	r3, #1
 80074b4:	72fb      	strb	r3, [r7, #11]
          break;
 80074b6:	e03b      	b.n	8007530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00b      	beq.n	80074dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	7c12      	ldrb	r2, [r2, #16]
 80074d0:	f107 0108 	add.w	r1, r7, #8
 80074d4:	4610      	mov	r0, r2
 80074d6:	4798      	blx	r3
 80074d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074da:	e029      	b.n	8007530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fa63 	bl	80079aa <USBD_CtlError>
            err++;
 80074e4:	7afb      	ldrb	r3, [r7, #11]
 80074e6:	3301      	adds	r3, #1
 80074e8:	72fb      	strb	r3, [r7, #11]
          break;
 80074ea:	e021      	b.n	8007530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00b      	beq.n	8007510 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	7c12      	ldrb	r2, [r2, #16]
 8007504:	f107 0108 	add.w	r1, r7, #8
 8007508:	4610      	mov	r0, r2
 800750a:	4798      	blx	r3
 800750c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800750e:	e00f      	b.n	8007530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007510:	6839      	ldr	r1, [r7, #0]
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa49 	bl	80079aa <USBD_CtlError>
            err++;
 8007518:	7afb      	ldrb	r3, [r7, #11]
 800751a:	3301      	adds	r3, #1
 800751c:	72fb      	strb	r3, [r7, #11]
          break;
 800751e:	e007      	b.n	8007530 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fa41 	bl	80079aa <USBD_CtlError>
          err++;
 8007528:	7afb      	ldrb	r3, [r7, #11]
 800752a:	3301      	adds	r3, #1
 800752c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800752e:	bf00      	nop
      }
      break;
 8007530:	e037      	b.n	80075a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	7c1b      	ldrb	r3, [r3, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d109      	bne.n	800754e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007542:	f107 0208 	add.w	r2, r7, #8
 8007546:	4610      	mov	r0, r2
 8007548:	4798      	blx	r3
 800754a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800754c:	e029      	b.n	80075a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fa2a 	bl	80079aa <USBD_CtlError>
        err++;
 8007556:	7afb      	ldrb	r3, [r7, #11]
 8007558:	3301      	adds	r3, #1
 800755a:	72fb      	strb	r3, [r7, #11]
      break;
 800755c:	e021      	b.n	80075a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	7c1b      	ldrb	r3, [r3, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10d      	bne.n	8007582 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	f107 0208 	add.w	r2, r7, #8
 8007572:	4610      	mov	r0, r2
 8007574:	4798      	blx	r3
 8007576:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	3301      	adds	r3, #1
 800757c:	2207      	movs	r2, #7
 800757e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007580:	e00f      	b.n	80075a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fa10 	bl	80079aa <USBD_CtlError>
        err++;
 800758a:	7afb      	ldrb	r3, [r7, #11]
 800758c:	3301      	adds	r3, #1
 800758e:	72fb      	strb	r3, [r7, #11]
      break;
 8007590:	e007      	b.n	80075a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fa08 	bl	80079aa <USBD_CtlError>
      err++;
 800759a:	7afb      	ldrb	r3, [r7, #11]
 800759c:	3301      	adds	r3, #1
 800759e:	72fb      	strb	r3, [r7, #11]
      break;
 80075a0:	bf00      	nop
  }

  if (err != 0U)
 80075a2:	7afb      	ldrb	r3, [r7, #11]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d11e      	bne.n	80075e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	88db      	ldrh	r3, [r3, #6]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d016      	beq.n	80075de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80075b0:	893b      	ldrh	r3, [r7, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00e      	beq.n	80075d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	88da      	ldrh	r2, [r3, #6]
 80075ba:	893b      	ldrh	r3, [r7, #8]
 80075bc:	4293      	cmp	r3, r2
 80075be:	bf28      	it	cs
 80075c0:	4613      	movcs	r3, r2
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075c6:	893b      	ldrh	r3, [r7, #8]
 80075c8:	461a      	mov	r2, r3
 80075ca:	68f9      	ldr	r1, [r7, #12]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fa5d 	bl	8007a8c <USBD_CtlSendData>
 80075d2:	e009      	b.n	80075e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f9e7 	bl	80079aa <USBD_CtlError>
 80075dc:	e004      	b.n	80075e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 faae 	bl	8007b40 <USBD_CtlSendStatus>
 80075e4:	e000      	b.n	80075e8 <USBD_GetDescriptor+0x2cc>
    return;
 80075e6:	bf00      	nop
  }
}
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop

080075f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	889b      	ldrh	r3, [r3, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d131      	bne.n	8007666 <USBD_SetAddress+0x76>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	88db      	ldrh	r3, [r3, #6]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d12d      	bne.n	8007666 <USBD_SetAddress+0x76>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	885b      	ldrh	r3, [r3, #2]
 800760e:	2b7f      	cmp	r3, #127	; 0x7f
 8007610:	d829      	bhi.n	8007666 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	885b      	ldrh	r3, [r3, #2]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800761c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b03      	cmp	r3, #3
 8007628:	d104      	bne.n	8007634 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 f9bc 	bl	80079aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007632:	e01d      	b.n	8007670 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	7bfa      	ldrb	r2, [r7, #15]
 8007638:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fed5 	bl	80083f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fa7a 	bl	8007b40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d004      	beq.n	800765c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2202      	movs	r2, #2
 8007656:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800765a:	e009      	b.n	8007670 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007664:	e004      	b.n	8007670 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f99e 	bl	80079aa <USBD_CtlError>
  }
}
 800766e:	bf00      	nop
 8007670:	bf00      	nop
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	885b      	ldrh	r3, [r3, #2]
 800768a:	b2da      	uxtb	r2, r3
 800768c:	4b4e      	ldr	r3, [pc, #312]	; (80077c8 <USBD_SetConfig+0x150>)
 800768e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007690:	4b4d      	ldr	r3, [pc, #308]	; (80077c8 <USBD_SetConfig+0x150>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d905      	bls.n	80076a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f985 	bl	80079aa <USBD_CtlError>
    return USBD_FAIL;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e08c      	b.n	80077be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d002      	beq.n	80076b6 <USBD_SetConfig+0x3e>
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d029      	beq.n	8007708 <USBD_SetConfig+0x90>
 80076b4:	e075      	b.n	80077a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80076b6:	4b44      	ldr	r3, [pc, #272]	; (80077c8 <USBD_SetConfig+0x150>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d020      	beq.n	8007700 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80076be:	4b42      	ldr	r3, [pc, #264]	; (80077c8 <USBD_SetConfig+0x150>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80076c8:	4b3f      	ldr	r3, [pc, #252]	; (80077c8 <USBD_SetConfig+0x150>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	4619      	mov	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7fe ffe7 	bl	80066a2 <USBD_SetClassConfig>
 80076d4:	4603      	mov	r3, r0
 80076d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80076d8:	7bfb      	ldrb	r3, [r7, #15]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d008      	beq.n	80076f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f962 	bl	80079aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2202      	movs	r2, #2
 80076ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80076ee:	e065      	b.n	80077bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fa25 	bl	8007b40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2203      	movs	r2, #3
 80076fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80076fe:	e05d      	b.n	80077bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fa1d 	bl	8007b40 <USBD_CtlSendStatus>
      break;
 8007706:	e059      	b.n	80077bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007708:	4b2f      	ldr	r3, [pc, #188]	; (80077c8 <USBD_SetConfig+0x150>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d112      	bne.n	8007736 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007718:	4b2b      	ldr	r3, [pc, #172]	; (80077c8 <USBD_SetConfig+0x150>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	461a      	mov	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007722:	4b29      	ldr	r3, [pc, #164]	; (80077c8 <USBD_SetConfig+0x150>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7fe ffd6 	bl	80066da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 fa06 	bl	8007b40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007734:	e042      	b.n	80077bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007736:	4b24      	ldr	r3, [pc, #144]	; (80077c8 <USBD_SetConfig+0x150>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	429a      	cmp	r2, r3
 8007742:	d02a      	beq.n	800779a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7fe ffc4 	bl	80066da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007752:	4b1d      	ldr	r3, [pc, #116]	; (80077c8 <USBD_SetConfig+0x150>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800775c:	4b1a      	ldr	r3, [pc, #104]	; (80077c8 <USBD_SetConfig+0x150>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7fe ff9d 	bl	80066a2 <USBD_SetClassConfig>
 8007768:	4603      	mov	r3, r0
 800776a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00f      	beq.n	8007792 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f918 	bl	80079aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7fe ffa9 	bl	80066da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007790:	e014      	b.n	80077bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f9d4 	bl	8007b40 <USBD_CtlSendStatus>
      break;
 8007798:	e010      	b.n	80077bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f9d0 	bl	8007b40 <USBD_CtlSendStatus>
      break;
 80077a0:	e00c      	b.n	80077bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f900 	bl	80079aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077aa:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <USBD_SetConfig+0x150>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7fe ff92 	bl	80066da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80077b6:	2303      	movs	r3, #3
 80077b8:	73fb      	strb	r3, [r7, #15]
      break;
 80077ba:	bf00      	nop
  }

  return ret;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	200001b8 	.word	0x200001b8

080077cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	88db      	ldrh	r3, [r3, #6]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d004      	beq.n	80077e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f8e2 	bl	80079aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80077e6:	e023      	b.n	8007830 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	dc02      	bgt.n	80077fa <USBD_GetConfig+0x2e>
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	dc03      	bgt.n	8007800 <USBD_GetConfig+0x34>
 80077f8:	e015      	b.n	8007826 <USBD_GetConfig+0x5a>
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d00b      	beq.n	8007816 <USBD_GetConfig+0x4a>
 80077fe:	e012      	b.n	8007826 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3308      	adds	r3, #8
 800780a:	2201      	movs	r2, #1
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f93c 	bl	8007a8c <USBD_CtlSendData>
        break;
 8007814:	e00c      	b.n	8007830 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3304      	adds	r3, #4
 800781a:	2201      	movs	r2, #1
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f934 	bl	8007a8c <USBD_CtlSendData>
        break;
 8007824:	e004      	b.n	8007830 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f8be 	bl	80079aa <USBD_CtlError>
        break;
 800782e:	bf00      	nop
}
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007848:	b2db      	uxtb	r3, r3
 800784a:	3b01      	subs	r3, #1
 800784c:	2b02      	cmp	r3, #2
 800784e:	d81e      	bhi.n	800788e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	88db      	ldrh	r3, [r3, #6]
 8007854:	2b02      	cmp	r3, #2
 8007856:	d004      	beq.n	8007862 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f8a5 	bl	80079aa <USBD_CtlError>
        break;
 8007860:	e01a      	b.n	8007898 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800786e:	2b00      	cmp	r3, #0
 8007870:	d005      	beq.n	800787e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	f043 0202 	orr.w	r2, r3, #2
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	330c      	adds	r3, #12
 8007882:	2202      	movs	r2, #2
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f900 	bl	8007a8c <USBD_CtlSendData>
      break;
 800788c:	e004      	b.n	8007898 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f88a 	bl	80079aa <USBD_CtlError>
      break;
 8007896:	bf00      	nop
  }
}
 8007898:	bf00      	nop
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	885b      	ldrh	r3, [r3, #2]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d107      	bne.n	80078c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f940 	bl	8007b40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80078c0:	e013      	b.n	80078ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	885b      	ldrh	r3, [r3, #2]
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d10b      	bne.n	80078e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	889b      	ldrh	r3, [r3, #4]
 80078ce:	0a1b      	lsrs	r3, r3, #8
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f930 	bl	8007b40 <USBD_CtlSendStatus>
}
 80078e0:	e003      	b.n	80078ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f860 	bl	80079aa <USBD_CtlError>
}
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b082      	sub	sp, #8
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007902:	b2db      	uxtb	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	2b02      	cmp	r3, #2
 8007908:	d80b      	bhi.n	8007922 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	885b      	ldrh	r3, [r3, #2]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d10c      	bne.n	800792c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f910 	bl	8007b40 <USBD_CtlSendStatus>
      }
      break;
 8007920:	e004      	b.n	800792c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f840 	bl	80079aa <USBD_CtlError>
      break;
 800792a:	e000      	b.n	800792e <USBD_ClrFeature+0x3c>
      break;
 800792c:	bf00      	nop
  }
}
 800792e:	bf00      	nop
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	781a      	ldrb	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	3301      	adds	r3, #1
 8007950:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	781a      	ldrb	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3301      	adds	r3, #1
 800795e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f7ff fa41 	bl	8006de8 <SWAPBYTE>
 8007966:	4603      	mov	r3, r0
 8007968:	461a      	mov	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3301      	adds	r3, #1
 8007972:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	3301      	adds	r3, #1
 8007978:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f7ff fa34 	bl	8006de8 <SWAPBYTE>
 8007980:	4603      	mov	r3, r0
 8007982:	461a      	mov	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3301      	adds	r3, #1
 800798c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3301      	adds	r3, #1
 8007992:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f7ff fa27 	bl	8006de8 <SWAPBYTE>
 800799a:	4603      	mov	r3, r0
 800799c:	461a      	mov	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	80da      	strh	r2, [r3, #6]
}
 80079a2:	bf00      	nop
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b082      	sub	sp, #8
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80079b4:	2180      	movs	r1, #128	; 0x80
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fcb0 	bl	800831c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80079bc:	2100      	movs	r1, #0
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fcac 	bl	800831c <USBD_LL_StallEP>
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079d8:	2300      	movs	r3, #0
 80079da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d036      	beq.n	8007a50 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80079e6:	6938      	ldr	r0, [r7, #16]
 80079e8:	f000 f836 	bl	8007a58 <USBD_GetLen>
 80079ec:	4603      	mov	r3, r0
 80079ee:	3301      	adds	r3, #1
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	4413      	add	r3, r2
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	7812      	ldrb	r2, [r2, #0]
 8007a04:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a0c:	7dfb      	ldrb	r3, [r7, #23]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	4413      	add	r3, r2
 8007a12:	2203      	movs	r2, #3
 8007a14:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a1c:	e013      	b.n	8007a46 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	4413      	add	r3, r2
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	7812      	ldrb	r2, [r2, #0]
 8007a28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	613b      	str	r3, [r7, #16]
    idx++;
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	3301      	adds	r3, #1
 8007a34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	3301      	adds	r3, #1
 8007a44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e7      	bne.n	8007a1e <USBD_GetString+0x52>
 8007a4e:	e000      	b.n	8007a52 <USBD_GetString+0x86>
    return;
 8007a50:	bf00      	nop
  }
}
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a68:	e005      	b.n	8007a76 <USBD_GetLen+0x1e>
  {
    len++;
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	3301      	adds	r3, #1
 8007a74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1f5      	bne.n	8007a6a <USBD_GetLen+0x12>
  }

  return len;
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 fcbb 	bl	800842e <USBD_LL_Transmit>

  return USBD_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	60f8      	str	r0, [r7, #12]
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 fcaa 	bl	800842e <USBD_LL_Transmit>

  return USBD_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2203      	movs	r2, #3
 8007af4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 fcae 	bl	8008470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
 8007b26:	60b9      	str	r1, [r7, #8]
 8007b28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	2100      	movs	r1, #0
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 fc9d 	bl	8008470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2204      	movs	r2, #4
 8007b4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b50:	2300      	movs	r3, #0
 8007b52:	2200      	movs	r2, #0
 8007b54:	2100      	movs	r1, #0
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fc69 	bl	800842e <USBD_LL_Transmit>

  return USBD_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b082      	sub	sp, #8
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2205      	movs	r2, #5
 8007b72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b76:	2300      	movs	r3, #0
 8007b78:	2200      	movs	r2, #0
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fc77 	bl	8008470 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b90:	2200      	movs	r2, #0
 8007b92:	4912      	ldr	r1, [pc, #72]	; (8007bdc <MX_USB_DEVICE_Init+0x50>)
 8007b94:	4812      	ldr	r0, [pc, #72]	; (8007be0 <MX_USB_DEVICE_Init+0x54>)
 8007b96:	f7fe fd07 	bl	80065a8 <USBD_Init>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ba0:	f7f8 fef4 	bl	800098c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007ba4:	490f      	ldr	r1, [pc, #60]	; (8007be4 <MX_USB_DEVICE_Init+0x58>)
 8007ba6:	480e      	ldr	r0, [pc, #56]	; (8007be0 <MX_USB_DEVICE_Init+0x54>)
 8007ba8:	f7fe fd2e 	bl	8006608 <USBD_RegisterClass>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d001      	beq.n	8007bb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007bb2:	f7f8 feeb 	bl	800098c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007bb6:	490c      	ldr	r1, [pc, #48]	; (8007be8 <MX_USB_DEVICE_Init+0x5c>)
 8007bb8:	4809      	ldr	r0, [pc, #36]	; (8007be0 <MX_USB_DEVICE_Init+0x54>)
 8007bba:	f7fe fc65 	bl	8006488 <USBD_CDC_RegisterInterface>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007bc4:	f7f8 fee2 	bl	800098c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007bc8:	4805      	ldr	r0, [pc, #20]	; (8007be0 <MX_USB_DEVICE_Init+0x54>)
 8007bca:	f7fe fd53 	bl	8006674 <USBD_Start>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007bd4:	f7f8 feda 	bl	800098c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007bd8:	bf00      	nop
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	200000ac 	.word	0x200000ac
 8007be0:	200001bc 	.word	0x200001bc
 8007be4:	20000018 	.word	0x20000018
 8007be8:	20000098 	.word	0x20000098

08007bec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4905      	ldr	r1, [pc, #20]	; (8007c08 <CDC_Init_FS+0x1c>)
 8007bf4:	4805      	ldr	r0, [pc, #20]	; (8007c0c <CDC_Init_FS+0x20>)
 8007bf6:	f7fe fc61 	bl	80064bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007bfa:	4905      	ldr	r1, [pc, #20]	; (8007c10 <CDC_Init_FS+0x24>)
 8007bfc:	4803      	ldr	r0, [pc, #12]	; (8007c0c <CDC_Init_FS+0x20>)
 8007bfe:	f7fe fc7f 	bl	8006500 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007c02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	20000898 	.word	0x20000898
 8007c0c:	200001bc 	.word	0x200001bc
 8007c10:	20000498 	.word	0x20000498

08007c14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007c14:	b480      	push	{r7}
 8007c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007c18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	6039      	str	r1, [r7, #0]
 8007c2e:	71fb      	strb	r3, [r7, #7]
 8007c30:	4613      	mov	r3, r2
 8007c32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007c34:	79fb      	ldrb	r3, [r7, #7]
 8007c36:	2b23      	cmp	r3, #35	; 0x23
 8007c38:	d84a      	bhi.n	8007cd0 <CDC_Control_FS+0xac>
 8007c3a:	a201      	add	r2, pc, #4	; (adr r2, 8007c40 <CDC_Control_FS+0x1c>)
 8007c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c40:	08007cd1 	.word	0x08007cd1
 8007c44:	08007cd1 	.word	0x08007cd1
 8007c48:	08007cd1 	.word	0x08007cd1
 8007c4c:	08007cd1 	.word	0x08007cd1
 8007c50:	08007cd1 	.word	0x08007cd1
 8007c54:	08007cd1 	.word	0x08007cd1
 8007c58:	08007cd1 	.word	0x08007cd1
 8007c5c:	08007cd1 	.word	0x08007cd1
 8007c60:	08007cd1 	.word	0x08007cd1
 8007c64:	08007cd1 	.word	0x08007cd1
 8007c68:	08007cd1 	.word	0x08007cd1
 8007c6c:	08007cd1 	.word	0x08007cd1
 8007c70:	08007cd1 	.word	0x08007cd1
 8007c74:	08007cd1 	.word	0x08007cd1
 8007c78:	08007cd1 	.word	0x08007cd1
 8007c7c:	08007cd1 	.word	0x08007cd1
 8007c80:	08007cd1 	.word	0x08007cd1
 8007c84:	08007cd1 	.word	0x08007cd1
 8007c88:	08007cd1 	.word	0x08007cd1
 8007c8c:	08007cd1 	.word	0x08007cd1
 8007c90:	08007cd1 	.word	0x08007cd1
 8007c94:	08007cd1 	.word	0x08007cd1
 8007c98:	08007cd1 	.word	0x08007cd1
 8007c9c:	08007cd1 	.word	0x08007cd1
 8007ca0:	08007cd1 	.word	0x08007cd1
 8007ca4:	08007cd1 	.word	0x08007cd1
 8007ca8:	08007cd1 	.word	0x08007cd1
 8007cac:	08007cd1 	.word	0x08007cd1
 8007cb0:	08007cd1 	.word	0x08007cd1
 8007cb4:	08007cd1 	.word	0x08007cd1
 8007cb8:	08007cd1 	.word	0x08007cd1
 8007cbc:	08007cd1 	.word	0x08007cd1
 8007cc0:	08007cd1 	.word	0x08007cd1
 8007cc4:	08007cd1 	.word	0x08007cd1
 8007cc8:	08007cd1 	.word	0x08007cd1
 8007ccc:	08007cd1 	.word	0x08007cd1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007cd0:	bf00      	nop
  }

  return (USBD_OK);
 8007cd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	4805      	ldr	r0, [pc, #20]	; (8007d04 <CDC_Receive_FS+0x24>)
 8007cee:	f7fe fc07 	bl	8006500 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007cf2:	4804      	ldr	r0, [pc, #16]	; (8007d04 <CDC_Receive_FS+0x24>)
 8007cf4:	f7fe fc22 	bl	800653c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007cf8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	200001bc 	.word	0x200001bc

08007d08 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	4613      	mov	r3, r2
 8007d14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
	...

08007d2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4603      	mov	r3, r0
 8007d34:	6039      	str	r1, [r7, #0]
 8007d36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2212      	movs	r2, #18
 8007d3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d3e:	4b03      	ldr	r3, [pc, #12]	; (8007d4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	200000c8 	.word	0x200000c8

08007d50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	6039      	str	r1, [r7, #0]
 8007d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	2204      	movs	r2, #4
 8007d60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d62:	4b03      	ldr	r3, [pc, #12]	; (8007d70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr
 8007d70:	200000dc 	.word	0x200000dc

08007d74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	6039      	str	r1, [r7, #0]
 8007d7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d80:	79fb      	ldrb	r3, [r7, #7]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d105      	bne.n	8007d92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	4907      	ldr	r1, [pc, #28]	; (8007da8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d8a:	4808      	ldr	r0, [pc, #32]	; (8007dac <USBD_FS_ProductStrDescriptor+0x38>)
 8007d8c:	f7ff fe1e 	bl	80079cc <USBD_GetString>
 8007d90:	e004      	b.n	8007d9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	4904      	ldr	r1, [pc, #16]	; (8007da8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d96:	4805      	ldr	r0, [pc, #20]	; (8007dac <USBD_FS_ProductStrDescriptor+0x38>)
 8007d98:	f7ff fe18 	bl	80079cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d9c:	4b02      	ldr	r3, [pc, #8]	; (8007da8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20000c98 	.word	0x20000c98
 8007dac:	080085d0 	.word	0x080085d0

08007db0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	6039      	str	r1, [r7, #0]
 8007dba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	4904      	ldr	r1, [pc, #16]	; (8007dd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007dc0:	4804      	ldr	r0, [pc, #16]	; (8007dd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007dc2:	f7ff fe03 	bl	80079cc <USBD_GetString>
  return USBD_StrDesc;
 8007dc6:	4b02      	ldr	r3, [pc, #8]	; (8007dd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20000c98 	.word	0x20000c98
 8007dd4:	080085e8 	.word	0x080085e8

08007dd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	6039      	str	r1, [r7, #0]
 8007de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	221a      	movs	r2, #26
 8007de8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007dea:	f000 f843 	bl	8007e74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007dee:	4b02      	ldr	r3, [pc, #8]	; (8007df8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	200000e0 	.word	0x200000e0

08007dfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	6039      	str	r1, [r7, #0]
 8007e06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e08:	79fb      	ldrb	r3, [r7, #7]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d105      	bne.n	8007e1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	4907      	ldr	r1, [pc, #28]	; (8007e30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e12:	4808      	ldr	r0, [pc, #32]	; (8007e34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e14:	f7ff fdda 	bl	80079cc <USBD_GetString>
 8007e18:	e004      	b.n	8007e24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	4904      	ldr	r1, [pc, #16]	; (8007e30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e1e:	4805      	ldr	r0, [pc, #20]	; (8007e34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e20:	f7ff fdd4 	bl	80079cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e24:	4b02      	ldr	r3, [pc, #8]	; (8007e30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000c98 	.word	0x20000c98
 8007e34:	080085fc 	.word	0x080085fc

08007e38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	4603      	mov	r3, r0
 8007e40:	6039      	str	r1, [r7, #0]
 8007e42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e44:	79fb      	ldrb	r3, [r7, #7]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d105      	bne.n	8007e56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	4907      	ldr	r1, [pc, #28]	; (8007e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e4e:	4808      	ldr	r0, [pc, #32]	; (8007e70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e50:	f7ff fdbc 	bl	80079cc <USBD_GetString>
 8007e54:	e004      	b.n	8007e60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	4904      	ldr	r1, [pc, #16]	; (8007e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e5a:	4805      	ldr	r0, [pc, #20]	; (8007e70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e5c:	f7ff fdb6 	bl	80079cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e60:	4b02      	ldr	r3, [pc, #8]	; (8007e6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000c98 	.word	0x20000c98
 8007e70:	08008608 	.word	0x08008608

08007e74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e7a:	4b0f      	ldr	r3, [pc, #60]	; (8007eb8 <Get_SerialNum+0x44>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e80:	4b0e      	ldr	r3, [pc, #56]	; (8007ebc <Get_SerialNum+0x48>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e86:	4b0e      	ldr	r3, [pc, #56]	; (8007ec0 <Get_SerialNum+0x4c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4413      	add	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e9a:	2208      	movs	r2, #8
 8007e9c:	4909      	ldr	r1, [pc, #36]	; (8007ec4 <Get_SerialNum+0x50>)
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f000 f814 	bl	8007ecc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ea4:	2204      	movs	r2, #4
 8007ea6:	4908      	ldr	r1, [pc, #32]	; (8007ec8 <Get_SerialNum+0x54>)
 8007ea8:	68b8      	ldr	r0, [r7, #8]
 8007eaa:	f000 f80f 	bl	8007ecc <IntToUnicode>
  }
}
 8007eae:	bf00      	nop
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	1fff7a10 	.word	0x1fff7a10
 8007ebc:	1fff7a14 	.word	0x1fff7a14
 8007ec0:	1fff7a18 	.word	0x1fff7a18
 8007ec4:	200000e2 	.word	0x200000e2
 8007ec8:	200000f2 	.word	0x200000f2

08007ecc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ede:	2300      	movs	r3, #0
 8007ee0:	75fb      	strb	r3, [r7, #23]
 8007ee2:	e027      	b.n	8007f34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	0f1b      	lsrs	r3, r3, #28
 8007ee8:	2b09      	cmp	r3, #9
 8007eea:	d80b      	bhi.n	8007f04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	0f1b      	lsrs	r3, r3, #28
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	440b      	add	r3, r1
 8007efc:	3230      	adds	r2, #48	; 0x30
 8007efe:	b2d2      	uxtb	r2, r2
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	e00a      	b.n	8007f1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	0f1b      	lsrs	r3, r3, #28
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	005b      	lsls	r3, r3, #1
 8007f0e:	4619      	mov	r1, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	440b      	add	r3, r1
 8007f14:	3237      	adds	r2, #55	; 0x37
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	011b      	lsls	r3, r3, #4
 8007f1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	005b      	lsls	r3, r3, #1
 8007f24:	3301      	adds	r3, #1
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	4413      	add	r3, r2
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	3301      	adds	r3, #1
 8007f32:	75fb      	strb	r3, [r7, #23]
 8007f34:	7dfa      	ldrb	r2, [r7, #23]
 8007f36:	79fb      	ldrb	r3, [r7, #7]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d3d3      	bcc.n	8007ee4 <IntToUnicode+0x18>
  }
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
	...

08007f4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08a      	sub	sp, #40	; 0x28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f54:	f107 0314 	add.w	r3, r7, #20
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	605a      	str	r2, [r3, #4]
 8007f5e:	609a      	str	r2, [r3, #8]
 8007f60:	60da      	str	r2, [r3, #12]
 8007f62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f6c:	d13a      	bne.n	8007fe4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f6e:	2300      	movs	r3, #0
 8007f70:	613b      	str	r3, [r7, #16]
 8007f72:	4b1e      	ldr	r3, [pc, #120]	; (8007fec <HAL_PCD_MspInit+0xa0>)
 8007f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f76:	4a1d      	ldr	r2, [pc, #116]	; (8007fec <HAL_PCD_MspInit+0xa0>)
 8007f78:	f043 0301 	orr.w	r3, r3, #1
 8007f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8007f7e:	4b1b      	ldr	r3, [pc, #108]	; (8007fec <HAL_PCD_MspInit+0xa0>)
 8007f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007f8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f90:	2302      	movs	r3, #2
 8007f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f94:	2300      	movs	r3, #0
 8007f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f9c:	230a      	movs	r3, #10
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fa0:	f107 0314 	add.w	r3, r7, #20
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4812      	ldr	r0, [pc, #72]	; (8007ff0 <HAL_PCD_MspInit+0xa4>)
 8007fa8:	f7f8 ffd6 	bl	8000f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007fac:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <HAL_PCD_MspInit+0xa0>)
 8007fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fb0:	4a0e      	ldr	r2, [pc, #56]	; (8007fec <HAL_PCD_MspInit+0xa0>)
 8007fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb6:	6353      	str	r3, [r2, #52]	; 0x34
 8007fb8:	2300      	movs	r3, #0
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <HAL_PCD_MspInit+0xa0>)
 8007fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc0:	4a0a      	ldr	r2, [pc, #40]	; (8007fec <HAL_PCD_MspInit+0xa0>)
 8007fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fc6:	6453      	str	r3, [r2, #68]	; 0x44
 8007fc8:	4b08      	ldr	r3, [pc, #32]	; (8007fec <HAL_PCD_MspInit+0xa0>)
 8007fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fd0:	60fb      	str	r3, [r7, #12]
 8007fd2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	2043      	movs	r0, #67	; 0x43
 8007fda:	f7f8 ff86 	bl	8000eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007fde:	2043      	movs	r0, #67	; 0x43
 8007fe0:	f7f8 ff9f 	bl	8000f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007fe4:	bf00      	nop
 8007fe6:	3728      	adds	r7, #40	; 0x28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	40023800 	.word	0x40023800
 8007ff0:	40020000 	.word	0x40020000

08007ff4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008008:	4619      	mov	r1, r3
 800800a:	4610      	mov	r0, r2
 800800c:	f7fe fb7f 	bl	800670e <USBD_LL_SetupStage>
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	460b      	mov	r3, r1
 8008022:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800802a:	78fa      	ldrb	r2, [r7, #3]
 800802c:	6879      	ldr	r1, [r7, #4]
 800802e:	4613      	mov	r3, r2
 8008030:	00db      	lsls	r3, r3, #3
 8008032:	4413      	add	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	440b      	add	r3, r1
 8008038:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	78fb      	ldrb	r3, [r7, #3]
 8008040:	4619      	mov	r1, r3
 8008042:	f7fe fbb9 	bl	80067b8 <USBD_LL_DataOutStage>
}
 8008046:	bf00      	nop
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	460b      	mov	r3, r1
 8008058:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008060:	78fa      	ldrb	r2, [r7, #3]
 8008062:	6879      	ldr	r1, [r7, #4]
 8008064:	4613      	mov	r3, r2
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	4413      	add	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	440b      	add	r3, r1
 800806e:	334c      	adds	r3, #76	; 0x4c
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	78fb      	ldrb	r3, [r7, #3]
 8008074:	4619      	mov	r1, r3
 8008076:	f7fe fc52 	bl	800691e <USBD_LL_DataInStage>
}
 800807a:	bf00      	nop
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b082      	sub	sp, #8
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008090:	4618      	mov	r0, r3
 8008092:	f7fe fd86 	bl	8006ba2 <USBD_LL_SOF>
}
 8008096:	bf00      	nop
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80080a6:	2301      	movs	r3, #1
 80080a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d001      	beq.n	80080b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80080b2:	f7f8 fc6b 	bl	800098c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080bc:	7bfa      	ldrb	r2, [r7, #15]
 80080be:	4611      	mov	r1, r2
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fe fd30 	bl	8006b26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fe fcd8 	bl	8006a82 <USBD_LL_Reset>
}
 80080d2:	bf00      	nop
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
	...

080080dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fe fd2b 	bl	8006b46 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	6812      	ldr	r2, [r2, #0]
 80080fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008102:	f043 0301 	orr.w	r3, r3, #1
 8008106:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a1b      	ldr	r3, [r3, #32]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d005      	beq.n	800811c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008110:	4b04      	ldr	r3, [pc, #16]	; (8008124 <HAL_PCD_SuspendCallback+0x48>)
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	4a03      	ldr	r2, [pc, #12]	; (8008124 <HAL_PCD_SuspendCallback+0x48>)
 8008116:	f043 0306 	orr.w	r3, r3, #6
 800811a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800811c:	bf00      	nop
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	e000ed00 	.word	0xe000ed00

08008128 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe fd1b 	bl	8006b72 <USBD_LL_Resume>
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008156:	78fa      	ldrb	r2, [r7, #3]
 8008158:	4611      	mov	r1, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe fd73 	bl	8006c46 <USBD_LL_IsoOUTIncomplete>
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800817a:	78fa      	ldrb	r2, [r7, #3]
 800817c:	4611      	mov	r1, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f7fe fd2f 	bl	8006be2 <USBD_LL_IsoINIncomplete>
}
 8008184:	bf00      	nop
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe fd85 	bl	8006caa <USBD_LL_DevConnected>
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fe fd82 	bl	8006cc0 <USBD_LL_DevDisconnected>
}
 80081bc:	bf00      	nop
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d13c      	bne.n	800824e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80081d4:	4a20      	ldr	r2, [pc, #128]	; (8008258 <USBD_LL_Init+0x94>)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a1e      	ldr	r2, [pc, #120]	; (8008258 <USBD_LL_Init+0x94>)
 80081e0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80081e4:	4b1c      	ldr	r3, [pc, #112]	; (8008258 <USBD_LL_Init+0x94>)
 80081e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80081ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80081ec:	4b1a      	ldr	r3, [pc, #104]	; (8008258 <USBD_LL_Init+0x94>)
 80081ee:	2204      	movs	r2, #4
 80081f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80081f2:	4b19      	ldr	r3, [pc, #100]	; (8008258 <USBD_LL_Init+0x94>)
 80081f4:	2202      	movs	r2, #2
 80081f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80081f8:	4b17      	ldr	r3, [pc, #92]	; (8008258 <USBD_LL_Init+0x94>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80081fe:	4b16      	ldr	r3, [pc, #88]	; (8008258 <USBD_LL_Init+0x94>)
 8008200:	2202      	movs	r2, #2
 8008202:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008204:	4b14      	ldr	r3, [pc, #80]	; (8008258 <USBD_LL_Init+0x94>)
 8008206:	2200      	movs	r2, #0
 8008208:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800820a:	4b13      	ldr	r3, [pc, #76]	; (8008258 <USBD_LL_Init+0x94>)
 800820c:	2200      	movs	r2, #0
 800820e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008210:	4b11      	ldr	r3, [pc, #68]	; (8008258 <USBD_LL_Init+0x94>)
 8008212:	2200      	movs	r2, #0
 8008214:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008216:	4b10      	ldr	r3, [pc, #64]	; (8008258 <USBD_LL_Init+0x94>)
 8008218:	2200      	movs	r2, #0
 800821a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800821c:	4b0e      	ldr	r3, [pc, #56]	; (8008258 <USBD_LL_Init+0x94>)
 800821e:	2200      	movs	r2, #0
 8008220:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008222:	480d      	ldr	r0, [pc, #52]	; (8008258 <USBD_LL_Init+0x94>)
 8008224:	f7f9 fdbf 	bl	8001da6 <HAL_PCD_Init>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800822e:	f7f8 fbad 	bl	800098c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008232:	2180      	movs	r1, #128	; 0x80
 8008234:	4808      	ldr	r0, [pc, #32]	; (8008258 <USBD_LL_Init+0x94>)
 8008236:	f7fb f816 	bl	8003266 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800823a:	2240      	movs	r2, #64	; 0x40
 800823c:	2100      	movs	r1, #0
 800823e:	4806      	ldr	r0, [pc, #24]	; (8008258 <USBD_LL_Init+0x94>)
 8008240:	f7fa ffca 	bl	80031d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008244:	2280      	movs	r2, #128	; 0x80
 8008246:	2101      	movs	r1, #1
 8008248:	4803      	ldr	r0, [pc, #12]	; (8008258 <USBD_LL_Init+0x94>)
 800824a:	f7fa ffc5 	bl	80031d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20000e98 	.word	0x20000e98

0800825c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008272:	4618      	mov	r0, r3
 8008274:	f7f9 feb4 	bl	8001fe0 <HAL_PCD_Start>
 8008278:	4603      	mov	r3, r0
 800827a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800827c:	7bfb      	ldrb	r3, [r7, #15]
 800827e:	4618      	mov	r0, r3
 8008280:	f000 f942 	bl	8008508 <USBD_Get_USB_Status>
 8008284:	4603      	mov	r3, r0
 8008286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008288:	7bbb      	ldrb	r3, [r7, #14]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b084      	sub	sp, #16
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	4608      	mov	r0, r1
 800829c:	4611      	mov	r1, r2
 800829e:	461a      	mov	r2, r3
 80082a0:	4603      	mov	r3, r0
 80082a2:	70fb      	strb	r3, [r7, #3]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70bb      	strb	r3, [r7, #2]
 80082a8:	4613      	mov	r3, r2
 80082aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082ba:	78bb      	ldrb	r3, [r7, #2]
 80082bc:	883a      	ldrh	r2, [r7, #0]
 80082be:	78f9      	ldrb	r1, [r7, #3]
 80082c0:	f7fa fb85 	bl	80029ce <HAL_PCD_EP_Open>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 f91c 	bl	8008508 <USBD_Get_USB_Status>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	460b      	mov	r3, r1
 80082e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80082f8:	78fa      	ldrb	r2, [r7, #3]
 80082fa:	4611      	mov	r1, r2
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fa fbce 	bl	8002a9e <HAL_PCD_EP_Close>
 8008302:	4603      	mov	r3, r0
 8008304:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	4618      	mov	r0, r3
 800830a:	f000 f8fd 	bl	8008508 <USBD_Get_USB_Status>
 800830e:	4603      	mov	r3, r0
 8008310:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008312:	7bbb      	ldrb	r3, [r7, #14]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008336:	78fa      	ldrb	r2, [r7, #3]
 8008338:	4611      	mov	r1, r2
 800833a:	4618      	mov	r0, r3
 800833c:	f7fa fca6 	bl	8002c8c <HAL_PCD_EP_SetStall>
 8008340:	4603      	mov	r3, r0
 8008342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	4618      	mov	r0, r3
 8008348:	f000 f8de 	bl	8008508 <USBD_Get_USB_Status>
 800834c:	4603      	mov	r3, r0
 800834e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008350:	7bbb      	ldrb	r3, [r7, #14]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	460b      	mov	r3, r1
 8008364:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008374:	78fa      	ldrb	r2, [r7, #3]
 8008376:	4611      	mov	r1, r2
 8008378:	4618      	mov	r0, r3
 800837a:	f7fa fceb 	bl	8002d54 <HAL_PCD_EP_ClrStall>
 800837e:	4603      	mov	r3, r0
 8008380:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f8bf 	bl	8008508 <USBD_Get_USB_Status>
 800838a:	4603      	mov	r3, r0
 800838c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800838e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80083ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	da0b      	bge.n	80083cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80083b4:	78fb      	ldrb	r3, [r7, #3]
 80083b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ba:	68f9      	ldr	r1, [r7, #12]
 80083bc:	4613      	mov	r3, r2
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	440b      	add	r3, r1
 80083c6:	333e      	adds	r3, #62	; 0x3e
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	e00b      	b.n	80083e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083cc:	78fb      	ldrb	r3, [r7, #3]
 80083ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083d2:	68f9      	ldr	r1, [r7, #12]
 80083d4:	4613      	mov	r3, r2
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	4413      	add	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	440b      	add	r3, r1
 80083de:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80083e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800840a:	78fa      	ldrb	r2, [r7, #3]
 800840c:	4611      	mov	r1, r2
 800840e:	4618      	mov	r0, r3
 8008410:	f7fa fab8 	bl	8002984 <HAL_PCD_SetAddress>
 8008414:	4603      	mov	r3, r0
 8008416:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008418:	7bfb      	ldrb	r3, [r7, #15]
 800841a:	4618      	mov	r0, r3
 800841c:	f000 f874 	bl	8008508 <USBD_Get_USB_Status>
 8008420:	4603      	mov	r3, r0
 8008422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008424:	7bbb      	ldrb	r3, [r7, #14]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b086      	sub	sp, #24
 8008432:	af00      	add	r7, sp, #0
 8008434:	60f8      	str	r0, [r7, #12]
 8008436:	607a      	str	r2, [r7, #4]
 8008438:	603b      	str	r3, [r7, #0]
 800843a:	460b      	mov	r3, r1
 800843c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800844c:	7af9      	ldrb	r1, [r7, #11]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	f7fa fbd1 	bl	8002bf8 <HAL_PCD_EP_Transmit>
 8008456:	4603      	mov	r3, r0
 8008458:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800845a:	7dfb      	ldrb	r3, [r7, #23]
 800845c:	4618      	mov	r0, r3
 800845e:	f000 f853 	bl	8008508 <USBD_Get_USB_Status>
 8008462:	4603      	mov	r3, r0
 8008464:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008466:	7dbb      	ldrb	r3, [r7, #22]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	607a      	str	r2, [r7, #4]
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	460b      	mov	r3, r1
 800847e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800848e:	7af9      	ldrb	r1, [r7, #11]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	f7fa fb4d 	bl	8002b32 <HAL_PCD_EP_Receive>
 8008498:	4603      	mov	r3, r0
 800849a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800849c:	7dfb      	ldrb	r3, [r7, #23]
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 f832 	bl	8008508 <USBD_Get_USB_Status>
 80084a4:	4603      	mov	r3, r0
 80084a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b082      	sub	sp, #8
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	460b      	mov	r3, r1
 80084bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084c4:	78fa      	ldrb	r2, [r7, #3]
 80084c6:	4611      	mov	r1, r2
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fa fb7d 	bl	8002bc8 <HAL_PCD_EP_GetRxCount>
 80084ce:	4603      	mov	r3, r0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80084e0:	4b03      	ldr	r3, [pc, #12]	; (80084f0 <USBD_static_malloc+0x18>)
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	200013a4 	.word	0x200013a4

080084f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]

}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	4603      	mov	r3, r0
 8008510:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008512:	2300      	movs	r3, #0
 8008514:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008516:	79fb      	ldrb	r3, [r7, #7]
 8008518:	2b03      	cmp	r3, #3
 800851a:	d817      	bhi.n	800854c <USBD_Get_USB_Status+0x44>
 800851c:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <USBD_Get_USB_Status+0x1c>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	08008535 	.word	0x08008535
 8008528:	0800853b 	.word	0x0800853b
 800852c:	08008541 	.word	0x08008541
 8008530:	08008547 	.word	0x08008547
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	73fb      	strb	r3, [r7, #15]
    break;
 8008538:	e00b      	b.n	8008552 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800853a:	2303      	movs	r3, #3
 800853c:	73fb      	strb	r3, [r7, #15]
    break;
 800853e:	e008      	b.n	8008552 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008540:	2301      	movs	r3, #1
 8008542:	73fb      	strb	r3, [r7, #15]
    break;
 8008544:	e005      	b.n	8008552 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008546:	2303      	movs	r3, #3
 8008548:	73fb      	strb	r3, [r7, #15]
    break;
 800854a:	e002      	b.n	8008552 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800854c:	2303      	movs	r3, #3
 800854e:	73fb      	strb	r3, [r7, #15]
    break;
 8008550:	bf00      	nop
  }
  return usb_status;
 8008552:	7bfb      	ldrb	r3, [r7, #15]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <memset>:
 8008560:	4402      	add	r2, r0
 8008562:	4603      	mov	r3, r0
 8008564:	4293      	cmp	r3, r2
 8008566:	d100      	bne.n	800856a <memset+0xa>
 8008568:	4770      	bx	lr
 800856a:	f803 1b01 	strb.w	r1, [r3], #1
 800856e:	e7f9      	b.n	8008564 <memset+0x4>

08008570 <__libc_init_array>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	4d0d      	ldr	r5, [pc, #52]	; (80085a8 <__libc_init_array+0x38>)
 8008574:	4c0d      	ldr	r4, [pc, #52]	; (80085ac <__libc_init_array+0x3c>)
 8008576:	1b64      	subs	r4, r4, r5
 8008578:	10a4      	asrs	r4, r4, #2
 800857a:	2600      	movs	r6, #0
 800857c:	42a6      	cmp	r6, r4
 800857e:	d109      	bne.n	8008594 <__libc_init_array+0x24>
 8008580:	4d0b      	ldr	r5, [pc, #44]	; (80085b0 <__libc_init_array+0x40>)
 8008582:	4c0c      	ldr	r4, [pc, #48]	; (80085b4 <__libc_init_array+0x44>)
 8008584:	f000 f818 	bl	80085b8 <_init>
 8008588:	1b64      	subs	r4, r4, r5
 800858a:	10a4      	asrs	r4, r4, #2
 800858c:	2600      	movs	r6, #0
 800858e:	42a6      	cmp	r6, r4
 8008590:	d105      	bne.n	800859e <__libc_init_array+0x2e>
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	f855 3b04 	ldr.w	r3, [r5], #4
 8008598:	4798      	blx	r3
 800859a:	3601      	adds	r6, #1
 800859c:	e7ee      	b.n	800857c <__libc_init_array+0xc>
 800859e:	f855 3b04 	ldr.w	r3, [r5], #4
 80085a2:	4798      	blx	r3
 80085a4:	3601      	adds	r6, #1
 80085a6:	e7f2      	b.n	800858e <__libc_init_array+0x1e>
 80085a8:	08008638 	.word	0x08008638
 80085ac:	08008638 	.word	0x08008638
 80085b0:	08008638 	.word	0x08008638
 80085b4:	0800863c 	.word	0x0800863c

080085b8 <_init>:
 80085b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ba:	bf00      	nop
 80085bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085be:	bc08      	pop	{r3}
 80085c0:	469e      	mov	lr, r3
 80085c2:	4770      	bx	lr

080085c4 <_fini>:
 80085c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c6:	bf00      	nop
 80085c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ca:	bc08      	pop	{r3}
 80085cc:	469e      	mov	lr, r3
 80085ce:	4770      	bx	lr
